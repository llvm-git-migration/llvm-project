// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs
// RUN: %clang_cc1 -emit-llvm -o - -fopenmp \
// RUN: -triple x86_64-unknown-linux-gnu %s | FileCheck %s

// expected-no-diagnostics
#ifndef HEADER
#define HEADER

int main() {
   int scalar_var = 1; // scalar
   int errors = 0;

   #pragma omp target enter data map(to: scalar_var)

   #pragma omp target map(tofrom: errors) defaultmap(present)
   {
      if(scalar_var != 1) errors++;

      scalar_var = 7;
   }

    if(scalar_var != 1) errors++;

   #pragma omp target exit data map(delete: scalar_var)
}

#endif
// CHECK-LABEL: define {{[^@]+}}@main
// CHECK-SAME: () #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[SCALAR_VAR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ERRORS:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    store i32 1, ptr [[SCALAR_VAR]], align 4
// CHECK-NEXT:    store i32 0, ptr [[ERRORS]], align 4
// CHECK-NEXT:    call void @__omp_offloading_fd00_5567988_main_l15(ptr [[SCALAR_VAR]], ptr [[ERRORS]]) #[[ATTR2:[0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SCALAR_VAR]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[TMP0]], 1
// CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK:       if.then:
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ERRORS]], align 4
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP1]], 1
// CHECK-NEXT:    store i32 [[INC]], ptr [[ERRORS]], align 4
// CHECK-NEXT:    br label [[IF_END]]
// CHECK:       if.end:
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[RETVAL]], align 4
// CHECK-NEXT:    ret i32 [[TMP2]]
//
//
// CHECK-LABEL: define {{[^@]+}}@__omp_offloading_fd00_5567988_main_l15
// CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[SCALAR_VAR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ERRORS:%.*]]) #[[ATTR1:[0-9]+]] {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SCALAR_VAR_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[ERRORS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[SCALAR_VAR]], ptr [[SCALAR_VAR_ADDR]], align 8
// CHECK-NEXT:    store ptr [[ERRORS]], ptr [[ERRORS_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[SCALAR_VAR_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[ERRORS_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP0]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[TMP2]], 1
// CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK:       if.then:
// CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP1]], align 4
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP3]], 1
// CHECK-NEXT:    store i32 [[INC]], ptr [[TMP1]], align 4
// CHECK-NEXT:    br label [[IF_END]]
// CHECK:       if.end:
// CHECK-NEXT:    store i32 7, ptr [[TMP0]], align 4
// CHECK-NEXT:    ret void
//

// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// RUN: %clang_cc1 -triple x86_64-linux -std=c++98 %s -O3 -disable-llvm-passes -pedantic-errors -emit-llvm -o - | FileCheck %s
// RUN: %clang_cc1 -triple x86_64-linux -std=c++11 %s -O3 -disable-llvm-passes -pedantic-errors -emit-llvm -o - | FileCheck %s
// RUN: %clang_cc1 -triple x86_64-linux -std=c++14 %s -O3 -disable-llvm-passes -pedantic-errors -emit-llvm -o - | FileCheck %s
// RUN: %clang_cc1 -triple x86_64-linux -std=c++1z %s -O3 -disable-llvm-passes -pedantic-errors -emit-llvm -o - | FileCheck %s

// cwg158: yes

// CHECK-LABEL: define dso_local noundef ptr @_Z1fPKPKiPPi(
// CHECK-SAME: ptr noundef [[P:%.*]], ptr noundef [[Q:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[Q_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[X:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8, !tbaa [[TBAA2:![0-9]+]]
// CHECK-NEXT:    store ptr [[Q]], ptr [[Q_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[X]]) #[[ATTR2:[0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[P_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8, !tbaa [[TBAA7:![0-9]+]]
// CHECK-NEXT:    store ptr [[TMP1]], ptr [[X]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[Q_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    store ptr null, ptr [[TMP2]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[X]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[X]]) #[[ATTR2]]
// CHECK-NEXT:    ret ptr [[TMP3]]
//
const int *f(const int * const *p, int **q) {
  const int *x = *p;
  *q = 0;
  return x;
}

struct A {};

// CHECK-LABEL: define dso_local noundef ptr @_Z1gPPKM1AA3_PKiPPMS_A3_Pi(
// CHECK-SAME: ptr noundef [[P:%.*]], ptr noundef [[Q:%.*]]) #[[ATTR0]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[Q_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[X:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8, !tbaa [[TBAA9:![0-9]+]]
// CHECK-NEXT:    store ptr [[Q]], ptr [[Q_ADDR]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[X]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[P_ADDR]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    store ptr [[TMP1]], ptr [[X]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[Q_ADDR]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    store ptr null, ptr [[TMP2]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[X]], align 8, !tbaa [[TBAA9]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr [[X]]) #[[ATTR2]]
// CHECK-NEXT:    ret ptr [[TMP3]]
//
const int *(A::*const *g(const int *(A::* const **p)[3], int *(A::***q)[3]))[3] {
  const int *(A::*const *x)[3] = *p;
  *q = 0;
  return x;
}

//.
// CHECK: [[TBAA2]] = !{[[META3:![0-9]+]], [[META3]], i64 0}
// CHECK: [[META3]] = !{!"p2 int", [[META4:![0-9]+]], i64 0}
// CHECK: [[META4]] = !{!"any pointer", [[META5:![0-9]+]], i64 0}
// CHECK: [[META5]] = !{!"omnipotent char", [[META6:![0-9]+]], i64 0}
// CHECK: [[META6]] = !{!"Simple C++ TBAA"}
// CHECK: [[TBAA7]] = !{[[META8:![0-9]+]], [[META8]], i64 0}
// CHECK: [[META8]] = !{!"p1 int", [[META4]], i64 0}
// CHECK: [[TBAA9]] = !{[[META4]], [[META4]], i64 0}
//.

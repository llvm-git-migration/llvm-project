# REQUIRES: system-linux && native && target-x86_64

# We set up a file-system 'hosted' Debuginfod server

# RUN: rm -rf %t || echo ok
# RUN: mkdir -p %t/output
# RUN: mkdir -p %t/tmpstuff
# RUN: mkdir -p %t/cache
# RUN: mkdir -p %t/buildid/b4927ea09a08ee63313299cf347043010d03cc5e

# Scenario 2
#  A stripped binary, with an "-only-keep-debug" symbols file
#  Debuginfo has the 'okd' file as the 'debuginfo' item
# LLDB should ask Debuginfod for it's symbols

# RUN: yaml2obj %p/Inputs/main-nodbg.yaml -o %t/tmpstuff/main-nodbg.tmp
# RUN: yaml2obj %p/Inputs/main-dbg.yaml -o %t/tmpstuff/main-dbg
# RUN: llvm-objcopy %t/tmpstuff/main-nodbg.tmp --add-gnu-debuglink=%t/tmpstuff/main-dbg %t/output/main-nodbg
# RUN: mv %t/tmpstuff/main-dbg %t/buildid/b4927ea09a08ee63313299cf347043010d03cc5e/debuginfo
# RUN: chmod a+x %t/output/main-nodbg

# Negative test (We don't find symbols without the Debuginfod service)

# RUN: %lldb -o "settings set symbols.enable-external-lookup false" \
# RUN:       -o "target create %t/output/main-nodbg" \
# RUN:       -o "b func" \
# RUN:       -o "quit" \
# RUN:        2>&1 | FileCheck %s

# Should NOT have source file information:

# CHECK: Breakpoint 1: where = main-nodbg`func, address = 0x{{[0-9a-f]+}}

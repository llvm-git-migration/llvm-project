# REQUIRES: system-linux && native && target-x86_64

# We set up a file-system 'hosted' Debuginfod server

# RUN: rm -rf %t || echo ok
# RUN: mkdir -p %t/output
# RUN: mkdir -p %t/tmpstuff
# RUN: mkdir -p %t/cache
# RUN: mkdir -p %t/buildid/8b5b6416f61adc140ae457e208f1699f89bfda86

# Scenario 2
#  A stripped binary, with an "-only-keep-debug" symbols file
#  Debuginfo has the 'okd' file as the 'debuginfo' item
# LLDB should ask Debuginfod for it's symbols

# RUN: yaml2obj %p/Inputs/main-split.yaml -o %t/output/main-split
# RUN: yaml2obj %p/Inputs/main-dwp.yaml -o %t/buildid/8b5b6416f61adc140ae457e208f1699f89bfda86/debuginfo
# RUN: chmod a+x %t/output/main-split

# Negative test (We don't find symbols without the Debuginfod service)

# RUN: %lldb -o "settings set symbols.enable-external-lookup false" \
# RUN:       -o "target create %t/output/main-split" \
# RUN:       -o "target modules dump separate-debug-info" \
# RUN:       -o "quit" \
# RUN:        2>&1 | FileCheck %s

# CHECK: Symbol file: {{.*}}/main-split
# CHECK-NEXT: Type: "dwo"
# CHECK-NEXT: Dwo ID{{.*}}
# CHECK-NEXT: {{^[- ]+$}}
# CHECK-NEXT: 0x{{[0-9a-f]+.*}} unable to locate .dwo debug file {{.*}}main-split.dwo{{.*}} for skeleton DIE 0x{{[0-9a-f]+}}

// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL_MATH
#define _LIBCPP_EXPERIMENTAL_MATH

#include <experimental/__config>

#if _LIBCPP_STD_VER >= 17

#  include <experimental/__math/hermite.h>
#  include <type_traits> // enable_if_t, is_integral_v

_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL

inline _LIBCPP_HIDE_FROM_ABI double hermite(unsigned __n, double __x) { return __libcpp_hermite(__n, __x); }

inline _LIBCPP_HIDE_FROM_ABI float hermite(unsigned __n, float __x) {
  // use double internally -- float is too prone to overflow!
  return static_cast<float>(hermite(__n, static_cast<double>(__x)));
}

inline _LIBCPP_HIDE_FROM_ABI long double hermite(unsigned __n, long double __x) { return __libcpp_hermite(__n, __x); }

inline _LIBCPP_HIDE_FROM_ABI float hermitef(unsigned __n, float __x) { return hermite(__n, __x); }

inline _LIBCPP_HIDE_FROM_ABI long double hermitel(unsigned __n, long double __x) { return hermite(__n, __x); }

template < class _Integer >
_LIBCPP_HIDE_FROM_ABI std::enable_if_t<std::is_integral_v<_Integer>, double> hermite(unsigned int __n, _Integer __x) {
  // use double internally -- see C++17 standard - 29.9.1.2.2
  return hermite(__n, static_cast<double>(__x));
}

_LIBCPP_END_NAMESPACE_EXPERIMENTAL

#endif // _LIBCPP_STD_VER >= 17

#endif // _LIBCPP_EXPERIMENTAL_MATH

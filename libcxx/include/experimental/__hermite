//===------------------------ __hermite -------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains the internal implementations of std::hermite.
///
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL___HERMITE
#define _LIBCPP_EXPERIMENTAL___HERMITE

#include <experimental/__config>
#include <cmath>
#include <limits>

/// \return the hermite polynomial \f$ H_{n}(x) \f$
/// \note The implementation is based on the recurrence formula
/// \f[
/// nH_{n+1}(x) = 2x H_{n}(x) - 2 n H_{n-1}
/// \f]
/// Press, William H., et al. Numerical recipes 3rd edition: The art of
/// scientific computing. Cambridge university press, 2007, p. 182.
template <class _Real>
_Real __libcpp_hermite_recurrence(unsigned __n, _Real __x) {
  if (__n == 0u)
    return _Real(1);

  _Real __t2(1);
  _Real __t1 = _Real(2) * __x;
  for (unsigned __i = 1; __i < __n; ++__i) {
    const _Real __t0 = _Real(2) * (__x * __t1 - _Real(__i) * __t2);
    __t2 = __t1;
    __t1 = __t0;
  }
  return __t1;
}

template <class _Real> _Real __libcpp_hermite(unsigned __n, _Real __x) {
  if (std::isnan(__x))
    return std::numeric_limits<_Real>::quiet_NaN();

  return __libcpp_hermite_recurrence(__n, __x);
}

#endif // _LIBCPP_EXPERIMENTAL___HERMITE

// This module contains headers related to the configuration of the library. These headers
// are free of any dependency on the rest of libc++.
module std_config [system] {
  textual header "__config"
  textual header "__configuration/abi.h"
  textual header "__configuration/availability.h"
  textual header "__configuration/compiler.h"
  textual header "__configuration/language.h"
  textual header "__configuration/platform.h"
  textual header "version"
  export *
}

module std_core [system] {
  module cstddef {
    header "__cstddef/byte.h"
    header "__cstddef/max_align_t.h"
    header "__cstddef/nullptr_t.h"
    header "__cstddef/ptrdiff_t.h"
    header "__cstddef/size_t.h"
    export *
  }

  module cstdint {
    header "cstdint"
    export *
  }

  module fwd {
    header "__fwd/byte.h"
    header "__fwd/functional.h"
    header "__fwd/pair.h"
    header "__fwd/tuple.h"
    export *
  }

  module limits {
    header "limits"
    export *
  }

  module math {
    header "__math/abs.h"
    header "__math/copysign.h"
    header "__math/error_functions.h"
    header "__math/exponential_functions.h"
    header "__math/fdim.h"
    header "__math/fma.h"
    header "__math/gamma.h"
    header "__math/hyperbolic_functions.h"
    header "__math/hypot.h"
    header "__math/inverse_hyperbolic_functions.h"
    header "__math/inverse_trigonometric_functions.h"
    header "__math/logarithms.h"
    header "__math/min_max.h"
    header "__math/modulo.h"
    header "__math/remainder.h"
    header "__math/roots.h"
    header "__math/rounding_functions.h"
    header "__math/special_functions.h"
    header "__math/traits.h"
    header "__math/trigonometric_functions.h"
    export *
  }

  module type_traits {
    header "type_traits"
    header "__type_traits/add_const.h"
    header "__type_traits/add_cv.h"
    header "__type_traits/add_lvalue_reference.h"
    header "__type_traits/add_pointer.h"
    header "__type_traits/add_rvalue_reference.h"
    header "__type_traits/add_volatile.h"
    header "__type_traits/aligned_storage.h"
    header "__type_traits/aligned_union.h"
    header "__type_traits/alignment_of.h"
    header "__type_traits/can_extract_key.h"
    header "__type_traits/common_reference.h"
    header "__type_traits/common_type.h"
    header "__type_traits/conditional.h"
    header "__type_traits/conjunction.h"
    header "__type_traits/copy_cv.h"
    header "__type_traits/copy_cvref.h"
    header "__type_traits/datasizeof.h"
    header "__type_traits/decay.h"
    header "__type_traits/dependent_type.h"
    header "__type_traits/desugars_to.h"
    header "__type_traits/disjunction.h"
    header "__type_traits/enable_if.h"
    header "__type_traits/extent.h"
    header "__type_traits/has_unique_object_representation.h"
    header "__type_traits/has_virtual_destructor.h"
    header "__type_traits/integral_constant.h"
    header "__type_traits/invoke.h"
    header "__type_traits/is_abstract.h"
    header "__type_traits/is_aggregate.h"
    header "__type_traits/is_allocator.h"
    header "__type_traits/is_always_bitcastable.h"
    header "__type_traits/is_arithmetic.h"
    header "__type_traits/is_array.h"
    header "__type_traits/is_assignable.h"
    header "__type_traits/is_base_of.h"
    header "__type_traits/is_bounded_array.h"
    header "__type_traits/is_callable.h"
    header "__type_traits/is_char_like_type.h"
    header "__type_traits/is_class.h"
    header "__type_traits/is_compound.h"
    header "__type_traits/is_const.h"
    header "__type_traits/is_constant_evaluated.h"
    header "__type_traits/is_constructible.h"
    header "__type_traits/is_convertible.h"
    header "__type_traits/is_core_convertible.h"
    header "__type_traits/is_destructible.h"
    header "__type_traits/is_empty.h"
    header "__type_traits/is_enum.h"
    header "__type_traits/is_equality_comparable.h"
    header "__type_traits/is_execution_policy.h"
    header "__type_traits/is_final.h"
    header "__type_traits/is_floating_point.h"
    header "__type_traits/is_function.h"
    header "__type_traits/is_fundamental.h"
    header "__type_traits/is_implicitly_default_constructible.h"
    header "__type_traits/is_integral.h"
    header "__type_traits/is_literal_type.h"
    header "__type_traits/is_member_pointer.h"
    header "__type_traits/is_nothrow_assignable.h"
    header "__type_traits/is_nothrow_constructible.h"
    header "__type_traits/is_nothrow_convertible.h"
    header "__type_traits/is_nothrow_destructible.h"
    header "__type_traits/is_null_pointer.h"
    header "__type_traits/is_object.h"
    header "__type_traits/is_pod.h"
    header "__type_traits/is_pointer.h"
    header "__type_traits/is_polymorphic.h"
    header "__type_traits/is_primary_template.h"
    header "__type_traits/is_reference_wrapper.h"
    header "__type_traits/is_reference.h"
    header "__type_traits/is_referenceable.h"
    header "__type_traits/is_same.h"
    header "__type_traits/is_scalar.h"
    header "__type_traits/is_signed_integer.h"
    header "__type_traits/is_signed.h"
    header "__type_traits/is_specialization.h"
    header "__type_traits/is_standard_layout.h"
    header "__type_traits/is_swappable.h"
    header "__type_traits/is_trivial.h"
    header "__type_traits/is_trivially_assignable.h"
    header "__type_traits/is_trivially_constructible.h"
    header "__type_traits/is_trivially_copyable.h"
    header "__type_traits/is_trivially_destructible.h"
    header "__type_traits/is_trivially_lexicographically_comparable.h"
    header "__type_traits/is_trivially_relocatable.h"
    header "__type_traits/is_unbounded_array.h"
    header "__type_traits/is_union.h"
    header "__type_traits/is_unsigned_integer.h"
    header "__type_traits/is_unsigned.h"
    header "__type_traits/is_valid_expansion.h"
    header "__type_traits/is_void.h"
    header "__type_traits/is_volatile.h"
    header "__type_traits/lazy.h"
    header "__type_traits/make_32_64_or_128_bit.h"
    header "__type_traits/make_const_lvalue_ref.h"
    header "__type_traits/make_signed.h"
    header "__type_traits/make_unsigned.h"
    header "__type_traits/maybe_const.h"
    header "__type_traits/nat.h"
    header "__type_traits/negation.h"
    header "__type_traits/promote.h"
    header "__type_traits/rank.h"
    header "__type_traits/remove_all_extents.h"
    header "__type_traits/remove_const_ref.h"
    header "__type_traits/remove_const.h"
    header "__type_traits/remove_cv.h"
    header "__type_traits/remove_cvref.h"
    header "__type_traits/remove_extent.h"
    header "__type_traits/remove_pointer.h"
    header "__type_traits/remove_reference.h"
    header "__type_traits/remove_volatile.h"
    header "__type_traits/result_of.h"
    header "__type_traits/strip_signature.h"
    header "__type_traits/type_identity.h"
    header "__type_traits/type_list.h"
    header "__type_traits/underlying_type.h"
    header "__type_traits/unwrap_ref.h"
    header "__type_traits/void_t.h"
    export *
  } // module type_traits

  // Only the truly dependency-free parts of __utility are here
  module utility {
    header "__utility/declval.h"
    header "__utility/forward.h"
    export *
  }

  export *
} // module std_core

module std [system] {
  module algorithm {
    header "algorithm"
    header "__algorithm/adjacent_find.h"
    header "__algorithm/all_of.h"
    header "__algorithm/any_of.h"
    header "__algorithm/binary_search.h"
    header "__algorithm/clamp.h"
    header "__algorithm/comp_ref_type.h"
    header "__algorithm/comp.h"
    header "__algorithm/copy_backward.h"
    header "__algorithm/copy_if.h"
    header "__algorithm/copy_move_common.h"
    header "__algorithm/copy_n.h"
    header "__algorithm/copy.h"
    header "__algorithm/count_if.h"
    header "__algorithm/count.h"
    header "__algorithm/equal_range.h"
    header "__algorithm/equal.h"
    header "__algorithm/fill_n.h"
    header "__algorithm/fill.h"
    header "__algorithm/find_end.h"
    header "__algorithm/find_first_of.h"
    header "__algorithm/find_if_not.h"
    header "__algorithm/find_if.h"
    header "__algorithm/find_segment_if.h"
    header "__algorithm/find.h"
    header "__algorithm/fold.h"
    header "__algorithm/for_each_n.h"
    header "__algorithm/for_each_segment.h"
    header "__algorithm/for_each.h"
    header "__algorithm/generate_n.h"
    header "__algorithm/generate.h"
    header "__algorithm/half_positive.h"
    header "__algorithm/in_found_result.h"
    header "__algorithm/in_fun_result.h"
    header "__algorithm/in_in_out_result.h"
    header "__algorithm/in_in_result.h"
    header "__algorithm/in_out_out_result.h"
    header "__algorithm/in_out_result.h"
    header "__algorithm/includes.h"
    header "__algorithm/inplace_merge.h"
    header "__algorithm/is_heap_until.h"
    header "__algorithm/is_heap.h"
    header "__algorithm/is_partitioned.h"
    header "__algorithm/is_permutation.h"
    header "__algorithm/is_sorted_until.h"
    header "__algorithm/is_sorted.h"
    header "__algorithm/iter_swap.h"
    header "__algorithm/iterator_operations.h"
    header "__algorithm/lexicographical_compare_three_way.h"
    header "__algorithm/lexicographical_compare.h"
    header "__algorithm/lower_bound.h"
    header "__algorithm/make_heap.h"
    header "__algorithm/make_projected.h"
    header "__algorithm/max_element.h"
    header "__algorithm/max.h"
    header "__algorithm/merge.h"
    header "__algorithm/min_element.h"
    header "__algorithm/min_max_result.h"
    header "__algorithm/min.h"
    header "__algorithm/minmax_element.h"
    header "__algorithm/minmax.h"
    header "__algorithm/mismatch.h"
    header "__algorithm/move_backward.h"
    header "__algorithm/move.h"
    header "__algorithm/next_permutation.h"
    header "__algorithm/none_of.h"
    header "__algorithm/nth_element.h"
    header "__algorithm/partial_sort_copy.h"
    header "__algorithm/partial_sort.h"
    header "__algorithm/partition_copy.h"
    header "__algorithm/partition_point.h"
    header "__algorithm/partition.h"
    header "__algorithm/pop_heap.h"
    header "__algorithm/prev_permutation.h"
    header "__algorithm/pstl.h"
    header "__algorithm/push_heap.h"
    header "__algorithm/ranges_adjacent_find.h"
    header "__algorithm/ranges_all_of.h"
    header "__algorithm/ranges_any_of.h"
    header "__algorithm/ranges_binary_search.h"
    header "__algorithm/ranges_clamp.h"
    header "__algorithm/ranges_contains_subrange.h"
    header "__algorithm/ranges_contains.h"
    header "__algorithm/ranges_copy_backward.h"
    header "__algorithm/ranges_copy_if.h"
    header "__algorithm/ranges_copy_n.h"
    header "__algorithm/ranges_copy.h"
    header "__algorithm/ranges_count_if.h"
    header "__algorithm/ranges_count.h"
    header "__algorithm/ranges_ends_with.h"
    header "__algorithm/ranges_equal_range.h"
    header "__algorithm/ranges_equal.h"
    header "__algorithm/ranges_fill_n.h"
    header "__algorithm/ranges_fill.h"
    header "__algorithm/ranges_find_end.h"
    header "__algorithm/ranges_find_first_of.h"
    header "__algorithm/ranges_find_if_not.h"
    header "__algorithm/ranges_find_if.h"
    header "__algorithm/ranges_find_last.h"
    header "__algorithm/ranges_find.h"
    header "__algorithm/ranges_for_each_n.h"
    header "__algorithm/ranges_for_each.h"
    header "__algorithm/ranges_generate_n.h"
    header "__algorithm/ranges_generate.h"
    header "__algorithm/ranges_includes.h"
    header "__algorithm/ranges_inplace_merge.h"
    header "__algorithm/ranges_is_heap_until.h"
    header "__algorithm/ranges_is_heap.h"
    header "__algorithm/ranges_is_partitioned.h"
    header "__algorithm/ranges_is_permutation.h"
    header "__algorithm/ranges_is_sorted_until.h"
    header "__algorithm/ranges_is_sorted.h"
    header "__algorithm/ranges_iterator_concept.h"
    header "__algorithm/ranges_lexicographical_compare.h"
    header "__algorithm/ranges_lower_bound.h"
    header "__algorithm/ranges_make_heap.h"
    header "__algorithm/ranges_max_element.h"
    header "__algorithm/ranges_max.h"
    header "__algorithm/ranges_merge.h"
    header "__algorithm/ranges_min_element.h"
    header "__algorithm/ranges_min.h"
    header "__algorithm/ranges_minmax_element.h"
    header "__algorithm/ranges_minmax.h"
    header "__algorithm/ranges_mismatch.h"
    header "__algorithm/ranges_move_backward.h"
    header "__algorithm/ranges_move.h"
    header "__algorithm/ranges_next_permutation.h"
    header "__algorithm/ranges_none_of.h"
    header "__algorithm/ranges_nth_element.h"
    header "__algorithm/ranges_partial_sort_copy.h"
    header "__algorithm/ranges_partial_sort.h"
    header "__algorithm/ranges_partition_copy.h"
    header "__algorithm/ranges_partition_point.h"
    header "__algorithm/ranges_partition.h"
    header "__algorithm/ranges_pop_heap.h"
    header "__algorithm/ranges_prev_permutation.h"
    header "__algorithm/ranges_push_heap.h"
    header "__algorithm/ranges_remove_copy_if.h"
    header "__algorithm/ranges_remove_copy.h"
    header "__algorithm/ranges_remove_if.h"
    header "__algorithm/ranges_remove.h"
    header "__algorithm/ranges_replace_copy_if.h"
    header "__algorithm/ranges_replace_copy.h"
    header "__algorithm/ranges_replace_if.h"
    header "__algorithm/ranges_replace.h"
    header "__algorithm/ranges_reverse_copy.h"
    header "__algorithm/ranges_reverse.h"
    header "__algorithm/ranges_rotate_copy.h"
    header "__algorithm/ranges_rotate.h"
    header "__algorithm/ranges_sample.h"
    header "__algorithm/ranges_search_n.h"
    header "__algorithm/ranges_search.h"
    header "__algorithm/ranges_set_difference.h"
    header "__algorithm/ranges_set_intersection.h"
    header "__algorithm/ranges_set_symmetric_difference.h"
    header "__algorithm/ranges_set_union.h"
    header "__algorithm/ranges_shuffle.h"
    header "__algorithm/ranges_sort_heap.h"
    header "__algorithm/ranges_sort.h"
    header "__algorithm/ranges_stable_partition.h"
    header "__algorithm/ranges_stable_sort.h"
    header "__algorithm/ranges_starts_with.h"
    header "__algorithm/ranges_swap_ranges.h"
    header "__algorithm/ranges_transform.h"
    header "__algorithm/ranges_unique_copy.h"
    header "__algorithm/ranges_unique.h"
    header "__algorithm/ranges_upper_bound.h"
    header "__algorithm/remove_copy_if.h"
    header "__algorithm/remove_copy.h"
    header "__algorithm/remove_if.h"
    header "__algorithm/remove.h"
    header "__algorithm/replace_copy_if.h"
    header "__algorithm/replace_copy.h"
    header "__algorithm/replace_if.h"
    header "__algorithm/replace.h"
    header "__algorithm/reverse_copy.h"
    header "__algorithm/reverse.h"
    header "__algorithm/rotate_copy.h"
    header "__algorithm/rotate.h"
    header "__algorithm/sample.h"
    header "__algorithm/search_n.h"
    header "__algorithm/search.h"
    header "__algorithm/set_difference.h"
    header "__algorithm/set_intersection.h"
    header "__algorithm/set_symmetric_difference.h"
    header "__algorithm/set_union.h"
    header "__algorithm/shift_left.h"
    header "__algorithm/shift_right.h"
    header "__algorithm/shuffle.h"
    header "__algorithm/sift_down.h"
    header "__algorithm/simd_utils.h"
    header "__algorithm/sort_heap.h"
    header "__algorithm/sort.h"
    header "__algorithm/stable_partition.h"
    header "__algorithm/stable_sort.h"
    header "__algorithm/swap_ranges.h"
    header "__algorithm/three_way_comp_ref_type.h"
    header "__algorithm/transform.h"
    header "__algorithm/uniform_random_bit_generator_adaptor.h"
    header "__algorithm/unique_copy.h"
    header "__algorithm/unique.h"
    header "__algorithm/unwrap_iter.h"
    header "__algorithm/unwrap_range.h"
    header "__algorithm/upper_bound.h"

    export debug_utils.strict_weak_ordering_check
    export functional.ranges_operations
    export iterator.aliasing_iterator
    export iterator.iterator_traits
    export type_traits.is_trivially_copyable
    export utility.pair
    export *
  } // module algorithm

  module any {
    header "any"
    export *
  }

  module array {
    header "array"
    header "__fwd/array.h"
    export *
  }

  module atomic {
    header "atomic"
    header "__atomic/aliases.h"
    header "__atomic/atomic_base.h"
    header "__atomic/atomic_flag.h"
    header "__atomic/atomic_init.h"
    header "__atomic/atomic_lock_free.h"
    header "__atomic/atomic_ref.h"
    header "__atomic/atomic_sync.h"
    header "__atomic/atomic.h"
    header "__atomic/check_memory_order.h"
    header "__atomic/contention_t.h"
    header "__atomic/cxx_atomic_impl.h"
    header "__atomic/fence.h"
    header "__atomic/is_always_lock_free.h"
    header "__atomic/kill_dependency.h"
    header "__atomic/memory_order.h"
    header "__atomic/to_gcc_order.h"
    export *
  }

  module barrier {
    header "barrier"
    export *
  }

  module bit {
    header "bit"
    header "__bit/bit_cast.h"
    header "__bit/bit_ceil.h"
    header "__bit/bit_floor.h"
    header "__bit/bit_log2.h"
    header "__bit/bit_width.h"
    header "__bit/blsr.h"
    header "__bit/byteswap.h"
    header "__bit/countl.h"
    header "__bit/countr.h"
    header "__bit/endian.h"
    header "__bit/has_single_bit.h"
    header "__bit/invert_if.h"
    header "__bit/popcount.h"
    header "__bit/rotate.h"
    export *
  }

  module bitset {
    header "bitset"
    export *
  }

  module charconv {
    header "charconv"
    header "__charconv/chars_format.h"
    header "__charconv/from_chars_integral.h"
    header "__charconv/from_chars_result.h"
    header "__charconv/tables.h"
    header "__charconv/to_chars.h"
    header "__charconv/to_chars_base_10.h"
    header "__charconv/to_chars_floating_point.h"
    header "__charconv/to_chars_integral.h"
    header "__charconv/to_chars_result.h"
    header "__charconv/traits.h"
    export *
  }

  module chrono {
    header "chrono"
    header "__chrono/calendar.h"
    header "__chrono/concepts.h"
    header "__chrono/convert_to_timespec.h"
    header "__chrono/convert_to_tm.h"
    header "__chrono/day.h"
    header "__chrono/duration.h"
    header "__chrono/exception.h"
    header "__chrono/file_clock.h"
    header "__chrono/formatter.h"
    header "__chrono/hh_mm_ss.h"
    header "__chrono/high_resolution_clock.h"
    header "__chrono/leap_second.h"
    header "__chrono/literals.h"
    header "__chrono/local_info.h"
    header "__chrono/month_weekday.h"
    header "__chrono/month.h"
    header "__chrono/monthday.h"
    header "__chrono/ostream.h"
    header "__chrono/parser_std_format_spec.h"
    header "__chrono/statically_widen.h"
    header "__chrono/steady_clock.h"
    header "__chrono/sys_info.h"
    header "__chrono/system_clock.h"
    header "__chrono/time_point.h"
    header "__chrono/time_zone_link.h"
    header "__chrono/time_zone.h"
    header "__chrono/tzdb_list.h"
    header "__chrono/tzdb.h"
    header "__chrono/weekday.h"
    header "__chrono/year_month_day.h"
    header "__chrono/year_month_weekday.h"
    header "__chrono/year_month.h"
    header "__chrono/year.h"
    header "__chrono/zoned_time.h"

    export memory.unique_ptr
    export *
  } // module chrono

  module codecvt {
    header "codecvt"
    export *
  }

  module compare {
    header "compare"
    header "__compare/common_comparison_category.h"
    header "__compare/compare_partial_order_fallback.h"
    header "__compare/compare_strong_order_fallback.h"
    header "__compare/compare_three_way.h"
    header "__compare/compare_three_way_result.h"
    header "__compare/compare_weak_order_fallback.h"
    header "__compare/is_eq.h"
    header "__compare/ordering.h"
    header "__compare/partial_order.h"
    header "__compare/strong_order.h"
    header "__compare/synth_three_way.h"
    header "__compare/three_way_comparable.h"
    header "__compare/weak_order.h"
    export *
  }

  module complex {
    header "complex"
    header "__fwd/complex.h"
    export *
  }

  module concepts {
    header "concepts"
    header "__concepts/arithmetic.h"
    header "__concepts/assignable.h"
    header "__concepts/boolean_testable.h"
    header "__concepts/class_or_enum.h"
    header "__concepts/common_reference_with.h"
    header "__concepts/common_with.h"
    header "__concepts/constructible.h"
    header "__concepts/convertible_to.h"
    header "__concepts/copyable.h"
    header "__concepts/derived_from.h"
    header "__concepts/destructible.h"
    header "__concepts/different_from.h"
    header "__concepts/equality_comparable.h"
    header "__concepts/invocable.h"
    header "__concepts/movable.h"
    header "__concepts/predicate.h"
    header "__concepts/regular.h"
    header "__concepts/relation.h"
    header "__concepts/same_as.h"
    header "__concepts/semiregular.h"
    header "__concepts/swappable.h"
    header "__concepts/totally_ordered.h"

    export concepts.destructible
    export type_traits.common_reference
    export type_traits.is_nothrow_destructible
    export type_traits.is_object
    export type_traits.is_same
    export *
  }

  module condition_variable {
    header "condition_variable"
    header "__condition_variable/condition_variable.h"
    export *
  }

  module cassert {
    textual header "cassert" // NDEBUG requires textual inclusion
    export *
  }

  module ccomplex {
    header "ccomplex"
    export *
  }

  module cctype {
    header "cctype"
    export *
  }

  module cerrno {
    header "cerrno"
    export *
  }

  module cfenv {
    header "cfenv"
    export *
  }

  module cfloat {
    header "cfloat"
    export *
  }

  module cinttypes {
    header "cinttypes"
    export *
  }

  module ciso646 {
    header "ciso646"
    export *
  }

  module climits {
    header "climits"
    export *
  }

  module clocale {
    header "clocale"
    export *
  }

  module cmath {
    header "cmath"
    export *
  }

  module csetjmp {
    header "csetjmp"
    export *
  }

  module csignal {
    header "csignal"
    export *
  }

  module cstdarg {
    header "cstdarg"
    export *
  }

  module cstdbool {
    header "cstdbool"
    export *
  }

  module cstddef {
    header "cstddef"
    export *
  }

  module cstdio {
    header "cstdio"
    export *
  }

  module cstdlib {
    header "cstdlib"
    export *
  }

  module cstring {
    header "cstring"
    export *
  }

  module ctgmath {
    header "ctgmath"
    export *
  }

  module ctime {
    header "ctime"
    export *
  }

  module cuchar {
    header "cuchar"
    export *
  }

  module cwchar {
    header "cwchar"
    export *
  }

  module cwctype {
    header "cwctype"
    export *
  }

  module deque {
    header "deque"
    header "__fwd/deque.h"
    export *
  }

  module exception {
    header "exception"
    header "__exception/exception.h"
    header "__exception/exception_ptr.h"
    header "__exception/nested_exception.h"
    header "__exception/operations.h"
    header "__exception/terminate.h"
    export *
  }

  module execution {
    header "execution"
    export *
  }

  module expected {
    header "expected"
    header "__expected/bad_expected_access.h"
    header "__expected/expected.h"
    header "__expected/unexpect.h"
    header "__expected/unexpected.h"
    export *
  }

  module filesystem {
    header "filesystem"
    header "__filesystem/copy_options.h"
    header "__filesystem/directory_entry.h"
    header "__filesystem/directory_iterator.h"
    header "__filesystem/directory_options.h"
    header "__filesystem/file_status.h"
    header "__filesystem/file_time_type.h"
    header "__filesystem/file_type.h"
    header "__filesystem/filesystem_error.h"
    header "__filesystem/operations.h"
    header "__filesystem/path_iterator.h"
    header "__filesystem/path.h"
    header "__filesystem/perm_options.h"
    header "__filesystem/perms.h"
    header "__filesystem/recursive_directory_iterator.h"
    header "__filesystem/space_info.h"
    header "__filesystem/u8path.h"

    export std_string // returned by various methods of filesystem::path
    export memory.shared_ptr
    export *
  }

  module format {
    header "format"
    header "__format/buffer.h"
    header "__format/concepts.h"
    header "__format/container_adaptor.h"
    header "__format/enable_insertable.h"
    header "__format/escaped_output_table.h"
    header "__format/extended_grapheme_cluster_table.h"
    header "__format/format_arg_store.h"
    header "__format/format_arg.h"
    header "__format/format_args.h"
    header "__format/format_context.h"
    header "__format/format_error.h"
    header "__format/format_functions.h"
    header "__format/format_parse_context.h"
    header "__format/format_string.h"
    header "__format/format_to_n_result.h"
    header "__format/formatter_bool.h"
    header "__format/formatter_char.h"
    header "__format/formatter_floating_point.h"
    header "__format/formatter_integer.h"
    header "__format/formatter_integral.h"
    header "__format/formatter_output.h"
    header "__format/formatter_pointer.h"
    header "__format/formatter_string.h"
    header "__format/formatter_tuple.h"
    header "__format/formatter.h"
    header "__format/indic_conjunct_break_table.h"
    header "__format/parser_std_format_spec.h"
    header "__format/range_default_formatter.h"
    header "__format/range_formatter.h"
    header "__format/unicode.h"
    header "__format/width_estimation_table.h"
    header "__format/write_escaped.h"
    header "__fwd/format.h"

    export iterator.incrementable_traits
    export string
    export *
  } // module format

  module forward_list {
    header "forward_list"
    export *
  }

  module fstream {
    header "fstream"
    header "__fwd/fstream.h"
    export *
  }

  module functional {
    header "functional"
    header "__functional/binary_function.h"
    header "__functional/binary_negate.h"
    header "__functional/bind_back.h"
    header "__functional/bind_front.h"
    header "__functional/bind.h"
    header "__functional/binder1st.h"
    header "__functional/binder2nd.h"
    header "__functional/boyer_moore_searcher.h"
    header "__functional/compose.h"
    header "__functional/default_searcher.h"
    header "__functional/function.h"
    header "__functional/hash.h"
    header "__functional/identity.h"
    header "__functional/invoke.h"
    header "__functional/is_transparent.h"
    header "__functional/mem_fn.h"
    header "__functional/mem_fun_ref.h"
    header "__functional/not_fn.h"
    header "__functional/operations.h"
    header "__functional/perfect_forward.h"
    header "__functional/pointer_to_binary_function.h"
    header "__functional/pointer_to_unary_function.h"
    header "__functional/ranges_operations.h"
    header "__functional/reference_wrapper.h"
    header "__functional/unary_function.h"
    header "__functional/unary_negate.h"
    header "__functional/weak_result_type.h"

    export memory.shared_ptr
    export utility.pair
    export *
  } // module functional

  module future {
    header "future"
    export *
  }

  module initializer_list {
    header "initializer_list"
    export *
  }

  module iomanip {
    header "iomanip"
    export *
  }

  module ios {
    header "ios"
    header "__fwd/ios.h"
    header "__ios/fpos.h"
    export *
  }

  module iosfwd {
    header "iosfwd"
    export *
  }

  module iostream {
    header "iostream"
    header "__fwd/ostream.h"
    export *
  }

  module istream {
    header "istream"
    header "__fwd/istream.h"
    export *
  }

  module iterator {
    header "iterator"
    header "__iterator/access.h"
    header "__iterator/advance.h"
    header "__iterator/aliasing_iterator.h"
    header "__iterator/back_insert_iterator.h"
    header "__iterator/bounded_iter.h"
    header "__iterator/common_iterator.h"
    header "__iterator/concepts.h"
    header "__iterator/counted_iterator.h"
    header "__iterator/cpp17_iterator_concepts.h"
    header "__iterator/data.h"
    header "__iterator/default_sentinel.h"
    header "__iterator/distance.h"
    header "__iterator/empty.h"
    header "__iterator/erase_if_container.h"
    header "__iterator/front_insert_iterator.h"
    header "__iterator/incrementable_traits.h"
    header "__iterator/indirectly_comparable.h"
    header "__iterator/insert_iterator.h"
    header "__iterator/istream_iterator.h"
    header "__iterator/istreambuf_iterator.h"
    header "__iterator/iter_move.h"
    header "__iterator/iter_swap.h"
    header "__iterator/iterator_traits.h"
    header "__iterator/iterator_with_data.h"
    header "__iterator/iterator.h"
    header "__iterator/mergeable.h"
    header "__iterator/move_iterator.h"
    header "__iterator/move_sentinel.h"
    header "__iterator/next.h"
    header "__iterator/ostream_iterator.h"
    header "__iterator/ostreambuf_iterator.h"
    header "__iterator/permutable.h"
    header "__iterator/prev.h"
    header "__iterator/projected.h"
    header "__iterator/ranges_iterator_traits.h"
    header "__iterator/readable_traits.h"
    header "__iterator/reverse_access.h"
    header "__iterator/reverse_iterator.h"
    header "__iterator/segmented_iterator.h"
    header "__iterator/size.h"
    header "__iterator/sortable.h"
    header "__iterator/unreachable_sentinel.h"
    header "__iterator/wrap_iter.h"
    export *
  }

  module latch {
    header "latch"
    export *
  }

  module list {
    header "list"
    export *
  }

  module locale {
    header "locale"
    header "__locale_dir/locale_base_api.h"
    header "__locale_dir/locale_base_api/locale_guard.h"
    module locale_base_api {
      textual header "__locale_dir/locale_base_api/android.h"
      textual header "__locale_dir/locale_base_api/bsd_locale_defaults.h"
      textual header "__locale_dir/locale_base_api/bsd_locale_fallbacks.h"
      textual header "__locale_dir/locale_base_api/fuchsia.h"
      textual header "__locale_dir/locale_base_api/ibm.h"
      textual header "__locale_dir/locale_base_api/musl.h"
      textual header "__locale_dir/locale_base_api/newlib.h"
      textual header "__locale_dir/locale_base_api/openbsd.h"
      textual header "__locale_dir/locale_base_api/win32.h"
    }
    export *
  }

  // TODO: Understand why this needs to live in its own module
  module locale_base [system] {
    header "__locale"
    export *
  }

  module map {
    header "map"
    export *
  }

  module mdspan {
    header "mdspan"
    header "__mdspan/default_accessor.h"
    header "__mdspan/extents.h"
    header "__fwd/mdspan.h"
    header "__mdspan/layout_left.h"
    header "__mdspan/layout_right.h"
    header "__mdspan/layout_stride.h"
    header "__mdspan/mdspan.h"
    export *
  }

  module memory {
    header "memory"
    header "__fwd/memory.h"
    header "__memory/addressof.h"
    header "__memory/align.h"
    header "__memory/aligned_alloc.h"
    header "__memory/allocate_at_least.h"
    header "__memory/allocation_guard.h"
    header "__memory/allocator_arg_t.h"
    header "__memory/allocator_destructor.h"
    header "__memory/allocator_traits.h"
    header "__memory/allocator.h"
    header "__memory/assume_aligned.h"
    header "__memory/auto_ptr.h"
    header "__memory/builtin_new_allocator.h"
    header "__memory/compressed_pair.h"
    header "__memory/concepts.h"
    header "__memory/construct_at.h"
    header "__memory/destruct_n.h"
    header "__memory/inout_ptr.h"
    header "__memory/noexcept_move_assign_container.h"
    header "__memory/out_ptr.h"
    header "__memory/pointer_traits.h"
    header "__memory/ranges_construct_at.h"
    header "__memory/ranges_uninitialized_algorithms.h"
    header "__memory/raw_storage_iterator.h"
    header "__memory/shared_ptr.h"
    header "__memory/swap_allocator.h"
    header "__memory/temp_value.h"
    header "__memory/temporary_buffer.h"
    header "__memory/uninitialized_algorithms.h"
    header "__memory/unique_ptr.h"
    header "__memory/uses_allocator_construction.h"
    header "__memory/uses_allocator.h"
    header "__memory/voidify.h"
    export *
  }

  module memory_resource {
    header "memory_resource"
    header "__fwd/memory_resource.h"
    header "__memory_resource/memory_resource.h"
    header "__memory_resource/monotonic_buffer_resource.h"
    header "__memory_resource/polymorphic_allocator.h"
    header "__memory_resource/pool_options.h"
    header "__memory_resource/synchronized_pool_resource.h"
    header "__memory_resource/unsynchronized_pool_resource.h"
    export *
  }

  module mutex {
    header "mutex"
    header "__mutex/lock_guard.h"
    header "__mutex/mutex.h"
    header "__mutex/once_flag.h"
    header "__mutex/tag_types.h"
    header "__mutex/unique_lock.h"
    export *
  }

  module new {
    header "new"
    export *
  }

  module numbers {
    header "numbers"
    export *
  }

  module numeric {
    header "numeric"
    header "__numeric/accumulate.h"
    header "__numeric/adjacent_difference.h"
    header "__numeric/exclusive_scan.h"
    header "__numeric/gcd_lcm.h"
    header "__numeric/inclusive_scan.h"
    header "__numeric/inner_product.h"
    header "__numeric/iota.h"
    header "__numeric/midpoint.h"
    header "__numeric/partial_sum.h"
    header "__numeric/pstl.h"
    header "__numeric/reduce.h"
    header "__numeric/saturation_arithmetic.h"
    header "__numeric/transform_exclusive_scan.h"
    header "__numeric/transform_inclusive_scan.h"
    header "__numeric/transform_reduce.h"
    export *
  }

  module optional {
    header "optional"
    export *
  }

  module ostream {
    header "ostream"
    header "__ostream/basic_ostream.h"
    header "__ostream/print.h"

    export print
    export streambuf
    export *
  }

  module print {
    header "print"
    export *
  }

  module queue {
    header "queue"
    header "__fwd/queue.h"
    export *
  }

  module random {
    header "random"
    header "__random/bernoulli_distribution.h"
    header "__random/binomial_distribution.h"
    header "__random/cauchy_distribution.h"
    header "__random/chi_squared_distribution.h"
    header "__random/clamp_to_integral.h"
    header "__random/default_random_engine.h"
    header "__random/discard_block_engine.h"
    header "__random/discrete_distribution.h"
    header "__random/exponential_distribution.h"
    header "__random/extreme_value_distribution.h"
    header "__random/fisher_f_distribution.h"
    header "__random/gamma_distribution.h"
    header "__random/generate_canonical.h"
    header "__random/geometric_distribution.h"
    header "__random/independent_bits_engine.h"
    header "__random/is_seed_sequence.h"
    header "__random/is_valid.h"
    header "__random/knuth_b.h"
    header "__random/linear_congruential_engine.h"
    header "__random/log2.h"
    header "__random/lognormal_distribution.h"
    header "__random/mersenne_twister_engine.h"
    header "__random/negative_binomial_distribution.h"
    header "__random/normal_distribution.h"
    header "__random/piecewise_constant_distribution.h"
    header "__random/piecewise_linear_distribution.h"
    header "__random/poisson_distribution.h"
    header "__random/random_device.h"
    header "__random/ranlux.h"
    header "__random/seed_seq.h"
    header "__random/shuffle_order_engine.h"
    header "__random/student_t_distribution.h"
    header "__random/subtract_with_carry_engine.h"
    header "__random/uniform_int_distribution.h"
    header "__random/uniform_random_bit_generator.h"
    header "__random/uniform_real_distribution.h"
    header "__random/weibull_distribution.h"

    export *
  }

  module ranges {
    header "ranges"
    header "__fwd/subrange.h"
    header "__ranges/access.h"
    header "__ranges/all.h"
    header "__ranges/as_rvalue_view.h"
    header "__ranges/chunk_by_view.h"
    header "__ranges/common_view.h"
    header "__ranges/concepts.h"
    header "__ranges/container_compatible_range.h"
    header "__ranges/counted.h"
    header "__ranges/dangling.h"
    header "__ranges/data.h"
    header "__ranges/drop_view.h"
    header "__ranges/drop_while_view.h"
    header "__ranges/elements_view.h"
    header "__ranges/empty_view.h"
    header "__ranges/empty.h"
    header "__ranges/enable_borrowed_range.h"
    header "__ranges/enable_view.h"
    header "__ranges/filter_view.h"
    header "__ranges/from_range.h"
    header "__ranges/iota_view.h"
    header "__ranges/istream_view.h"
    header "__ranges/join_view.h"
    header "__ranges/lazy_split_view.h"
    header "__ranges/movable_box.h"
    header "__ranges/non_propagating_cache.h"
    header "__ranges/owning_view.h"
    header "__ranges/range_adaptor.h"
    header "__ranges/rbegin.h"
    header "__ranges/ref_view.h"
    header "__ranges/rend.h"
    header "__ranges/repeat_view.h"
    header "__ranges/reverse_view.h"
    header "__ranges/single_view.h"
    header "__ranges/size.h"
    header "__ranges/split_view.h"
    header "__ranges/subrange.h"
    header "__ranges/take_view.h"
    header "__ranges/take_while_view.h"
    header "__ranges/to.h"
    header "__ranges/transform_view.h"
    header "__ranges/view_interface.h"
    header "__ranges/views.h"
    header "__ranges/zip_view.h"

    export functional.bind_back
    export functional.compose
    export functional.perfect_forward
    export functional.perfect_forward
    export iterator.concepts
    export iterator.iterator_with_data
    export iterator.segmented_iterator
    export utility.pair
    export span
    export *
  } // module ranges

  module ratio {
    header "ratio"
    export *
  }

  module regex {
    header "regex"
    export *
  }

  module scoped_allocator {
    header "scoped_allocator"
    export *
  }

  module semaphore {
    header "semaphore"
    export *
  }

  module set {
    header "set"
    export *
  }

  module shared_mutex {
    header "shared_mutex"
    export std_version
  }

  module source_location {
    header "source_location"
    export *
  }

  module span {
    header "span"
    header "__fwd/span.h"
    export *
  }

  module sstream {
    header "sstream"
    header "__fwd/sstream.h"
    export *
  }

  module stack {
    header "stack"
    header "__fwd/stack.h"
    export *
  }

  module stdexcept {
    header "stdexcept"
    export *
  }

  module stop_token {
    header "stop_token"
    header "__stop_token/atomic_unique_lock.h"
    header "__stop_token/intrusive_list_view.h"
    header "__stop_token/intrusive_shared_ptr.h"
    header "__stop_token/stop_callback.h"
    header "__stop_token/stop_source.h"
    header "__stop_token/stop_state.h"
    header "__stop_token/stop_token.h"
    export *
  }

  module streambuf {
    header "streambuf"
    header "__fwd/streambuf.h"
    export *
  }

  module string {
    header "string"
    header "__fwd/string.h"
    header "__string/char_traits.h"
    header "__string/constexpr_c_functions.h"
    header "__string/extern_template_lists.h"
    export *
  }

  module string_view {
    header "string_view"
    header "__fwd/string_view.h"
    export *
  }

  module strstream {
    header "strstream"
    export *
  }

  module syncstream {
    header "syncstream"
    export *
  }

  module system_error {
    header "system_error"
    header "__system_error/errc.h"
    header "__system_error/error_category.h"
    header "__system_error/error_code.h"
    header "__system_error/error_condition.h"
    header "__system_error/system_error.h"

    export functional.hash
    export *
  }

  module thread {
    header "thread"
    header "__thread/formatter.h"
    header "__thread/id.h"
    header "__thread/jthread.h"
    header "__thread/poll_with_backoff.h"
    header "__thread/support.h"
    header "__thread/this_thread.h"
    header "__thread/thread.h"
    header "__thread/timed_backoff_policy.h"
    module support {
      textual header "__thread/support/c11.h"
      textual header "__thread/support/external.h"
      textual header "__thread/support/pthread.h"
      textual header "__thread/support/windows.h"
    }
    export *
  }

  module tuple {
    header "tuple"
    header "__tuple/find_index.h"
    header "__tuple/ignore.h"
    header "__tuple/make_tuple_types.h"
    header "__tuple/sfinae_helpers.h"
    header "__tuple/tuple_element.h"
    header "__tuple/tuple_indices.h"
    header "__tuple/tuple_like_ext.h"
    header "__tuple/tuple_like_no_subrange.h"
    header "__tuple/tuple_like.h"
    header "__tuple/tuple_size.h"
    header "__tuple/tuple_types.h"
    export *
  }

  module typeindex {
    header "typeindex"
    export *
  }

  module typeinfo {
    header "typeinfo"
    export *
  }

  module unordered_map {
    header "unordered_map"
    export *
  }

  module unordered_set {
    header "unordered_set"
    export *
  }

  module utility {
    header "utility"
    header "__utility/as_const.h"
    header "__utility/as_lvalue.h"
    header "__utility/auto_cast.h"
    header "__utility/cmp.h"
    header "__utility/convert_to_integral.h"
    header "__utility/empty.h"
    header "__utility/exception_guard.h"
    header "__utility/exchange.h"
    header "__utility/forward_like.h"
    header "__utility/in_place.h"
    header "__utility/integer_sequence.h"
    header "__utility/is_pointer_in_range.h"
    header "__utility/is_valid_range.h"
    header "__utility/move.h"
    header "__utility/no_destroy.h"
    header "__utility/pair.h"
    header "__utility/piecewise_construct.h"
    header "__utility/priority_tag.h"
    header "__utility/private_constructor_tag.h"
    header "__utility/rel_ops.h"
    header "__utility/small_buffer.h"
    header "__utility/swap.h"
    header "__utility/to_underlying.h"
    header "__utility/unreachable.h"

    export *
  }

  module valarray {
    header "valarray"
    export *
  }

  module variant {
    header "variant"
    header "__variant/monostate.h"
    export *
  }

  module vector {
    header "vector"
    header "__fwd/vector.h"
    export *
  }

  // Experimental C++ Standard Library interfaces
  module experimental {
    header "experimental/iterator"
    header "experimental/memory"
    header "experimental/propagate_const"
    header "experimental/type_traits"
    header "experimental/utility"
    textual header "experimental/__config"
    module simd {
      private header "experimental/__simd/aligned_tag.h"
      private header "experimental/__simd/declaration.h"
      private header "experimental/__simd/reference.h"
      private header "experimental/__simd/scalar.h"
      private header "experimental/__simd/simd_mask.h"
      private header "experimental/__simd/simd.h"
      private header "experimental/__simd/traits.h"
      private header "experimental/__simd/utility.h"
      private header "experimental/__simd/vec_ext.h"
      header "experimental/simd"
      export *
    }
    export *
  }

  // Implementation detail headers that are private to libc++. These modules
  // must not be directly imported.
  module debug_utils {
    header "__debug_utils/randomize_range.h"
    header "__debug_utils/sanitizers.h"
    header "__debug_utils/strict_weak_ordering_check.h"
    export *
  }

  module pstl {
    header "__pstl/backend.h"
    header "__pstl/backend_fwd.h"
    header "__pstl/backends/default.h"
    header "__pstl/backends/libdispatch.h"
    header "__pstl/backends/serial.h"
    header "__pstl/backends/std_thread.h"
    header "__pstl/cpu_algos/any_of.h"
    header "__pstl/cpu_algos/cpu_traits.h"
    header "__pstl/cpu_algos/fill.h"
    header "__pstl/cpu_algos/find_if.h"
    header "__pstl/cpu_algos/for_each.h"
    header "__pstl/cpu_algos/merge.h"
    header "__pstl/cpu_algos/stable_sort.h"
    header "__pstl/cpu_algos/transform.h"
    header "__pstl/cpu_algos/transform_reduce.h"
    header "__pstl/dispatch.h"
    header "__pstl/handle_exception.h"
    export *
  }

  module miscellaneous {
    header "__bit_reference"
    header "__fwd/bit_reference.h"
    header "__hash_table"
    header "__node_handle"
    header "__split_buffer"
    header "__std_mbstate_t.h"
    header "__tree"
    header "__verbose_abort"
    export *
  }

  module internal_assert {
    header "__assert"
    export *
  }

  module undef_macros {
    textual header "__undef_macros"
  }

  // This module needs to appear after __tree to work around issues with modules in Objective-C++ mode.
  module coroutine {
    header "coroutine"
    header "__coroutine/coroutine_handle.h"
    header "__coroutine/coroutine_traits.h"
    header "__coroutine/noop_coroutine_handle.h"
    header "__coroutine/trivial_awaitables.h"
    export *
  }
} // module std

// C compatibility headers
//
// These modules need to be their own top-level modules because they depend on the system-provided
// headers (via include_next), which are then free to include other C headers provided by libc++.
// If we group these headers in a single module, we would end up with circular dependencies.
module std_complex_h [system] {
  header "complex.h"
  export *
}
module std_ctype_h [system] {
  header "ctype.h"
  export *
}
module std_errno_h [system] {
  header "errno.h"
  export *
}
module std_fenv_h [system] {
  header "fenv.h"
  export *
}
module std_float_h [system] {
  header "float.h"
  export *
}
module std_inttypes_h [system] {
  header "inttypes.h"
  export *
}
module std_locale_h [system] {
  header "locale.h"
  export *
}
module std_math_h [system] {
  header "math.h"
  export *
}
module std_stdatomic_h [system] {
  header "stdatomic.h"
  export *
}
module std_stdbool_h [system] {
  // <stdbool.h>'s __bool_true_false_are_defined macro requires textual inclusion.
  textual header "stdbool.h"
  export *
}
module std_stddef_h [system] {
  // <stddef.h>'s __need_* macros require textual inclusion.
  textual header "stddef.h"
  export *
}
module std_stdint_h [system] {
  header "stdint.h"
  export *
}
module std_stdio_h [system] {
  // <stdio.h>'s __need_* macros require textual inclusion.
  textual header "stdio.h"
  export *
}
module std_stdlib_h [system] {
  // <stdlib.h>'s __need_* macros require textual inclusion.
  textual header "stdlib.h"
  export *
}
module std_string_h [system] {
  header "string.h"
  export *
}
module std_tgmath_h [system] {
  header "tgmath.h"
  export *
}
module std_uchar_h [system] {
  header "uchar.h"
  export *
}
module std_wchar_h [system] {
  // <wchar.h>'s __need_* macros require textual inclusion.
  textual header "wchar.h"
  export *
}
module std_wctype_h [system] {
  header "wctype.h"
  export *
}

// This header is used by other C compatibility headers so it needs to be in its own module.
module std_private_mbstate_t [system] {
  header "__mbstate_t.h"
  export *
}

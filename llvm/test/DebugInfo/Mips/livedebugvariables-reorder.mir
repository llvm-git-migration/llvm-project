# RUN: llc -emit-call-site-info %s -mtriple=mips -start-before=register-coalescer -stop-after=virtregrewriter -o - | FileCheck %s

# FIXME: LiveDebugVariables should not reorder the stack location DBG_VALUE and
# the fragmented DBG_VALUEs for aaa, as the latter may represent a stale value.
# It should also not reorder the DBG_VALUEs for the different variables, as
# that results in noise in pass before/after diffs.

# CHECK-DAG: ![[aaa:[0-9]+]] = !DILocalVariable(name: "aaa"
# CHECK-DAG: ![[bbb:[0-9]+]] = !DILocalVariable(name: "bbb"
# CHECK-DAG: ![[ccc:[0-9]+]] = !DILocalVariable(name: "ccc"
# CHECK-DAG: ![[ddd:[0-9]+]] = !DILocalVariable(name: "ddd"

# CHECK: DBG_VALUE %stack.0, 0, ![[aaa]], !DIExpression()
# CHECK-NEXT: DBG_VALUE 444, $noreg, ![[ddd]], !DIExpression()
# CHECK-NEXT: DBG_VALUE 333, $noreg, ![[ccc]], !DIExpression()
# CHECK-NEXT: DBG_VALUE 222, $noreg, ![[bbb]], !DIExpression()
# CHECK-NEXT: DBG_VALUE 1002, $noreg, ![[aaa]], !DIExpression(DW_OP_LLVM_fragment, 16, 16)
# CHECK-NEXT: DBG_VALUE 1001, $noreg, ![[aaa]], !DIExpression(DW_OP_LLVM_fragment, 0, 16)

--- |
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"

  ; Function Attrs: nounwind
  define dso_local i32 @main() local_unnamed_addr #0 !dbg !8 {
  entry:
    ret i32 0, !dbg !21
  }

  declare !dbg !22 dso_local i32 @foo() local_unnamed_addr

  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare void @llvm.dbg.value(metadata, metadata, metadata) #1

  attributes #0 = { nounwind "frame-pointer"="all" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6}
  !llvm.ident = !{!7}

  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 19.0.0git", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "main.c", directory: "/", checksumkind: CSK_MD5, checksum: "9edfcd32ce51b21ab508a4a0755aa78b")
  !2 = !{i32 7, !"Dwarf Version", i32 5}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = !{i32 1, !"wchar_size", i32 4}
  !5 = !{i32 7, !"frame-pointer", i32 2}
  !6 = !{i32 7, !"debug-info-assignment-tracking", i1 true}
  !7 = !{!"clang version 19.0.0git"}
  !8 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 12, type: !9, scopeLine: 12, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
  !9 = !DISubroutineType(types: !10)
  !10 = !{!11}
  !11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !12 = !{!13, !14, !15, !16}
  !13 = !DILocalVariable(name: "aaa", scope: !8, file: !1, line: 13, type: !11)
  !14 = !DILocalVariable(name: "bbb", scope: !8, file: !1, line: 14, type: !11)
  !15 = !DILocalVariable(name: "ccc", scope: !8, file: !1, line: 15, type: !11)
  !16 = !DILocalVariable(name: "ddd", scope: !8, file: !1, line: 16, type: !11)
  !17 = !DILocation(line: 13, scope: !8)
  !18 = !DILocation(line: 0, scope: !8)
  !19 = !DILocation(line: 17, scope: !8)
  !20 = !{i64 2147496201}
  !21 = !DILocation(line: 18, scope: !8)
  !22 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 1, type: !9, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized)

...
---
name:            main
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: gpr32 }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
callSites:
  - { bb: 0, offset: 1 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ADJCALLSTACKDOWN 16, 0, implicit-def dead $sp, implicit $sp, debug-location !17
    JAL @foo, csr_o32_fpxx, implicit-def dead $ra, implicit-def $sp, implicit-def $v0, debug-location !17
    ADJCALLSTACKUP 16, 0, implicit-def dead $sp, implicit $sp, debug-location !17
    %0:gpr32 = COPY killed $v0, debug-location !17
    DBG_VALUE 1001, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 0, 16), debug-location !18
    DBG_VALUE 1002, $noreg, !13, !DIExpression(DW_OP_LLVM_fragment, 16, 16), debug-location !18
    DBG_VALUE 222, $noreg, !14, !DIExpression(), debug-location !18
    DBG_VALUE 333, $noreg, !15, !DIExpression(), debug-location !18
    DBG_VALUE 444, $noreg, !16, !DIExpression(), debug-location !18
    DBG_VALUE %0, $noreg, !13, !DIExpression(), debug-location !18
    INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $v0, 12 /* clobber */, implicit-def dead early-clobber $v1, 12 /* clobber */, implicit-def dead early-clobber $a0, 12 /* clobber */, implicit-def dead early-clobber $a1, 12 /* clobber */, implicit-def dead early-clobber $a2, 12 /* clobber */, implicit-def dead early-clobber $a3, 12 /* clobber */, implicit-def dead early-clobber $t0, 12 /* clobber */, implicit-def dead early-clobber $t1, 12 /* clobber */, implicit-def dead early-clobber $t2, 12 /* clobber */, implicit-def dead early-clobber $t3, 12 /* clobber */, implicit-def dead early-clobber $t4, 12 /* clobber */, implicit-def dead early-clobber $t5, 12 /* clobber */, implicit-def dead early-clobber $t6, 12 /* clobber */, implicit-def dead early-clobber $t7, 12 /* clobber */, implicit-def dead early-clobber $t8, 12 /* clobber */, implicit-def dead early-clobber $t9, 12 /* clobber */, implicit-def dead early-clobber $gp, 12 /* clobber */, implicit-def dead early-clobber $ra, 12 /* clobber */, implicit-def dead early-clobber $s0, 12 /* clobber */, implicit-def dead early-clobber $s1, 12 /* clobber */, implicit-def dead early-clobber $s2, 12 /* clobber */, implicit-def dead early-clobber $s3, 12 /* clobber */, implicit-def dead early-clobber $s4, 12 /* clobber */, implicit-def dead early-clobber $s5, 12 /* clobber */, implicit-def dead early-clobber $s6, 12 /* clobber */, implicit-def dead early-clobber $s7, 12 /* clobber */, implicit-def dead early-clobber $at, !20, debug-location !19
    $v0 = COPY killed %0, debug-location !21
    RetRA implicit killed $v0, debug-location !21

...

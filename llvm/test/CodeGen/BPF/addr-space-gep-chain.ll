; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt --bpf-check-and-opt-ir -S -mtriple=bpf-pc-linux < %s | FileCheck %s

define dso_local void @test(ptr addrspace(1) noundef %p) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local void @test(
; CHECK-SAME: ptr addrspace(1) noundef [[P:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[P1:%.*]] = call ptr addrspace(1) @llvm.bpf.addr.space.p1.p1(ptr addrspace(1) [[P]], i32 1)
; CHECK-NEXT:    [[A2:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[P1]], i64 8
; CHECK-NEXT:    [[B3:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[A2]], i64 16
; CHECK-NEXT:    [[C4:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[B3]], i64 24
; CHECK-NEXT:    [[D5:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[C4]], i64 32
; CHECK-NEXT:    store i64 11, ptr addrspace(1) [[C4]], align 8
; CHECK-NEXT:    store i64 22, ptr addrspace(1) [[D5]], align 8
; CHECK-NEXT:    ret void
;
entry:
  %a = getelementptr inbounds i8, ptr addrspace(1) %p, i64 8
  %b = getelementptr inbounds i8, ptr addrspace(1) %a, i64 16
  %c = getelementptr inbounds i8, ptr addrspace(1) %b, i64 24
  %d = getelementptr inbounds i8, ptr addrspace(1) %c, i64 32
  store i64 11, ptr addrspace(1) %c, align 8
  store i64 22, ptr addrspace(1) %d, align 8
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{!"some clan version"}

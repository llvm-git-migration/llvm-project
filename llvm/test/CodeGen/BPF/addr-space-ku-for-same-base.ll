; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt --bpf-check-and-opt-ir -S -mtriple=bpf-pc-linux < %s | FileCheck %s

; Generated from the following C code:
;
;   #define __uptr __attribute__((address_space(272)))
;
;   struct htab;
;   void __uptr *htab_for_user;
;   extern void __uptr* bpf_alloc(void);
;   void test(void) {
;     long __uptr* p = bpf_alloc();
;     p[2] = 2;
;     htab_for_user = &p[2];
;   }
;
; Using the following command:
;
;   clang --target=bpf -O2 -S -emit-llvm -o t.ll t.c

@htab_for_user = dso_local local_unnamed_addr global ptr addrspace(1) null, align 8

; Function Attrs: nounwind
define dso_local void @test() local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local void @test
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = tail call ptr addrspace(1) @bpf_alloc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(1) @llvm.bpf.addr.space.p1.p1(ptr addrspace(1) [[CALL]], i32 2)
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(1) @llvm.bpf.addr.space.p1.p1(ptr addrspace(1) [[CALL]], i32 1)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i64, ptr addrspace(1) [[TMP0]], i64 2
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i64, ptr addrspace(1) [[TMP1]], i64 2
; CHECK-NEXT:    store i64 2, ptr addrspace(1) [[TMP3]], align 8
; CHECK-NEXT:    store ptr addrspace(1) [[TMP2]], ptr @htab_for_user, align 8
; CHECK-NEXT:    ret void
;
entry:
  %call = tail call ptr addrspace(1) @bpf_alloc() #2
  %arrayidx = getelementptr inbounds i64, ptr addrspace(1) %call, i64 2
  store i64 2, ptr addrspace(1) %arrayidx, align 8, !tbaa !3
  store ptr addrspace(1) %arrayidx, ptr @htab_for_user, align 8, !tbaa !7
  ret void
}

declare dso_local ptr addrspace(1) @bpf_alloc() local_unnamed_addr #1

attributes #0 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{!"some clang version"}
!3 = !{!4, !4, i64 0}
!4 = !{!"long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=riscv32 -mattr=+zfa -global-isel < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK-ZFA-f32
; RUN: llc -mtriple=riscv64 -mattr=+zfa -global-isel < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK-ZFA-f32
; RUN: llc -mtriple=riscv32 -mattr=+f -global-isel < %s \
; RUN: | FileCheck %s --check-prefix=CHECK-ZFA-libcall


define float @fceil(float %a) {
; CHECK-ZFA-f32-LABEL: fceil:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    fround.s fa0, fa0, rup
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: fceil:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call ceilf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.ceil.f32(float %a)
  ret float %b
}

define float @ffloor(float %a) {
; CHECK-ZFA-f32-LABEL: ffloor:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    fround.s fa0, fa0, rdn
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: ffloor:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call floorf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.floor.f32(float %a)
  ret float %b
}

define float @frint(float %a) {
; CHECK-ZFA-f32-LABEL: frint:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    froundnx.s fa0, fa0
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: frint:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call rintf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.rint.f32(float %a)
  ret float %b
}

define float @fnearbyint(float %a) {
; CHECK-ZFA-f32-LABEL: fnearbyint:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    fround.s fa0, fa0
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: fnearbyint:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call nearbyintf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.nearbyint.f32(float %a)
  ret float %b
}

define float @fround(float %a) {
; CHECK-ZFA-f32-LABEL: fround:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    fround.s fa0, fa0, rmm
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: fround:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call roundf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.round.f32(float %a)
  ret float %b
}


define float @froundeven(float %a) {
; CHECK-ZFA-f32-LABEL: froundeven:
; CHECK-ZFA-f32:       # %bb.0:
; CHECK-ZFA-f32-NEXT:    fround.s fa0, fa0, rne
; CHECK-ZFA-f32-NEXT:    ret
;
; CHECK-ZFA-libcall-LABEL: froundeven:
; CHECK-ZFA-libcall:       # %bb.0:
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, -16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 16
; CHECK-ZFA-libcall-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; CHECK-ZFA-libcall-NEXT:    .cfi_offset ra, -4
; CHECK-ZFA-libcall-NEXT:    call roundevenf
; CHECK-ZFA-libcall-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; CHECK-ZFA-libcall-NEXT:    .cfi_restore ra
; CHECK-ZFA-libcall-NEXT:    addi sp, sp, 16
; CHECK-ZFA-libcall-NEXT:    .cfi_def_cfa_offset 0
; CHECK-ZFA-libcall-NEXT:    ret
  %b = call float @llvm.roundeven.f32(float %a)
  ret float %b
}

; TODO fix these tests for libcall
;;define float @fmaximum(float %a, float %b) {
;; CHECK-ZFA-f32-LABEL: fmaximum:
;; CHECK-ZFA-f32:     # %bb.0:
;; CHECK-ZFA-f32-NEXT:  fmaxm.s fa0, fa0, fa1
;; CHECK-ZFA-f32-NEXT:  ret
;  %c = call float @llvm.maximum.f32(float %a, float %b)
;  ret float %c
;}
;
;define float @fminimum(float %a, float %b) {
;; CHECK-ZFA-f32-LABEL: fminimum:
;; CHECK-ZFA-f32:     # %bb.0:
;; CHECK-ZFA-f32-NEXT:  fminm.s fa0, fa0, fa1
;; CHECK-ZFA-f32-NEXT:  ret
;  %c = call float @llvm.minimum.f32(float %a, float %b)
;  ret float %c
;}

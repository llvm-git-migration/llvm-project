# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: sed 's/XLen/32/g' %s | llc -mtriple=riscv32 -mattr=+d,+zfh -run-pass=regbankselect \
# RUN:   -disable-gisel-legality-check -simplify-mir -verify-machineinstrs  -x mir \
# RUN:   -o - | FileCheck %s --check-prefixes=CHECK-RV32
# RUN: sed 's/XLen/64/g' %s | llc -mtriple=riscv64 -mattr=+d,+zfh -run-pass=regbankselect \
# RUN:   -disable-gisel-legality-check -simplify-mir -verify-machineinstrs -x mir \
# RUN:   -o - | FileCheck %s --check-prefixes=CHECK-RV64

---
name:            fp_store_fp_def_f32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_f, $f11_f

    ; CHECK-RV32-LABEL: name: fp_store_fp_def_f32
    ; CHECK-RV32: liveins: $x10, $f10_f, $f11_f
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s32) = COPY $f10_f
    ; CHECK-RV32-NEXT: [[COPY2:%[0-9]+]]:fprb(s32) = COPY $f11_f
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s32) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV32-NEXT: G_STORE [[FADD]](s32), [[COPY]](p0) :: (store (s32))
    ; CHECK-RV32-NEXT: PseudoRET
    ;
    ; CHECK-RV64-LABEL: name: fp_store_fp_def_f32
    ; CHECK-RV64: liveins: $x10, $f10_f, $f11_f
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s32) = COPY $f10_f
    ; CHECK-RV64-NEXT: [[COPY2:%[0-9]+]]:fprb(s32) = COPY $f11_f
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s32) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV64-NEXT: G_STORE [[FADD]](s32), [[COPY]](p0) :: (store (s32))
    ; CHECK-RV64-NEXT: PseudoRET
    %0:_(p0) = COPY $x10
    %1:_(s32) = COPY $f10_f
    %2:_(s32) = COPY $f11_f
    %3:_(s32) = G_FADD %1, %2
    G_STORE %3(s32), %0(p0) :: (store (s32))
    PseudoRET

...
---
name:            fp_store_fp_def_f64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_d, $f11_d

    ; CHECK-RV32-LABEL: name: fp_store_fp_def_f64
    ; CHECK-RV32: liveins: $x10, $f10_d, $f11_d
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV32-NEXT: [[COPY2:%[0-9]+]]:fprb(s64) = COPY $f11_d
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s64) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV32-NEXT: G_STORE [[FADD]](s64), [[COPY]](p0) :: (store (s64))
    ; CHECK-RV32-NEXT: PseudoRET
    ;
    ; CHECK-RV64-LABEL: name: fp_store_fp_def_f64
    ; CHECK-RV64: liveins: $x10, $f10_d, $f11_d
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV64-NEXT: [[COPY2:%[0-9]+]]:fprb(s64) = COPY $f11_d
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s64) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV64-NEXT: G_STORE [[FADD]](s64), [[COPY]](p0) :: (store (s64))
    ; CHECK-RV64-NEXT: PseudoRET
    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $f10_d
    %2:_(s64) = COPY $f11_d
    %3:_(s64) = G_FADD %1, %2
    G_STORE %3(s64), %0(p0) :: (store (s64))
    PseudoRET

...
---
name:            fp_store_no_def_f64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_d

    ; CHECK-RV32-LABEL: name: fp_store_no_def_f64
    ; CHECK-RV32: liveins: $x10, $f10_d
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV32-NEXT: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store (s64))
    ; CHECK-RV32-NEXT: PseudoRET
    ;
    ; CHECK-RV64-LABEL: name: fp_store_no_def_f64
    ; CHECK-RV64: liveins: $x10, $f10_d
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV64-NEXT: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store (s64))
    ; CHECK-RV64-NEXT: PseudoRET
    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $f10_d
    G_STORE %1(s64), %0(p0) :: (store (s64))
    PseudoRET

...
---
name:            fp_load_fp_use_f32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_f

    ; CHECK-RV32-LABEL: name: fp_load_fp_use_f32
    ; CHECK-RV32: liveins: $x10, $f10_f
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s32) = COPY $f10_f
    ; CHECK-RV32-NEXT: [[LOAD:%[0-9]+]]:fprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s32) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV32-NEXT: $f10_f = COPY [[FADD]](s32)
    ; CHECK-RV32-NEXT: PseudoRET implicit $f10_f
    ;
    ; CHECK-RV64-LABEL: name: fp_load_fp_use_f32
    ; CHECK-RV64: liveins: $x10, $f10_f
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s32) = COPY $f10_f
    ; CHECK-RV64-NEXT: [[LOAD:%[0-9]+]]:fprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s32) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV64-NEXT: $f10_f = COPY [[FADD]](s32)
    ; CHECK-RV64-NEXT: PseudoRET implicit $f10_f
    %0:_(p0) = COPY $x10
    %1:_(s32) = COPY $f10_f
    %2:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %3:_(s32) = G_FADD %2, %1
    $f10_f = COPY %3(s32)
    PseudoRET implicit $f10_f

...
---
name:            fp_load_fp_use_f64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_d

    ; CHECK-RV32-LABEL: name: fp_load_fp_use_f64
    ; CHECK-RV32: liveins: $x10, $f10_d
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV32-NEXT: [[LOAD:%[0-9]+]]:fprb(s64) = G_LOAD [[COPY]](p0) :: (load (s64))
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s64) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV32-NEXT: $f10_d = COPY [[FADD]](s64)
    ; CHECK-RV32-NEXT: PseudoRET implicit $f10_d
    ;
    ; CHECK-RV64-LABEL: name: fp_load_fp_use_f64
    ; CHECK-RV64: liveins: $x10, $f10_d
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV64-NEXT: [[LOAD:%[0-9]+]]:fprb(s64) = G_LOAD [[COPY]](p0) :: (load (s64))
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s64) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV64-NEXT: $f10_d = COPY [[FADD]](s64)
    ; CHECK-RV64-NEXT: PseudoRET implicit $f10_d
    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $f10_d
    %2:_(s64) = G_LOAD %0(p0) :: (load (s64))
    %3:_(s64) = G_FADD %2, %1
    $f10_d = COPY %3(s64)
    PseudoRET implicit $f10_d

...
---
name:            fp_load_no_use_f64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_d

    ; CHECK-RV32-LABEL: name: fp_load_no_use_f64
    ; CHECK-RV32: liveins: $x10, $f10_d
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV32-NEXT: [[LOAD:%[0-9]+]]:fprb(s64) = G_LOAD [[COPY]](p0) :: (load (s64))
    ; CHECK-RV32-NEXT: $f10_d = COPY [[LOAD]](s64)
    ; CHECK-RV32-NEXT: PseudoRET implicit $f10_d
    ;
    ; CHECK-RV64-LABEL: name: fp_load_no_use_f64
    ; CHECK-RV64: liveins: $x10, $f10_d
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s64) = COPY $f10_d
    ; CHECK-RV64-NEXT: [[LOAD:%[0-9]+]]:fprb(s64) = G_LOAD [[COPY]](p0) :: (load (s64))
    ; CHECK-RV64-NEXT: $f10_d = COPY [[LOAD]](s64)
    ; CHECK-RV64-NEXT: PseudoRET implicit $f10_d
    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $f10_d
    %2:_(s64) = G_LOAD %0(p0) :: (load (s64))
    $f10_d = COPY %2(s64)
    PseudoRET implicit $f10_d

...
---
name:            fp_store_fp_def_f16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_h, $f11_h

    ; CHECK-RV32-LABEL: name: fp_store_fp_def_f16
    ; CHECK-RV32: liveins: $x10, $f10_h, $f11_h
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s16) = COPY $f10_h
    ; CHECK-RV32-NEXT: [[COPY2:%[0-9]+]]:fprb(s16) = COPY $f11_h
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s16) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV32-NEXT: G_STORE [[FADD]](s16), [[COPY]](p0) :: (store (s16))
    ; CHECK-RV32-NEXT: PseudoRET
    ;
    ; CHECK-RV64-LABEL: name: fp_store_fp_def_f16
    ; CHECK-RV64: liveins: $x10, $f10_h, $f11_h
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s16) = COPY $f10_h
    ; CHECK-RV64-NEXT: [[COPY2:%[0-9]+]]:fprb(s16) = COPY $f11_h
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s16) = G_FADD [[COPY1]], [[COPY2]]
    ; CHECK-RV64-NEXT: G_STORE [[FADD]](s16), [[COPY]](p0) :: (store (s16))
    ; CHECK-RV64-NEXT: PseudoRET
    %0:_(p0) = COPY $x10
    %1:_(s16) = COPY $f10_h
    %2:_(s16) = COPY $f11_h
    %3:_(s16) = G_FADD %1, %2
    G_STORE %3(s16), %0(p0) :: (store (s16))
    PseudoRET

...
---
name:            fp_load_fp_use_f16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $x10, $f10_h

    ; CHECK-RV32-LABEL: name: fp_load_fp_use_f16
    ; CHECK-RV32: liveins: $x10, $f10_h
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[COPY1:%[0-9]+]]:fprb(s16) = COPY $f10_h
    ; CHECK-RV32-NEXT: [[LOAD:%[0-9]+]]:fprb(s16) = G_LOAD [[COPY]](p0) :: (load (s16))
    ; CHECK-RV32-NEXT: [[FADD:%[0-9]+]]:fprb(s16) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV32-NEXT: $f10_h = COPY [[FADD]](s16)
    ; CHECK-RV32-NEXT: PseudoRET implicit $f10_h
    ;
    ; CHECK-RV64-LABEL: name: fp_load_fp_use_f16
    ; CHECK-RV64: liveins: $x10, $f10_h
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[COPY1:%[0-9]+]]:fprb(s16) = COPY $f10_h
    ; CHECK-RV64-NEXT: [[LOAD:%[0-9]+]]:fprb(s16) = G_LOAD [[COPY]](p0) :: (load (s16))
    ; CHECK-RV64-NEXT: [[FADD:%[0-9]+]]:fprb(s16) = G_FADD [[LOAD]], [[COPY1]]
    ; CHECK-RV64-NEXT: $f10_h = COPY [[FADD]](s16)
    ; CHECK-RV64-NEXT: PseudoRET implicit $f10_h
    %0:_(p0) = COPY $x10
    %1:_(s16) = COPY $f10_h
    %2:_(s16) = G_LOAD %0(p0) :: (load (s16))
    %3:_(s16) = G_FADD %2, %1
    $f10_h = COPY %3(s16)
    PseudoRET implicit $f10_h

...
---
name:            fpclass
legalized:       true
tracksRegLiveness: true
liveins:
  - { reg: '$x10' }
body:             |
  bb.1:
    liveins: $x10

    ; CHECK-RV32-LABEL: name: fpclass
    ; CHECK-RV32: liveins: $x10
    ; CHECK-RV32-NEXT: {{  $}}
    ; CHECK-RV32-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV32-NEXT: [[LOAD:%[0-9]+]]:fprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-RV32-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 927
    ; CHECK-RV32-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-RV32-NEXT: [[FCLASS:%[0-9]+]]:gprb(s32) = G_FCLASS [[LOAD]](s32)
    ; CHECK-RV32-NEXT: [[AND:%[0-9]+]]:gprb(s32) = G_AND [[FCLASS]], [[C]]
    ; CHECK-RV32-NEXT: [[ICMP:%[0-9]+]]:gprb(s32) = G_ICMP intpred(ne), [[AND]](s32), [[C1]]
    ; CHECK-RV32-NEXT: $x10 = COPY [[ICMP]](s32)
    ; CHECK-RV32-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-RV64-LABEL: name: fpclass
    ; CHECK-RV64: liveins: $x10
    ; CHECK-RV64-NEXT: {{  $}}
    ; CHECK-RV64-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $x10
    ; CHECK-RV64-NEXT: [[LOAD:%[0-9]+]]:fprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32))
    ; CHECK-RV64-NEXT: [[C:%[0-9]+]]:gprb(s64) = G_CONSTANT i64 927
    ; CHECK-RV64-NEXT: [[C1:%[0-9]+]]:gprb(s64) = G_CONSTANT i64 0
    ; CHECK-RV64-NEXT: [[FCLASS:%[0-9]+]]:gprb(s64) = G_FCLASS [[LOAD]](s32)
    ; CHECK-RV64-NEXT: [[AND:%[0-9]+]]:gprb(s64) = G_AND [[FCLASS]], [[C]]
    ; CHECK-RV64-NEXT: [[ICMP:%[0-9]+]]:gprb(s64) = G_ICMP intpred(ne), [[AND]](s64), [[C1]]
    ; CHECK-RV64-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-RV64-NEXT: PseudoRET implicit $x10
    %0:_(p0) = COPY $x10
    %1:_(s32) = G_LOAD %0(p0) :: (load (s32))
    %4:_(sXLen) = G_CONSTANT iXLen 927
    %5:_(sXLen) = G_CONSTANT iXLen 0
    %6:_(sXLen) = G_FCLASS %1(s32)
    %7:_(sXLen) = G_AND %6, %4
    %8:_(sXLen) = G_ICMP intpred(ne), %7(sXLen), %5
    $x10 = COPY %8(sXLen)
    PseudoRET implicit $x10

...

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc < %s -mtriple=riscv32 -mattr=+v,+zvfh -verify-machineinstrs | FileCheck %s -check-prefixes=CHECK,RV32
; RUN: llc < %s -mtriple=riscv64 -mattr=+v,+zvfh -verify-machineinstrs | FileCheck %s -check-prefixes=CHECK,RV64

define <vscale x 16 x i1> @match_nxv16i8_v1i8(<vscale x 16 x i8> %op1, <1 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v1i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v12
; CHECK-NEXT:    vmand.mm v0, v10, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <1 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <vscale x 16 x i1> @match_nxv16i8_v2i8(<vscale x 16 x i8> %op1, <2 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v12
; CHECK-NEXT:    vmor.mm v8, v10, v14
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <2 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <vscale x 16 x i1> @match_nxv16i8_v4i8(<vscale x 16 x i8> %op1, <4 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v15, v8, v12
; CHECK-NEXT:    vmor.mm v12, v15, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 2
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 3
; CHECK-NEXT:    vmor.mm v10, v12, v13
; CHECK-NEXT:    vmseq.vv v11, v8, v14
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <4 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <vscale x 16 x i1> @match_nxv16i8_v8i8(<vscale x 16 x i8> %op1, <8 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v15, v8, v12
; CHECK-NEXT:    vmor.mm v12, v15, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 2
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 3
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 4
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 5
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 6
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 7
; CHECK-NEXT:    vmor.mm v10, v12, v13
; CHECK-NEXT:    vmseq.vv v11, v8, v14
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <8 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <vscale x 16 x i1> @match_nxv16i8_v16i8(<vscale x 16 x i8> %op1, <16 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v15, v8, v12
; CHECK-NEXT:    vmor.mm v12, v15, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 2
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 3
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 4
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 5
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 6
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 7
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 8
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 9
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 10
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 11
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 12
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 13
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 14
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 15
; CHECK-NEXT:    vmor.mm v10, v12, v13
; CHECK-NEXT:    vmseq.vv v11, v8, v14
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <16 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <16 x i1> @match_v16i8_v1i8(<16 x i8> %op1, <1 x i8> %op2, <16 x i1> %mask) {
; CHECK-LABEL: match_v16i8_v1i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 0
; CHECK-NEXT:    vmseq.vv v8, v8, v10
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <16 x i1> @llvm.experimental.vector.match(<16 x i8> %op1, <1 x i8> %op2, <16 x i1> %mask)
  ret <16 x i1> %r
}

define <16 x i1> @match_v16i8_v2i8(<16 x i8> %op1, <2 x i8> %op2, <16 x i1> %mask) {
; CHECK-LABEL: match_v16i8_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v9, v8, v10
; CHECK-NEXT:    vmseq.vv v8, v8, v11
; CHECK-NEXT:    vmor.mm v8, v8, v9
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <16 x i1> @llvm.experimental.vector.match(<16 x i8> %op1, <2 x i8> %op2, <16 x i1> %mask)
  ret <16 x i1> %r
}

define <16 x i1> @match_v16i8_v4i8(<16 x i8> %op1, <4 x i8> %op2, <16 x i1> %mask) {
; CHECK-LABEL: match_v16i8_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vrgather.vi v12, v9, 3
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <16 x i1> @llvm.experimental.vector.match(<16 x i8> %op1, <4 x i8> %op2, <16 x i1> %mask)
  ret <16 x i1> %r
}

define <16 x i1> @match_v16i8_v8i8(<16 x i8> %op1, <8 x i8> %op2, <16 x i1> %mask) {
; CHECK-LABEL: match_v16i8_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 3
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 4
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 5
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 6
; CHECK-NEXT:    vrgather.vi v12, v9, 7
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <16 x i1> @llvm.experimental.vector.match(<16 x i8> %op1, <8 x i8> %op2, <16 x i1> %mask)
  ret <16 x i1> %r
}

define <16 x i1> @match_v16i8_v16i8(<16 x i8> %op1, <16 x i8> %op2, <16 x i1> %mask) {
; CHECK-LABEL: match_v16i8_v16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 3
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 4
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 5
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 6
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 7
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 8
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 9
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 11
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 12
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 13
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 14
; CHECK-NEXT:    vrgather.vi v12, v9, 15
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <16 x i1> @llvm.experimental.vector.match(<16 x i8> %op1, <16 x i8> %op2, <16 x i1> %mask)
  ret <16 x i1> %r
}

define <8 x i1> @match_v8i8_v8i8(<8 x i8> %op1, <8 x i8> %op2, <8 x i1> %mask) {
; CHECK-LABEL: match_v8i8_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 3
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 4
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 5
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 6
; CHECK-NEXT:    vrgather.vi v12, v9, 7
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <8 x i1> @llvm.experimental.vector.match(<8 x i8> %op1, <8 x i8> %op2, <8 x i1> %mask)
  ret <8 x i1> %r
}

define <vscale x 8 x i1> @match_nxv8i16_v8i16(<vscale x 8 x i16> %op1, <8 x i16> %op2, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: match_nxv8i16_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v15, v8, v12
; CHECK-NEXT:    vmor.mm v12, v15, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 2
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 3
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 4
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 5
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vmor.mm v12, v12, v13
; CHECK-NEXT:    vrgather.vi v14, v10, 6
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 7
; CHECK-NEXT:    vmor.mm v10, v12, v13
; CHECK-NEXT:    vmseq.vv v11, v8, v14
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 8 x i1> @llvm.experimental.vector.match(<vscale x 8 x i16> %op1, <8 x i16> %op2, <vscale x 8 x i1> %mask)
  ret <vscale x 8 x i1> %r
}

define <8 x i1> @match_v8i16(<8 x i16> %op1, <8 x i16> %op2, <8 x i1> %mask) {
; CHECK-LABEL: match_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 3
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 4
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 5
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 6
; CHECK-NEXT:    vrgather.vi v12, v9, 7
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <8 x i1> @llvm.experimental.vector.match(<8 x i16> %op1, <8 x i16> %op2, <8 x i1> %mask)
  ret <8 x i1> %r
}


define <8 x i1> @match_v8i8_v16i8(<8 x i8> %op1, <16 x i8> %op2, <8 x i1> %mask) {
; CHECK-LABEL: match_v8i8_v16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 3
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 4
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 5
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 6
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 7
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 8
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 9
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 11
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 12
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 13
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v10, v11
; CHECK-NEXT:    vrgather.vi v11, v9, 14
; CHECK-NEXT:    vrgather.vi v12, v9, 15
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <8 x i1> @llvm.experimental.vector.match(<8 x i8> %op1, <16 x i8> %op2, <8 x i1> %mask)
  ret <8 x i1> %r
}

define <vscale x 16 x i1> @match_nxv16i8_v32i8(<vscale x 16 x i8> %op1, <32 x i8> %op2, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: match_nxv16i8_v32i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    mv a1, a0
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add a0, a0, a1
; CHECK-NEXT:    sub sp, sp, a0
; CHECK-NEXT:    .cfi_escape 0x0f, 0x0d, 0x72, 0x00, 0x11, 0x10, 0x22, 0x11, 0x06, 0x92, 0xa2, 0x38, 0x00, 0x1e, 0x22 # sp + 16 + 6 * vlenb
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a1, a0, 2
; CHECK-NEXT:    add a0, a1, a0
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vs1r.v v0, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v18, v10, 1
; CHECK-NEXT:    vrgather.vi v14, v10, 0
; CHECK-NEXT:    vrgather.vi v20, v10, 2
; CHECK-NEXT:    vrgather.vi v16, v10, 3
; CHECK-NEXT:    vrgather.vi v24, v10, 4
; CHECK-NEXT:    vrgather.vi v22, v10, 5
; CHECK-NEXT:    vrgather.vi v28, v10, 6
; CHECK-NEXT:    vrgather.vi v26, v10, 7
; CHECK-NEXT:    vrgather.vi v6, v10, 8
; CHECK-NEXT:    vrgather.vi v30, v10, 9
; CHECK-NEXT:    vrgather.vi v2, v10, 10
; CHECK-NEXT:    vrgather.vi v4, v10, 11
; CHECK-NEXT:    vrgather.vi v12, v10, 12
; CHECK-NEXT:    vmseq.vv v1, v8, v18
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 2
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vs1r.v v1, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vrgather.vi v18, v10, 13
; CHECK-NEXT:    vmseq.vv v1, v8, v14
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a1, a0, 1
; CHECK-NEXT:    add a0, a1, a0
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vs1r.v v1, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vmseq.vv v14, v8, v20
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vs1r.v v14, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vrgather.vi v20, v10, 14
; CHECK-NEXT:    vmseq.vv v14, v8, v16
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vs1r.v v14, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vmseq.vv v14, v8, v24
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vs1r.v v14, (a0) # Unknown-size Folded Spill
; CHECK-NEXT:    vrgather.vi v24, v10, 15
; CHECK-NEXT:    vmseq.vv v1, v8, v22
; CHECK-NEXT:    vmseq.vv v0, v8, v28
; CHECK-NEXT:    vrgather.vi v28, v10, 16
; CHECK-NEXT:    vmseq.vv v23, v8, v26
; CHECK-NEXT:    vmseq.vv v26, v8, v6
; CHECK-NEXT:    vrgather.vi v6, v10, 17
; CHECK-NEXT:    vmseq.vv v27, v8, v30
; CHECK-NEXT:    vmseq.vv v30, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 18
; CHECK-NEXT:    vmseq.vv v31, v8, v4
; CHECK-NEXT:    vmseq.vv v5, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 19
; CHECK-NEXT:    vmseq.vv v4, v8, v18
; CHECK-NEXT:    vmseq.vv v22, v8, v20
; CHECK-NEXT:    vrgather.vi v20, v10, 20
; CHECK-NEXT:    vmseq.vv v19, v8, v24
; CHECK-NEXT:    vmseq.vv v24, v8, v28
; CHECK-NEXT:    vrgather.vi v28, v10, 21
; CHECK-NEXT:    vmseq.vv v25, v8, v6
; CHECK-NEXT:    vmseq.vv v7, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 22
; CHECK-NEXT:    vmseq.vv v6, v8, v12
; CHECK-NEXT:    vmseq.vv v18, v8, v20
; CHECK-NEXT:    vrgather.vi v20, v10, 23
; CHECK-NEXT:    vmseq.vv v17, v8, v28
; CHECK-NEXT:    vmseq.vv v28, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 24
; CHECK-NEXT:    vmseq.vv v29, v8, v20
; CHECK-NEXT:    vmseq.vv v20, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 25
; CHECK-NEXT:    vmseq.vv v21, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 26
; CHECK-NEXT:    vmseq.vv v16, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 27
; CHECK-NEXT:    vmseq.vv v15, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 28
; CHECK-NEXT:    vmseq.vv v14, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 29
; CHECK-NEXT:    vmseq.vv v13, v8, v2
; CHECK-NEXT:    vrgather.vi v2, v10, 30
; CHECK-NEXT:    vmseq.vv v12, v8, v2
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 2
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vl1r.v v3, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a1, a0, 1
; CHECK-NEXT:    add a0, a1, a0
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vl1r.v v2, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    vmor.mm v3, v2, v3
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vl1r.v v2, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    vmor.mm v3, v3, v2
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vl1r.v v2, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    vmor.mm v3, v3, v2
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vl1r.v v2, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    vmor.mm v3, v3, v2
; CHECK-NEXT:    vmor.mm v3, v3, v1
; CHECK-NEXT:    vmor.mm v3, v3, v0
; CHECK-NEXT:    vmor.mm v23, v3, v23
; CHECK-NEXT:    vmor.mm v23, v23, v26
; CHECK-NEXT:    vmor.mm v23, v23, v27
; CHECK-NEXT:    vmor.mm v23, v23, v30
; CHECK-NEXT:    vmor.mm v23, v23, v31
; CHECK-NEXT:    vmor.mm v23, v23, v5
; CHECK-NEXT:    vmor.mm v23, v23, v4
; CHECK-NEXT:    vmor.mm v22, v23, v22
; CHECK-NEXT:    vmor.mm v19, v22, v19
; CHECK-NEXT:    vmor.mm v19, v19, v24
; CHECK-NEXT:    vmor.mm v19, v19, v25
; CHECK-NEXT:    vmor.mm v19, v19, v7
; CHECK-NEXT:    vmor.mm v19, v19, v6
; CHECK-NEXT:    vmor.mm v18, v19, v18
; CHECK-NEXT:    vmor.mm v17, v18, v17
; CHECK-NEXT:    vmor.mm v17, v17, v28
; CHECK-NEXT:    vmor.mm v17, v17, v29
; CHECK-NEXT:    vmor.mm v17, v17, v20
; CHECK-NEXT:    vmor.mm v17, v17, v21
; CHECK-NEXT:    vmor.mm v16, v17, v16
; CHECK-NEXT:    vmor.mm v15, v16, v15
; CHECK-NEXT:    vmor.mm v14, v15, v14
; CHECK-NEXT:    vrgather.vi v16, v10, 31
; CHECK-NEXT:    vmor.mm v10, v14, v13
; CHECK-NEXT:    vmor.mm v10, v10, v12
; CHECK-NEXT:    vmseq.vv v11, v8, v16
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a1, a0, 2
; CHECK-NEXT:    add a0, a1, a0
; CHECK-NEXT:    add a0, sp, a0
; CHECK-NEXT:    addi a0, a0, 16
; CHECK-NEXT:    vl1r.v v9, (a0) # Unknown-size Folded Reload
; CHECK-NEXT:    vmand.mm v0, v8, v9
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    mv a1, a0
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add a0, a0, a1
; CHECK-NEXT:    add sp, sp, a0
; CHECK-NEXT:    .cfi_def_cfa sp, 16
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    .cfi_def_cfa_offset 0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 16 x i1> @llvm.experimental.vector.match(<vscale x 16 x i8> %op1, <32 x i8> %op2, <vscale x 16 x i1> %mask)
  ret <vscale x 16 x i1> %r
}

define <vscale x 4 x i1> @match_nxv4xi32_v4i32(<vscale x 4 x i32> %op1, <4 x i32> %op2, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: match_nxv4xi32_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v15, v8, v12
; CHECK-NEXT:    vmor.mm v12, v15, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 2
; CHECK-NEXT:    vmseq.vv v13, v8, v14
; CHECK-NEXT:    vrgather.vi v14, v10, 3
; CHECK-NEXT:    vmor.mm v10, v12, v13
; CHECK-NEXT:    vmseq.vv v11, v8, v14
; CHECK-NEXT:    vmor.mm v8, v10, v11
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 4 x i1> @llvm.experimental.vector.match(<vscale x 4 x i32> %op1, <4 x i32> %op2, <vscale x 4 x i1> %mask)
  ret <vscale x 4 x i1> %r
}

define <vscale x 2 x i1> @match_nxv2xi64_v2i64(<vscale x 2 x i64> %op1, <2 x i64> %op2, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: match_nxv2xi64_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; CHECK-NEXT:    vrgather.vi v12, v10, 1
; CHECK-NEXT:    vmseq.vv v14, v8, v12
; CHECK-NEXT:    vrgather.vi v12, v10, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v12
; CHECK-NEXT:    vmor.mm v8, v10, v14
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <vscale x 2 x i1> @llvm.experimental.vector.match(<vscale x 2 x i64> %op1, <2 x i64> %op2, <vscale x 2 x i1> %mask)
  ret <vscale x 2 x i1> %r
}

define <4 x i1> @match_v4xi32_v4i32(<4 x i32> %op1, <4 x i32> %op2, <4 x i1> %mask) {
; CHECK-LABEL: match_v4xi32_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v10, v8, v10
; CHECK-NEXT:    vmseq.vv v11, v8, v11
; CHECK-NEXT:    vmor.mm v10, v11, v10
; CHECK-NEXT:    vrgather.vi v11, v9, 2
; CHECK-NEXT:    vrgather.vi v12, v9, 3
; CHECK-NEXT:    vmseq.vv v9, v8, v11
; CHECK-NEXT:    vmor.mm v9, v10, v9
; CHECK-NEXT:    vmseq.vv v8, v8, v12
; CHECK-NEXT:    vmor.mm v8, v9, v8
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <4 x i1> @llvm.experimental.vector.match(<4 x i32> %op1, <4 x i32> %op2, <4 x i1> %mask)
  ret <4 x i1> %r
}

define <2 x i1> @match_v2xi64_v2i64(<2 x i64> %op1, <2 x i64> %op2, <2 x i1> %mask) {
; CHECK-LABEL: match_v2xi64_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; CHECK-NEXT:    vrgather.vi v10, v9, 1
; CHECK-NEXT:    vrgather.vi v11, v9, 0
; CHECK-NEXT:    vmseq.vv v9, v8, v10
; CHECK-NEXT:    vmseq.vv v8, v8, v11
; CHECK-NEXT:    vmor.mm v8, v8, v9
; CHECK-NEXT:    vmand.mm v0, v8, v0
; CHECK-NEXT:    ret
  %r = tail call <2 x i1> @llvm.experimental.vector.match(<2 x i64> %op1, <2 x i64> %op2, <2 x i1> %mask)
  ret <2 x i1> %r
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; RV32: {{.*}}
; RV64: {{.*}}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=riscv32 -mattr=+v -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=riscv64 -mattr=+v -verify-machineinstrs | FileCheck %s

define i1 @reduce_and_i1(<1 x i1> %a) {
; CHECK-LABEL: reduce_and_i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vfirst.m a0, v0
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v1i1(<1 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i2(<2 x i1> %a) {
; CHECK-LABEL: reduce_and_i2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v2i1(<2 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i4(<4 x i1> %a) {
; CHECK-LABEL: reduce_and_i4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e8, mf4, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v4i1(<4 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i8(<8 x i1> %a) {
; CHECK-LABEL: reduce_and_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i16(<16 x i1> %a) {
; CHECK-LABEL: reduce_and_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v16i1(<16 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i32(<32 x i1> %a) {
; CHECK-LABEL: reduce_and_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 32
; CHECK-NEXT:    vsetvli zero, a0, e8, m2, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v32i1(<32 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i64(<64 x i1> %a) {
; CHECK-LABEL: reduce_and_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 64
; CHECK-NEXT:    vsetvli zero, a0, e8, m4, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v64i1(<64 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i128(<128 x i1> %a) {
; CHECK-LABEL: reduce_and_i128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 128
; CHECK-NEXT:    vsetvli zero, a0, e8, m8, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v128i1(<128 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i256(<256 x i1> %a) {
; CHECK-LABEL: reduce_and_i256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 128
; CHECK-NEXT:    vsetvli zero, a0, e8, m8, ta, ma
; CHECK-NEXT:    vmnand.mm v8, v0, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v256i1(<256 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i512(<512 x i1> %a) {
; CHECK-LABEL: reduce_and_i512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 128
; CHECK-NEXT:    vsetvli zero, a0, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v8, v8, v10
; CHECK-NEXT:    vmand.mm v9, v0, v9
; CHECK-NEXT:    vmnand.mm v8, v9, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v512i1(<512 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i1024(<1024 x i1> %a) {
; CHECK-LABEL: reduce_and_i1024:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 128
; CHECK-NEXT:    vsetvli zero, a0, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v10, v10, v14
; CHECK-NEXT:    vmand.mm v8, v8, v12
; CHECK-NEXT:    vmand.mm v9, v9, v13
; CHECK-NEXT:    vmand.mm v11, v0, v11
; CHECK-NEXT:    vmand.mm v8, v8, v10
; CHECK-NEXT:    vmand.mm v9, v11, v9
; CHECK-NEXT:    vmnand.mm v8, v9, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.v1024i1(<1024 x i1> %a)
  ret i1 %1
}


define i1 @reduce_and_i1_vscale(<vscale x 1 x i1> %a) {
; CHECK-LABEL: reduce_and_i1_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv1i1(<vscale x 1 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i2_vscale(<vscale x 2 x i1> %a) {
; CHECK-LABEL: reduce_and_i2_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf4, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv2i1(<vscale x 2 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i4_vscale(<vscale x 4 x i1> %a) {
; CHECK-LABEL: reduce_and_i4_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv4i1(<vscale x 4 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i8_vscale(<vscale x 8 x i1> %a) {
; CHECK-LABEL: reduce_and_i8_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m1, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv8i1(<vscale x 8 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i16_vscale(<vscale x 16 x i1> %a) {
; CHECK-LABEL: reduce_and_i16_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m2, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv16i1(<vscale x 16 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i32_vscale(<vscale x 32 x i1> %a) {
; CHECK-LABEL: reduce_and_i32_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m4, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv32i1(<vscale x 32 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i64_vscale(<vscale x 64 x i1> %a) {
; CHECK-LABEL: reduce_and_i64_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vmnot.m v8, v0
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv64i1(<vscale x 64 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i128_vscale(<vscale x 128 x i1> %a) {
; CHECK-LABEL: reduce_and_i128_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v8, v0, v8
; CHECK-NEXT:    vmnot.m v8, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv128i1(<vscale x 128 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i256_vscale(<vscale x 256 x i1> %a) {
; CHECK-LABEL: reduce_and_i256_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v8, v8, v10
; CHECK-NEXT:    vmand.mm v9, v0, v9
; CHECK-NEXT:    vmand.mm v8, v9, v8
; CHECK-NEXT:    vmnot.m v8, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv256i1(<vscale x 256 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i512_vscale(<vscale x 512 x i1> %a) {
; CHECK-LABEL: reduce_and_i512_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v10, v10, v14
; CHECK-NEXT:    vmand.mm v8, v8, v12
; CHECK-NEXT:    vmand.mm v9, v9, v13
; CHECK-NEXT:    vmand.mm v11, v0, v11
; CHECK-NEXT:    vmand.mm v8, v8, v10
; CHECK-NEXT:    vmand.mm v9, v11, v9
; CHECK-NEXT:    vmand.mm v8, v9, v8
; CHECK-NEXT:    vmnot.m v8, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv512i1(<vscale x 512 x i1> %a)
  ret i1 %1
}

define i1 @reduce_and_i1024_vscale(<vscale x 1024 x i1> %a) {
; CHECK-LABEL: reduce_and_i1024_vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e8, m8, ta, ma
; CHECK-NEXT:    vmand.mm v14, v14, v22
; CHECK-NEXT:    vmand.mm v10, v10, v18
; CHECK-NEXT:    vmand.mm v12, v12, v20
; CHECK-NEXT:    vmand.mm v8, v8, v16
; CHECK-NEXT:    vmand.mm v13, v13, v21
; CHECK-NEXT:    vmand.mm v9, v9, v17
; CHECK-NEXT:    vmand.mm v11, v11, v19
; CHECK-NEXT:    vmand.mm v15, v0, v15
; CHECK-NEXT:    vmand.mm v10, v10, v14
; CHECK-NEXT:    vmand.mm v8, v8, v12
; CHECK-NEXT:    vmand.mm v9, v9, v13
; CHECK-NEXT:    vmand.mm v11, v15, v11
; CHECK-NEXT:    vmand.mm v8, v8, v10
; CHECK-NEXT:    vmand.mm v9, v11, v9
; CHECK-NEXT:    vmand.mm v8, v9, v8
; CHECK-NEXT:    vmnot.m v8, v8
; CHECK-NEXT:    vcpop.m a0, v8
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %1 = call i1 @llvm.vector.reduce.and.nxv1024i1(<vscale x 1024 x i1> %a)
  ret i1 %1
}

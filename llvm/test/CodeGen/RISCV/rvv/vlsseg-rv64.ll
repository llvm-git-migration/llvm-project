; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+zve64d,+f,+d,+zfh,+zvfh,+experimental-zvfbfmin \
; RUN:     -verify-machineinstrs < %s | FileCheck %s

declare target("riscv_mf8x2", i8, i8, 0, 2) @llvm.riscv.vlsseg2.triscv_mf8x2_i8_i8_0_2t(target("riscv_mf8x2", i8, i8, 0, 2), ptr, i64, i64, i64)
declare target("riscv_mf8x2", i8, i8, 0, 2) @llvm.riscv.vlsseg2.mask.triscv_mf8x2_i8_i8_0_2t.nxv1i1(target("riscv_mf8x2", i8, i8, 0, 2), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg2_nxv1i8_triscv_mf8x2_i8_i8_0_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1i8_triscv_mf8x2_i8_i8_0_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x2", i8, i8, 0, 2) @llvm.riscv.vlsseg2.triscv_mf8x2_i8_i8_0_2t(target("riscv_mf8x2", i8, i8, 0, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x2_i8_i8_0_2t(target("riscv_mf8x2", i8, i8, 0, 2) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg2_mask_nxv1i8_triscv_mf8x2_i8_i8_0_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1i8_triscv_mf8x2_i8_i8_0_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x2", i8, i8, 0, 2) @llvm.riscv.vlsseg2.mask.triscv_mf8x2_i8_i8_0_2t.nxv1i1(target("riscv_mf8x2", i8, i8, 0, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x2_i8_i8_0_2t(target("riscv_mf8x2", i8, i8, 0, 2) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2), ptr, i64, i64, i64)
declare target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv2i1(target("riscv_mf4x2", i8, i8, 1, 2), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg2_nxv2i8_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2i8_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg2_mask_nxv2i8_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2i8_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv2i1(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2), ptr, i64, i64, i64)
declare target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv4i1(target("riscv_mf2x2", i8, i8, 2, 2), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg2_nxv4i8_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4i8_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg2_mask_nxv4i8_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4i8_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv4i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2), ptr, i64, i64, i64)
declare target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv8i1(target("riscv_m1x2", i8, i8, 3, 2), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg2_nxv8i8_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8i8_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg2_mask_nxv8i8_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8i8_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv8i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2), ptr, i64, i64, i64)
declare target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv16i1(target("riscv_m2x2", i8, i8, 4, 2), ptr, i64, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlsseg2_nxv16i8_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv16i8_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlsseg2_mask_nxv16i8_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv16i8_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv16i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2), ptr, i64, i64, i64)
declare target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv32i1(target("riscv_m4x2", i8, i8, 5, 2), ptr, i64, <vscale x 32 x i1>, i64, i64, i64)

define <vscale x 32 x i8> @test_vlsseg2_nxv32i8_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv32i8_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 32 x i8> @llvm.riscv.vector.extract.nxv32i8.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 32 x i8> %1
}

define <vscale x 32 x i8> @test_vlsseg2_mask_nxv32i8_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 32 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv32i8_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m4, ta, ma
; CHECK-NEXT:    vlsseg2e8.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv32i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 32 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 32 x i8> @llvm.riscv.vector.extract.nxv32i8.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 32 x i8> %1
}

declare target("riscv_mf8x3", i8, i8, 0, 3) @llvm.riscv.vlsseg3.triscv_mf8x3_i8_i8_0_3t(target("riscv_mf8x3", i8, i8, 0, 3), ptr, i64, i64, i64)
declare target("riscv_mf8x3", i8, i8, 0, 3) @llvm.riscv.vlsseg3.mask.triscv_mf8x3_i8_i8_0_3t.nxv1i1(target("riscv_mf8x3", i8, i8, 0, 3), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg3_nxv1i8_triscv_mf8x3_i8_i8_0_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1i8_triscv_mf8x3_i8_i8_0_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x3", i8, i8, 0, 3) @llvm.riscv.vlsseg3.triscv_mf8x3_i8_i8_0_3t(target("riscv_mf8x3", i8, i8, 0, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x3_i8_i8_0_3t(target("riscv_mf8x3", i8, i8, 0, 3) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg3_mask_nxv1i8_triscv_mf8x3_i8_i8_0_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1i8_triscv_mf8x3_i8_i8_0_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x3", i8, i8, 0, 3) @llvm.riscv.vlsseg3.mask.triscv_mf8x3_i8_i8_0_3t.nxv1i1(target("riscv_mf8x3", i8, i8, 0, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x3_i8_i8_0_3t(target("riscv_mf8x3", i8, i8, 0, 3) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3), ptr, i64, i64, i64)
declare target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv2i1(target("riscv_mf4x3", i8, i8, 1, 3), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg3_nxv2i8_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2i8_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg3_mask_nxv2i8_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2i8_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv2i1(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3), ptr, i64, i64, i64)
declare target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv4i1(target("riscv_mf2x3", i8, i8, 2, 3), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg3_nxv4i8_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4i8_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg3_mask_nxv4i8_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4i8_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv4i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3), ptr, i64, i64, i64)
declare target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv8i1(target("riscv_m1x3", i8, i8, 3, 3), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg3_nxv8i8_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv8i8_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg3_mask_nxv8i8_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv8i8_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv8i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3), ptr, i64, i64, i64)
declare target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv16i1(target("riscv_m2x3", i8, i8, 4, 3), ptr, i64, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlsseg3_nxv16i8_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv16i8_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlsseg3_mask_nxv16i8_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv16i8_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg3e8.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv16i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare target("riscv_mf8x4", i8, i8, 0, 4) @llvm.riscv.vlsseg4.triscv_mf8x4_i8_i8_0_4t(target("riscv_mf8x4", i8, i8, 0, 4), ptr, i64, i64, i64)
declare target("riscv_mf8x4", i8, i8, 0, 4) @llvm.riscv.vlsseg4.mask.triscv_mf8x4_i8_i8_0_4t.nxv1i1(target("riscv_mf8x4", i8, i8, 0, 4), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg4_nxv1i8_triscv_mf8x4_i8_i8_0_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1i8_triscv_mf8x4_i8_i8_0_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x4", i8, i8, 0, 4) @llvm.riscv.vlsseg4.triscv_mf8x4_i8_i8_0_4t(target("riscv_mf8x4", i8, i8, 0, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x4_i8_i8_0_4t(target("riscv_mf8x4", i8, i8, 0, 4) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg4_mask_nxv1i8_triscv_mf8x4_i8_i8_0_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1i8_triscv_mf8x4_i8_i8_0_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x4", i8, i8, 0, 4) @llvm.riscv.vlsseg4.mask.triscv_mf8x4_i8_i8_0_4t.nxv1i1(target("riscv_mf8x4", i8, i8, 0, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x4_i8_i8_0_4t(target("riscv_mf8x4", i8, i8, 0, 4) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4), ptr, i64, i64, i64)
declare target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv2i1(target("riscv_mf4x4", i8, i8, 1, 4), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg4_nxv2i8_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2i8_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg4_mask_nxv2i8_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2i8_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv2i1(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4), ptr, i64, i64, i64)
declare target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv4i1(target("riscv_mf2x4", i8, i8, 2, 4), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg4_nxv4i8_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4i8_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg4_mask_nxv4i8_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4i8_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv4i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4), ptr, i64, i64, i64)
declare target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv8i1(target("riscv_m1x4", i8, i8, 3, 4), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg4_nxv8i8_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv8i8_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg4_mask_nxv8i8_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv8i8_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv8i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4), ptr, i64, i64, i64)
declare target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv16i1(target("riscv_m2x4", i8, i8, 4, 4), ptr, i64, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i8> @test_vlsseg4_nxv16i8_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv16i8_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

define <vscale x 16 x i8> @test_vlsseg4_mask_nxv16i8_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv16i8_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m2, ta, ma
; CHECK-NEXT:    vlsseg4e8.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv16i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 16 x i8> @llvm.riscv.vector.extract.nxv16i8.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 16 x i8> %1
}

declare target("riscv_mf8x5", i8, i8, 0, 5) @llvm.riscv.vlsseg5.triscv_mf8x5_i8_i8_0_5t(target("riscv_mf8x5", i8, i8, 0, 5), ptr, i64, i64, i64)
declare target("riscv_mf8x5", i8, i8, 0, 5) @llvm.riscv.vlsseg5.mask.triscv_mf8x5_i8_i8_0_5t.nxv1i1(target("riscv_mf8x5", i8, i8, 0, 5), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg5_nxv1i8_triscv_mf8x5_i8_i8_0_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1i8_triscv_mf8x5_i8_i8_0_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x5", i8, i8, 0, 5) @llvm.riscv.vlsseg5.triscv_mf8x5_i8_i8_0_5t(target("riscv_mf8x5", i8, i8, 0, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x5_i8_i8_0_5t(target("riscv_mf8x5", i8, i8, 0, 5) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg5_mask_nxv1i8_triscv_mf8x5_i8_i8_0_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1i8_triscv_mf8x5_i8_i8_0_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x5", i8, i8, 0, 5) @llvm.riscv.vlsseg5.mask.triscv_mf8x5_i8_i8_0_5t.nxv1i1(target("riscv_mf8x5", i8, i8, 0, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x5_i8_i8_0_5t(target("riscv_mf8x5", i8, i8, 0, 5) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5), ptr, i64, i64, i64)
declare target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv2i1(target("riscv_mf4x5", i8, i8, 1, 5), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg5_nxv2i8_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2i8_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg5_mask_nxv2i8_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2i8_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv2i1(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5), ptr, i64, i64, i64)
declare target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv4i1(target("riscv_mf2x5", i8, i8, 2, 5), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg5_nxv4i8_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv4i8_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg5_mask_nxv4i8_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv4i8_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv4i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5), ptr, i64, i64, i64)
declare target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv8i1(target("riscv_m1x5", i8, i8, 3, 5), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg5_nxv8i8_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv8i8_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg5_mask_nxv8i8_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv8i8_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg5e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv8i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_mf8x6", i8, i8, 0, 6) @llvm.riscv.vlsseg6.triscv_mf8x6_i8_i8_0_6t(target("riscv_mf8x6", i8, i8, 0, 6), ptr, i64, i64, i64)
declare target("riscv_mf8x6", i8, i8, 0, 6) @llvm.riscv.vlsseg6.mask.triscv_mf8x6_i8_i8_0_6t.nxv1i1(target("riscv_mf8x6", i8, i8, 0, 6), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg6_nxv1i8_triscv_mf8x6_i8_i8_0_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1i8_triscv_mf8x6_i8_i8_0_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x6", i8, i8, 0, 6) @llvm.riscv.vlsseg6.triscv_mf8x6_i8_i8_0_6t(target("riscv_mf8x6", i8, i8, 0, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x6_i8_i8_0_6t(target("riscv_mf8x6", i8, i8, 0, 6) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg6_mask_nxv1i8_triscv_mf8x6_i8_i8_0_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1i8_triscv_mf8x6_i8_i8_0_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x6", i8, i8, 0, 6) @llvm.riscv.vlsseg6.mask.triscv_mf8x6_i8_i8_0_6t.nxv1i1(target("riscv_mf8x6", i8, i8, 0, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x6_i8_i8_0_6t(target("riscv_mf8x6", i8, i8, 0, 6) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6), ptr, i64, i64, i64)
declare target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv2i1(target("riscv_mf4x6", i8, i8, 1, 6), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg6_nxv2i8_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2i8_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg6_mask_nxv2i8_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2i8_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv2i1(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6), ptr, i64, i64, i64)
declare target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv4i1(target("riscv_mf2x6", i8, i8, 2, 6), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg6_nxv4i8_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv4i8_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg6_mask_nxv4i8_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv4i8_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv4i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6), ptr, i64, i64, i64)
declare target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv8i1(target("riscv_m1x6", i8, i8, 3, 6), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg6_nxv8i8_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv8i8_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg6_mask_nxv8i8_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv8i8_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg6e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv8i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_mf8x7", i8, i8, 0, 7) @llvm.riscv.vlsseg7.triscv_mf8x7_i8_i8_0_7t(target("riscv_mf8x7", i8, i8, 0, 7), ptr, i64, i64, i64)
declare target("riscv_mf8x7", i8, i8, 0, 7) @llvm.riscv.vlsseg7.mask.triscv_mf8x7_i8_i8_0_7t.nxv1i1(target("riscv_mf8x7", i8, i8, 0, 7), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg7_nxv1i8_triscv_mf8x7_i8_i8_0_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1i8_triscv_mf8x7_i8_i8_0_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x7", i8, i8, 0, 7) @llvm.riscv.vlsseg7.triscv_mf8x7_i8_i8_0_7t(target("riscv_mf8x7", i8, i8, 0, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x7_i8_i8_0_7t(target("riscv_mf8x7", i8, i8, 0, 7) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg7_mask_nxv1i8_triscv_mf8x7_i8_i8_0_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1i8_triscv_mf8x7_i8_i8_0_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x7", i8, i8, 0, 7) @llvm.riscv.vlsseg7.mask.triscv_mf8x7_i8_i8_0_7t.nxv1i1(target("riscv_mf8x7", i8, i8, 0, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x7_i8_i8_0_7t(target("riscv_mf8x7", i8, i8, 0, 7) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7), ptr, i64, i64, i64)
declare target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv2i1(target("riscv_mf4x7", i8, i8, 1, 7), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg7_nxv2i8_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2i8_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg7_mask_nxv2i8_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2i8_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv2i1(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7), ptr, i64, i64, i64)
declare target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv4i1(target("riscv_mf2x7", i8, i8, 2, 7), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg7_nxv4i8_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv4i8_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg7_mask_nxv4i8_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv4i8_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv4i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7), ptr, i64, i64, i64)
declare target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv8i1(target("riscv_m1x7", i8, i8, 3, 7), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg7_nxv8i8_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv8i8_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg7_mask_nxv8i8_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv8i8_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg7e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv8i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_mf8x8", i8, i8, 0, 8) @llvm.riscv.vlsseg8.triscv_mf8x8_i8_i8_0_8t(target("riscv_mf8x8", i8, i8, 0, 8), ptr, i64, i64, i64)
declare target("riscv_mf8x8", i8, i8, 0, 8) @llvm.riscv.vlsseg8.mask.triscv_mf8x8_i8_i8_0_8t.nxv1i1(target("riscv_mf8x8", i8, i8, 0, 8), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i8> @test_vlsseg8_nxv1i8_triscv_mf8x8_i8_i8_0_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1i8_triscv_mf8x8_i8_i8_0_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x8", i8, i8, 0, 8) @llvm.riscv.vlsseg8.triscv_mf8x8_i8_i8_0_8t(target("riscv_mf8x8", i8, i8, 0, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x8_i8_i8_0_8t(target("riscv_mf8x8", i8, i8, 0, 8) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

define <vscale x 1 x i8> @test_vlsseg8_mask_nxv1i8_triscv_mf8x8_i8_i8_0_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1i8_triscv_mf8x8_i8_i8_0_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf8, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf8x8", i8, i8, 0, 8) @llvm.riscv.vlsseg8.mask.triscv_mf8x8_i8_i8_0_8t.nxv1i1(target("riscv_mf8x8", i8, i8, 0, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 1 x i8> @llvm.riscv.vector.extract.nxv1i8.triscv_mf8x8_i8_i8_0_8t(target("riscv_mf8x8", i8, i8, 0, 8) %0, i64 1)
  ret <vscale x 1 x i8> %1
}

declare target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8), ptr, i64, i64, i64)
declare target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv2i1(target("riscv_mf4x8", i8, i8, 1, 8), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i8> @test_vlsseg8_nxv2i8_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2i8_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

define <vscale x 2 x i8> @test_vlsseg8_mask_nxv2i8_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2i8_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv2i1(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 2 x i8> @llvm.riscv.vector.extract.nxv2i8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 2 x i8> %1
}

declare target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8), ptr, i64, i64, i64)
declare target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv4i1(target("riscv_mf2x8", i8, i8, 2, 8), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i8> @test_vlsseg8_nxv4i8_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv4i8_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

define <vscale x 4 x i8> @test_vlsseg8_mask_nxv4i8_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv4i8_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv4i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 4 x i8> @llvm.riscv.vector.extract.nxv4i8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 4 x i8> %1
}

declare target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8), ptr, i64, i64, i64)
declare target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv8i1(target("riscv_m1x8", i8, i8, 3, 8), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i8> @test_vlsseg8_nxv8i8_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv8i8_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @test_vlsseg8_mask_nxv8i8_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv8i8_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e8, m1, ta, ma
; CHECK-NEXT:    vlsseg8e8.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv8i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 3)
  %1 = call <vscale x 8 x i8> @llvm.riscv.vector.extract.nxv8i8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 8 x i8> %1
}

declare target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv1i1(target("riscv_mf4x2", i8, i8, 1, 2), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg2_nxv1i16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1i16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg2_mask_nxv1i16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1i16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv1i1(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv2i1(target("riscv_mf2x2", i8, i8, 2, 2), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg2_nxv2i16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2i16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg2_mask_nxv2i16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2i16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv2i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv4i1(target("riscv_m1x2", i8, i8, 3, 2), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg2_nxv4i16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4i16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg2_mask_nxv4i16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4i16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv4i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv8i1(target("riscv_m2x2", i8, i8, 4, 2), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlsseg2_nxv8i16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8i16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlsseg2_mask_nxv8i16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8i16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv8i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv16i1(target("riscv_m4x2", i8, i8, 5, 2), ptr, i64, <vscale x 16 x i1>, i64, i64, i64)

define <vscale x 16 x i16> @test_vlsseg2_nxv16i16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv16i16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 16 x i16> @llvm.riscv.vector.extract.nxv16i16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x i16> %1
}

define <vscale x 16 x i16> @test_vlsseg2_mask_nxv16i16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv16i16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv16i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x i16> @llvm.riscv.vector.extract.nxv16i16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x i16> %1
}

declare target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv1i1(target("riscv_mf4x3", i8, i8, 1, 3), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg3_nxv1i16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1i16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg3_mask_nxv1i16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1i16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv1i1(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv2i1(target("riscv_mf2x3", i8, i8, 2, 3), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg3_nxv2i16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2i16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg3_mask_nxv2i16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2i16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv2i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv4i1(target("riscv_m1x3", i8, i8, 3, 3), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg3_nxv4i16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4i16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg3_mask_nxv4i16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4i16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv4i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv8i1(target("riscv_m2x3", i8, i8, 4, 3), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlsseg3_nxv8i16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv8i16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlsseg3_mask_nxv8i16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv8i16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv8i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv1i1(target("riscv_mf4x4", i8, i8, 1, 4), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg4_nxv1i16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1i16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg4_mask_nxv1i16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1i16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv1i1(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv2i1(target("riscv_mf2x4", i8, i8, 2, 4), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg4_nxv2i16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2i16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg4_mask_nxv2i16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2i16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv2i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv4i1(target("riscv_m1x4", i8, i8, 3, 4), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg4_nxv4i16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4i16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg4_mask_nxv4i16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4i16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv4i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv8i1(target("riscv_m2x4", i8, i8, 4, 4), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i16> @test_vlsseg4_nxv8i16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv8i16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

define <vscale x 8 x i16> @test_vlsseg4_mask_nxv8i16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv8i16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv8i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x i16> @llvm.riscv.vector.extract.nxv8i16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x i16> %1
}

declare target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv1i1(target("riscv_mf4x5", i8, i8, 1, 5), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg5_nxv1i16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1i16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg5_mask_nxv1i16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1i16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv1i1(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv2i1(target("riscv_mf2x5", i8, i8, 2, 5), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg5_nxv2i16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2i16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg5_mask_nxv2i16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2i16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv2i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv4i1(target("riscv_m1x5", i8, i8, 3, 5), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg5_nxv4i16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv4i16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg5_mask_nxv4i16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv4i16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv4i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv1i1(target("riscv_mf4x6", i8, i8, 1, 6), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg6_nxv1i16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1i16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg6_mask_nxv1i16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1i16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv1i1(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv2i1(target("riscv_mf2x6", i8, i8, 2, 6), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg6_nxv2i16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2i16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg6_mask_nxv2i16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2i16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv2i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv4i1(target("riscv_m1x6", i8, i8, 3, 6), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg6_nxv4i16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv4i16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg6_mask_nxv4i16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv4i16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv4i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv1i1(target("riscv_mf4x7", i8, i8, 1, 7), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg7_nxv1i16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1i16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg7_mask_nxv1i16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1i16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv1i1(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv2i1(target("riscv_mf2x7", i8, i8, 2, 7), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg7_nxv2i16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2i16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg7_mask_nxv2i16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2i16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv2i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv4i1(target("riscv_m1x7", i8, i8, 3, 7), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg7_nxv4i16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv4i16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg7_mask_nxv4i16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv4i16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv4i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv1i1(target("riscv_mf4x8", i8, i8, 1, 8), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i16> @test_vlsseg8_nxv1i16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1i16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

define <vscale x 1 x i16> @test_vlsseg8_mask_nxv1i16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1i16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv1i1(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x i16> @llvm.riscv.vector.extract.nxv1i16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x i16> %1
}

declare target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv2i1(target("riscv_mf2x8", i8, i8, 2, 8), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i16> @test_vlsseg8_nxv2i16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2i16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

define <vscale x 2 x i16> @test_vlsseg8_mask_nxv2i16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2i16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv2i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x i16> @llvm.riscv.vector.extract.nxv2i16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x i16> %1
}

declare target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv4i1(target("riscv_m1x8", i8, i8, 3, 8), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i16> @test_vlsseg8_nxv4i16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv4i16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

define <vscale x 4 x i16> @test_vlsseg8_mask_nxv4i16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv4i16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv4i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x i16> @llvm.riscv.vector.extract.nxv4i16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x i16> %1
}

declare target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv1i1(target("riscv_mf2x2", i8, i8, 2, 2), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg2_nxv1i32_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1i32_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg2_mask_nxv1i32_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1i32_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv1i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv2i1(target("riscv_m1x2", i8, i8, 3, 2), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg2_nxv2i32_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2i32_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg2_mask_nxv2i32_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2i32_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv2i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv4i1(target("riscv_m2x2", i8, i8, 4, 2), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlsseg2_nxv4i32_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4i32_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlsseg2_mask_nxv4i32_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4i32_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv4i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv8i1(target("riscv_m4x2", i8, i8, 5, 2), ptr, i64, <vscale x 8 x i1>, i64, i64, i64)

define <vscale x 8 x i32> @test_vlsseg2_nxv8i32_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8i32_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 8 x i32> @llvm.riscv.vector.extract.nxv8i32.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 8 x i32> %1
}

define <vscale x 8 x i32> @test_vlsseg2_mask_nxv8i32_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8i32_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv8i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 8 x i32> @llvm.riscv.vector.extract.nxv8i32.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 8 x i32> %1
}

declare target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv1i1(target("riscv_mf2x3", i8, i8, 2, 3), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg3_nxv1i32_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1i32_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg3_mask_nxv1i32_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1i32_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv1i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv2i1(target("riscv_m1x3", i8, i8, 3, 3), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg3_nxv2i32_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2i32_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg3_mask_nxv2i32_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2i32_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv2i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv4i1(target("riscv_m2x3", i8, i8, 4, 3), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlsseg3_nxv4i32_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4i32_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlsseg3_mask_nxv4i32_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4i32_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv4i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv1i1(target("riscv_mf2x4", i8, i8, 2, 4), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg4_nxv1i32_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1i32_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg4_mask_nxv1i32_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1i32_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv1i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv2i1(target("riscv_m1x4", i8, i8, 3, 4), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg4_nxv2i32_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2i32_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg4_mask_nxv2i32_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2i32_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv2i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv4i1(target("riscv_m2x4", i8, i8, 4, 4), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i32> @test_vlsseg4_nxv4i32_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4i32_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

define <vscale x 4 x i32> @test_vlsseg4_mask_nxv4i32_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4i32_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv4i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x i32> @llvm.riscv.vector.extract.nxv4i32.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 4 x i32> %1
}

declare target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv1i1(target("riscv_mf2x5", i8, i8, 2, 5), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg5_nxv1i32_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1i32_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg5_mask_nxv1i32_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1i32_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv1i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv2i1(target("riscv_m1x5", i8, i8, 3, 5), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg5_nxv2i32_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2i32_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg5_mask_nxv2i32_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2i32_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv2i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv1i1(target("riscv_mf2x6", i8, i8, 2, 6), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg6_nxv1i32_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1i32_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg6_mask_nxv1i32_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1i32_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv1i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv2i1(target("riscv_m1x6", i8, i8, 3, 6), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg6_nxv2i32_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2i32_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg6_mask_nxv2i32_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2i32_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv2i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv1i1(target("riscv_mf2x7", i8, i8, 2, 7), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg7_nxv1i32_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1i32_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg7_mask_nxv1i32_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1i32_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv1i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv2i1(target("riscv_m1x7", i8, i8, 3, 7), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg7_nxv2i32_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2i32_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg7_mask_nxv2i32_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2i32_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv2i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv1i1(target("riscv_mf2x8", i8, i8, 2, 8), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i32> @test_vlsseg8_nxv1i32_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1i32_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

define <vscale x 1 x i32> @test_vlsseg8_mask_nxv1i32_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1i32_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv1i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x i32> @llvm.riscv.vector.extract.nxv1i32.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 1 x i32> %1
}

declare target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv2i1(target("riscv_m1x8", i8, i8, 3, 8), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i32> @test_vlsseg8_nxv2i32_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2i32_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x i32> @test_vlsseg8_mask_nxv2i32_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2i32_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv2i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x i32> @llvm.riscv.vector.extract.nxv2i32.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 2 x i32> %1
}

declare target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv1i1(target("riscv_m1x2", i8, i8, 3, 2), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg2_nxv1i64_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1i64_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg2_mask_nxv1i64_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1i64_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv1i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv2i1(target("riscv_m2x2", i8, i8, 4, 2), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlsseg2_nxv2i64_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2i64_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlsseg2_mask_nxv2i64_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2i64_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv2i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv4i1(target("riscv_m4x2", i8, i8, 5, 2), ptr, i64, <vscale x 4 x i1>, i64, i64, i64)

define <vscale x 4 x i64> @test_vlsseg2_nxv4i64_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4i64_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 4 x i64> @llvm.riscv.vector.extract.nxv4i64.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 4 x i64> %1
}

define <vscale x 4 x i64> @test_vlsseg2_mask_nxv4i64_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4i64_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv4i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 4 x i64> @llvm.riscv.vector.extract.nxv4i64.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 4 x i64> %1
}

declare target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv1i1(target("riscv_m1x3", i8, i8, 3, 3), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg3_nxv1i64_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1i64_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg3_mask_nxv1i64_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1i64_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv1i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv2i1(target("riscv_m2x3", i8, i8, 4, 3), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlsseg3_nxv2i64_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2i64_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlsseg3_mask_nxv2i64_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2i64_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv2i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv1i1(target("riscv_m1x4", i8, i8, 3, 4), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg4_nxv1i64_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1i64_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg4_mask_nxv1i64_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1i64_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv1i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv2i1(target("riscv_m2x4", i8, i8, 4, 4), ptr, i64, <vscale x 2 x i1>, i64, i64, i64)

define <vscale x 2 x i64> @test_vlsseg4_nxv2i64_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2i64_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

define <vscale x 2 x i64> @test_vlsseg4_mask_nxv2i64_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2i64_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv2i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x i64> @llvm.riscv.vector.extract.nxv2i64.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 2 x i64> %1
}

declare target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv1i1(target("riscv_m1x5", i8, i8, 3, 5), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg5_nxv1i64_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1i64_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg5e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg5_mask_nxv1i64_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1i64_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg5e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv1i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv1i1(target("riscv_m1x6", i8, i8, 3, 6), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg6_nxv1i64_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1i64_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg6e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg6_mask_nxv1i64_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1i64_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg6e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv1i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv1i1(target("riscv_m1x7", i8, i8, 3, 7), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg7_nxv1i64_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1i64_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg7e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg7_mask_nxv1i64_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1i64_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg7e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv1i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

declare target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv1i1(target("riscv_m1x8", i8, i8, 3, 8), ptr, i64, <vscale x 1 x i1>, i64, i64, i64)

define <vscale x 1 x i64> @test_vlsseg8_nxv1i64_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1i64_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg8e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 1 x i64> %1
}

define <vscale x 1 x i64> @test_vlsseg8_mask_nxv1i64_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1i64_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg8e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv1i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x i64> @llvm.riscv.vector.extract.nxv1i64.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 1 x i64> %1
}


define <vscale x 1 x half> @test_vlsseg2_nxv1f16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1f16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg2_mask_nxv1f16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1f16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv1i1(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg2_nxv2f16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2f16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg2_mask_nxv2f16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2f16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv2i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg2_nxv4f16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4f16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg2_mask_nxv4f16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4f16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv4i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlsseg2_nxv8f16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8f16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlsseg2_mask_nxv8f16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8f16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv8i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 16 x half> @test_vlsseg2_nxv16f16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv16f16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 16 x half> @llvm.riscv.vector.extract.nxv16f16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x half> %1
}

define <vscale x 16 x half> @test_vlsseg2_mask_nxv16f16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv16f16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv16i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x half> @llvm.riscv.vector.extract.nxv16f16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x half> %1
}


define <vscale x 1 x half> @test_vlsseg3_nxv1f16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1f16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg3_mask_nxv1f16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1f16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv1i1(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg3_nxv2f16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2f16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg3_mask_nxv2f16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2f16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv2i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg3_nxv4f16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4f16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg3_mask_nxv4f16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4f16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv4i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlsseg3_nxv8f16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv8f16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlsseg3_mask_nxv8f16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv8f16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv8i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 1 x half> @test_vlsseg4_nxv1f16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1f16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg4_mask_nxv1f16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1f16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv1i1(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg4_nxv2f16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2f16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg4_mask_nxv2f16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2f16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv2i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg4_nxv4f16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4f16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg4_mask_nxv4f16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4f16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv4i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 8 x half> @test_vlsseg4_nxv8f16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv8f16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x half> %1
}

define <vscale x 8 x half> @test_vlsseg4_mask_nxv8f16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv8f16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv8i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x half> @llvm.riscv.vector.extract.nxv8f16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x half> %1
}


define <vscale x 1 x half> @test_vlsseg5_nxv1f16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1f16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg5_mask_nxv1f16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1f16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv1i1(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg5_nxv2f16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2f16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg5_mask_nxv2f16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2f16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv2i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg5_nxv4f16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv4f16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg5_mask_nxv4f16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv4f16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv4i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlsseg6_nxv1f16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1f16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg6_mask_nxv1f16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1f16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv1i1(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg6_nxv2f16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2f16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg6_mask_nxv2f16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2f16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv2i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg6_nxv4f16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv4f16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg6_mask_nxv4f16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv4f16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv4i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlsseg7_nxv1f16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1f16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg7_mask_nxv1f16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1f16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv1i1(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg7_nxv2f16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2f16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg7_mask_nxv2f16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2f16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv2i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg7_nxv4f16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv4f16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg7_mask_nxv4f16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv4f16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv4i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x half> @test_vlsseg8_nxv1f16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1f16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x half> %1
}

define <vscale x 1 x half> @test_vlsseg8_mask_nxv1f16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1f16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv1i1(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x half> @llvm.riscv.vector.extract.nxv1f16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x half> %1
}


define <vscale x 2 x half> @test_vlsseg8_nxv2f16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2f16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x half> %1
}

define <vscale x 2 x half> @test_vlsseg8_mask_nxv2f16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2f16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv2i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x half> @llvm.riscv.vector.extract.nxv2f16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x half> %1
}


define <vscale x 4 x half> @test_vlsseg8_nxv4f16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv4f16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x half> %1
}

define <vscale x 4 x half> @test_vlsseg8_mask_nxv4f16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv4f16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv4i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x half> @llvm.riscv.vector.extract.nxv4f16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x half> %1
}


define <vscale x 1 x float> @test_vlsseg2_nxv1f32_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1f32_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg2_mask_nxv1f32_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1f32_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv1i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg2_nxv2f32_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2f32_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg2_mask_nxv2f32_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2f32_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv2i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlsseg2_nxv4f32_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4f32_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlsseg2_mask_nxv4f32_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4f32_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv4i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 8 x float> @test_vlsseg2_nxv8f32_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8f32_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 8 x float> @llvm.riscv.vector.extract.nxv8f32.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 8 x float> %1
}

define <vscale x 8 x float> @test_vlsseg2_mask_nxv8f32_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8f32_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m4, ta, ma
; CHECK-NEXT:    vlsseg2e32.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv8i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 8 x float> @llvm.riscv.vector.extract.nxv8f32.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 8 x float> %1
}


define <vscale x 1 x float> @test_vlsseg3_nxv1f32_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1f32_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg3_mask_nxv1f32_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1f32_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv1i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg3_nxv2f32_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2f32_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg3_mask_nxv2f32_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2f32_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv2i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlsseg3_nxv4f32_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4f32_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlsseg3_mask_nxv4f32_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4f32_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg3e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv4i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 1 x float> @test_vlsseg4_nxv1f32_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1f32_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg4_mask_nxv1f32_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1f32_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv1i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg4_nxv2f32_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2f32_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg4_mask_nxv2f32_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2f32_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv2i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 4 x float> @test_vlsseg4_nxv4f32_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4f32_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @test_vlsseg4_mask_nxv4f32_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4f32_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m2, ta, ma
; CHECK-NEXT:    vlsseg4e32.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv4i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 4 x float> @llvm.riscv.vector.extract.nxv4f32.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 4 x float> %1
}


define <vscale x 1 x float> @test_vlsseg5_nxv1f32_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1f32_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg5_mask_nxv1f32_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1f32_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv1i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg5_nxv2f32_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2f32_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg5_mask_nxv2f32_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2f32_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg5e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv2i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlsseg6_nxv1f32_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1f32_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg6_mask_nxv1f32_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1f32_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv1i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg6_nxv2f32_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2f32_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg6_mask_nxv2f32_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2f32_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg6e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv2i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlsseg7_nxv1f32_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1f32_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg7_mask_nxv1f32_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1f32_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv1i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg7_nxv2f32_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2f32_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg7_mask_nxv2f32_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2f32_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg7e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv2i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x float> @test_vlsseg8_nxv1f32_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1f32_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @test_vlsseg8_mask_nxv1f32_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1f32_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv1i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 1 x float> @llvm.riscv.vector.extract.nxv1f32.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 1 x float> %1
}


define <vscale x 2 x float> @test_vlsseg8_nxv2f32_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2f32_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @test_vlsseg8_mask_nxv2f32_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2f32_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e32, m1, ta, ma
; CHECK-NEXT:    vlsseg8e32.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv2i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 5)
  %1 = call <vscale x 2 x float> @llvm.riscv.vector.extract.nxv2f32.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 2 x float> %1
}


define <vscale x 1 x double> @test_vlsseg2_nxv1f64_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1f64_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg2_mask_nxv1f64_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1f64_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv1i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlsseg2_nxv2f64_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2f64_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlsseg2_mask_nxv2f64_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2f64_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv2i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 4 x double> @test_vlsseg2_nxv4f64_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4f64_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 4 x double> @llvm.riscv.vector.extract.nxv4f64.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 4 x double> %1
}

define <vscale x 4 x double> @test_vlsseg2_mask_nxv4f64_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4f64_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m4, ta, ma
; CHECK-NEXT:    vlsseg2e64.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv4i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 4 x double> @llvm.riscv.vector.extract.nxv4f64.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 4 x double> %1
}


define <vscale x 1 x double> @test_vlsseg3_nxv1f64_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1f64_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg3_mask_nxv1f64_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1f64_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv1i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlsseg3_nxv2f64_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2f64_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlsseg3_mask_nxv2f64_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2f64_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg3e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv2i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 1 x double> @test_vlsseg4_nxv1f64_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1f64_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg4_mask_nxv1f64_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1f64_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv1i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 2 x double> @test_vlsseg4_nxv2f64_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2f64_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @test_vlsseg4_mask_nxv2f64_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2f64_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m2, ta, ma
; CHECK-NEXT:    vlsseg4e64.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv2i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 2 x double> @llvm.riscv.vector.extract.nxv2f64.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 2 x double> %1
}


define <vscale x 1 x double> @test_vlsseg5_nxv1f64_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1f64_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg5e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg5_mask_nxv1f64_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1f64_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg5e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv1i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlsseg6_nxv1f64_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1f64_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg6e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg6_mask_nxv1f64_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1f64_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg6e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv1i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlsseg7_nxv1f64_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1f64_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg7e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg7_mask_nxv1f64_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1f64_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg7e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv1i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x double> @test_vlsseg8_nxv1f64_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1f64_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg8e64.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @test_vlsseg8_mask_nxv1f64_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1f64_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e64, m1, ta, ma
; CHECK-NEXT:    vlsseg8e64.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv1i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 6)
  %1 = call <vscale x 1 x double> @llvm.riscv.vector.extract.nxv1f64.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 1 x double> %1
}


define <vscale x 1 x bfloat> @test_vlsseg2_nxv1bf16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv1bf16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg2_mask_nxv1bf16_triscv_mf4x2_i8_i8_1_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv1bf16_triscv_mf4x2_i8_i8_1_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x2", i8, i8, 1, 2) @llvm.riscv.vlsseg2.mask.triscv_mf4x2_i8_i8_1_2t.nxv1i1(target("riscv_mf4x2", i8, i8, 1, 2) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x2_i8_i8_1_2t(target("riscv_mf4x2", i8, i8, 1, 2) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg2_nxv2bf16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv2bf16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg2_mask_nxv2bf16_triscv_mf2x2_i8_i8_2_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv2bf16_triscv_mf2x2_i8_i8_2_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x2", i8, i8, 2, 2) @llvm.riscv.vlsseg2.mask.triscv_mf2x2_i8_i8_2_2t.nxv2i1(target("riscv_mf2x2", i8, i8, 2, 2) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x2_i8_i8_2_2t(target("riscv_mf2x2", i8, i8, 2, 2) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg2_nxv4bf16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv4bf16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg2_mask_nxv4bf16_triscv_m1x2_i8_i8_3_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv4bf16_triscv_m1x2_i8_i8_3_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x2", i8, i8, 3, 2) @llvm.riscv.vlsseg2.mask.triscv_m1x2_i8_i8_3_2t.nxv4i1(target("riscv_m1x2", i8, i8, 3, 2) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x2_i8_i8_3_2t(target("riscv_m1x2", i8, i8, 3, 2) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlsseg2_nxv8bf16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv8bf16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlsseg2_mask_nxv8bf16_triscv_m2x2_i8_i8_4_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv8bf16_triscv_m2x2_i8_i8_4_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x2", i8, i8, 4, 2) @llvm.riscv.vlsseg2.mask.triscv_m2x2_i8_i8_4_2t.nxv8i1(target("riscv_m2x2", i8, i8, 4, 2) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x2_i8_i8_4_2t(target("riscv_m2x2", i8, i8, 4, 2) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 16 x bfloat> @test_vlsseg2_nxv16bf16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg2_nxv16bf16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 16 x bfloat> @llvm.riscv.vector.extract.nxv16bf16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x bfloat> %1
}

define <vscale x 16 x bfloat> @test_vlsseg2_mask_nxv16bf16_triscv_m4x2_i8_i8_5_2t(ptr %base, i64 %offset, i64 %vl, <vscale x 16 x i1> %mask) {
; CHECK-LABEL: test_vlsseg2_mask_nxv16bf16_triscv_m4x2_i8_i8_5_2t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m4, ta, ma
; CHECK-NEXT:    vlsseg2e16.v v4, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m4x2", i8, i8, 5, 2) @llvm.riscv.vlsseg2.mask.triscv_m4x2_i8_i8_5_2t.nxv16i1(target("riscv_m4x2", i8, i8, 5, 2) undef, ptr %base, i64 %offset, <vscale x 16 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 16 x bfloat> @llvm.riscv.vector.extract.nxv16bf16.triscv_m4x2_i8_i8_5_2t(target("riscv_m4x2", i8, i8, 5, 2) %0, i64 1)
  ret <vscale x 16 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg3_nxv1bf16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv1bf16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg3_mask_nxv1bf16_triscv_mf4x3_i8_i8_1_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv1bf16_triscv_mf4x3_i8_i8_1_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x3", i8, i8, 1, 3) @llvm.riscv.vlsseg3.mask.triscv_mf4x3_i8_i8_1_3t.nxv1i1(target("riscv_mf4x3", i8, i8, 1, 3) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x3_i8_i8_1_3t(target("riscv_mf4x3", i8, i8, 1, 3) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg3_nxv2bf16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv2bf16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg3_mask_nxv2bf16_triscv_mf2x3_i8_i8_2_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv2bf16_triscv_mf2x3_i8_i8_2_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x3", i8, i8, 2, 3) @llvm.riscv.vlsseg3.mask.triscv_mf2x3_i8_i8_2_3t.nxv2i1(target("riscv_mf2x3", i8, i8, 2, 3) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x3_i8_i8_2_3t(target("riscv_mf2x3", i8, i8, 2, 3) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg3_nxv4bf16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv4bf16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg3_mask_nxv4bf16_triscv_m1x3_i8_i8_3_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv4bf16_triscv_m1x3_i8_i8_3_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x3", i8, i8, 3, 3) @llvm.riscv.vlsseg3.mask.triscv_m1x3_i8_i8_3_3t.nxv4i1(target("riscv_m1x3", i8, i8, 3, 3) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x3_i8_i8_3_3t(target("riscv_m1x3", i8, i8, 3, 3) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlsseg3_nxv8bf16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg3_nxv8bf16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlsseg3_mask_nxv8bf16_triscv_m2x3_i8_i8_4_3t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg3_mask_nxv8bf16_triscv_m2x3_i8_i8_4_3t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg3e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x3", i8, i8, 4, 3) @llvm.riscv.vlsseg3.mask.triscv_m2x3_i8_i8_4_3t.nxv8i1(target("riscv_m2x3", i8, i8, 4, 3) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x3_i8_i8_4_3t(target("riscv_m2x3", i8, i8, 4, 3) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg4_nxv1bf16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv1bf16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg4_mask_nxv1bf16_triscv_mf4x4_i8_i8_1_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv1bf16_triscv_mf4x4_i8_i8_1_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x4", i8, i8, 1, 4) @llvm.riscv.vlsseg4.mask.triscv_mf4x4_i8_i8_1_4t.nxv1i1(target("riscv_mf4x4", i8, i8, 1, 4) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x4_i8_i8_1_4t(target("riscv_mf4x4", i8, i8, 1, 4) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg4_nxv2bf16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv2bf16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg4_mask_nxv2bf16_triscv_mf2x4_i8_i8_2_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv2bf16_triscv_mf2x4_i8_i8_2_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x4", i8, i8, 2, 4) @llvm.riscv.vlsseg4.mask.triscv_mf2x4_i8_i8_2_4t.nxv2i1(target("riscv_mf2x4", i8, i8, 2, 4) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x4_i8_i8_2_4t(target("riscv_mf2x4", i8, i8, 2, 4) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg4_nxv4bf16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv4bf16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg4_mask_nxv4bf16_triscv_m1x4_i8_i8_3_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv4bf16_triscv_m1x4_i8_i8_3_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x4", i8, i8, 3, 4) @llvm.riscv.vlsseg4.mask.triscv_m1x4_i8_i8_3_4t.nxv4i1(target("riscv_m1x4", i8, i8, 3, 4) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x4_i8_i8_3_4t(target("riscv_m1x4", i8, i8, 3, 4) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 8 x bfloat> @test_vlsseg4_nxv8bf16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg4_nxv8bf16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}

define <vscale x 8 x bfloat> @test_vlsseg4_mask_nxv8bf16_triscv_m2x4_i8_i8_4_4t(ptr %base, i64 %offset, i64 %vl, <vscale x 8 x i1> %mask) {
; CHECK-LABEL: test_vlsseg4_mask_nxv8bf16_triscv_m2x4_i8_i8_4_4t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m2, ta, ma
; CHECK-NEXT:    vlsseg4e16.v v6, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m2x4", i8, i8, 4, 4) @llvm.riscv.vlsseg4.mask.triscv_m2x4_i8_i8_4_4t.nxv8i1(target("riscv_m2x4", i8, i8, 4, 4) undef, ptr %base, i64 %offset, <vscale x 8 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 8 x bfloat> @llvm.riscv.vector.extract.nxv8bf16.triscv_m2x4_i8_i8_4_4t(target("riscv_m2x4", i8, i8, 4, 4) %0, i64 1)
  ret <vscale x 8 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg5_nxv1bf16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv1bf16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg5_mask_nxv1bf16_triscv_mf4x5_i8_i8_1_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv1bf16_triscv_mf4x5_i8_i8_1_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x5", i8, i8, 1, 5) @llvm.riscv.vlsseg5.mask.triscv_mf4x5_i8_i8_1_5t.nxv1i1(target("riscv_mf4x5", i8, i8, 1, 5) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x5_i8_i8_1_5t(target("riscv_mf4x5", i8, i8, 1, 5) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg5_nxv2bf16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv2bf16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg5_mask_nxv2bf16_triscv_mf2x5_i8_i8_2_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv2bf16_triscv_mf2x5_i8_i8_2_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x5", i8, i8, 2, 5) @llvm.riscv.vlsseg5.mask.triscv_mf2x5_i8_i8_2_5t.nxv2i1(target("riscv_mf2x5", i8, i8, 2, 5) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x5_i8_i8_2_5t(target("riscv_mf2x5", i8, i8, 2, 5) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg5_nxv4bf16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg5_nxv4bf16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg5_mask_nxv4bf16_triscv_m1x5_i8_i8_3_5t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg5_mask_nxv4bf16_triscv_m1x5_i8_i8_3_5t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg5e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x5", i8, i8, 3, 5) @llvm.riscv.vlsseg5.mask.triscv_m1x5_i8_i8_3_5t.nxv4i1(target("riscv_m1x5", i8, i8, 3, 5) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x5_i8_i8_3_5t(target("riscv_m1x5", i8, i8, 3, 5) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg6_nxv1bf16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv1bf16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg6_mask_nxv1bf16_triscv_mf4x6_i8_i8_1_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv1bf16_triscv_mf4x6_i8_i8_1_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x6", i8, i8, 1, 6) @llvm.riscv.vlsseg6.mask.triscv_mf4x6_i8_i8_1_6t.nxv1i1(target("riscv_mf4x6", i8, i8, 1, 6) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x6_i8_i8_1_6t(target("riscv_mf4x6", i8, i8, 1, 6) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg6_nxv2bf16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv2bf16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg6_mask_nxv2bf16_triscv_mf2x6_i8_i8_2_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv2bf16_triscv_mf2x6_i8_i8_2_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x6", i8, i8, 2, 6) @llvm.riscv.vlsseg6.mask.triscv_mf2x6_i8_i8_2_6t.nxv2i1(target("riscv_mf2x6", i8, i8, 2, 6) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x6_i8_i8_2_6t(target("riscv_mf2x6", i8, i8, 2, 6) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg6_nxv4bf16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg6_nxv4bf16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg6_mask_nxv4bf16_triscv_m1x6_i8_i8_3_6t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg6_mask_nxv4bf16_triscv_m1x6_i8_i8_3_6t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg6e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x6", i8, i8, 3, 6) @llvm.riscv.vlsseg6.mask.triscv_m1x6_i8_i8_3_6t.nxv4i1(target("riscv_m1x6", i8, i8, 3, 6) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x6_i8_i8_3_6t(target("riscv_m1x6", i8, i8, 3, 6) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg7_nxv1bf16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv1bf16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg7_mask_nxv1bf16_triscv_mf4x7_i8_i8_1_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv1bf16_triscv_mf4x7_i8_i8_1_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x7", i8, i8, 1, 7) @llvm.riscv.vlsseg7.mask.triscv_mf4x7_i8_i8_1_7t.nxv1i1(target("riscv_mf4x7", i8, i8, 1, 7) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x7_i8_i8_1_7t(target("riscv_mf4x7", i8, i8, 1, 7) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg7_nxv2bf16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv2bf16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg7_mask_nxv2bf16_triscv_mf2x7_i8_i8_2_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv2bf16_triscv_mf2x7_i8_i8_2_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x7", i8, i8, 2, 7) @llvm.riscv.vlsseg7.mask.triscv_mf2x7_i8_i8_2_7t.nxv2i1(target("riscv_mf2x7", i8, i8, 2, 7) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x7_i8_i8_2_7t(target("riscv_mf2x7", i8, i8, 2, 7) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg7_nxv4bf16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg7_nxv4bf16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg7_mask_nxv4bf16_triscv_m1x7_i8_i8_3_7t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg7_mask_nxv4bf16_triscv_m1x7_i8_i8_3_7t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg7e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x7", i8, i8, 3, 7) @llvm.riscv.vlsseg7.mask.triscv_m1x7_i8_i8_3_7t.nxv4i1(target("riscv_m1x7", i8, i8, 3, 7) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x7_i8_i8_3_7t(target("riscv_m1x7", i8, i8, 3, 7) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


define <vscale x 1 x bfloat> @test_vlsseg8_nxv1bf16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv1bf16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}

define <vscale x 1 x bfloat> @test_vlsseg8_mask_nxv1bf16_triscv_mf4x8_i8_i8_1_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 1 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv1bf16_triscv_mf4x8_i8_i8_1_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf4, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf4x8", i8, i8, 1, 8) @llvm.riscv.vlsseg8.mask.triscv_mf4x8_i8_i8_1_8t.nxv1i1(target("riscv_mf4x8", i8, i8, 1, 8) undef, ptr %base, i64 %offset, <vscale x 1 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 1 x bfloat> @llvm.riscv.vector.extract.nxv1bf16.triscv_mf4x8_i8_i8_1_8t(target("riscv_mf4x8", i8, i8, 1, 8) %0, i64 1)
  ret <vscale x 1 x bfloat> %1
}


define <vscale x 2 x bfloat> @test_vlsseg8_nxv2bf16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv2bf16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}

define <vscale x 2 x bfloat> @test_vlsseg8_mask_nxv2bf16_triscv_mf2x8_i8_i8_2_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 2 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv2bf16_triscv_mf2x8_i8_i8_2_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, mf2, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_mf2x8", i8, i8, 2, 8) @llvm.riscv.vlsseg8.mask.triscv_mf2x8_i8_i8_2_8t.nxv2i1(target("riscv_mf2x8", i8, i8, 2, 8) undef, ptr %base, i64 %offset, <vscale x 2 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 2 x bfloat> @llvm.riscv.vector.extract.nxv2bf16.triscv_mf2x8_i8_i8_2_8t(target("riscv_mf2x8", i8, i8, 2, 8) %0, i64 1)
  ret <vscale x 2 x bfloat> %1
}


define <vscale x 4 x bfloat> @test_vlsseg8_nxv4bf16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl) {
; CHECK-LABEL: test_vlsseg8_nxv4bf16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, i64 %vl, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}

define <vscale x 4 x bfloat> @test_vlsseg8_mask_nxv4bf16_triscv_m1x8_i8_i8_3_8t(ptr %base, i64 %offset, i64 %vl, <vscale x 4 x i1> %mask) {
; CHECK-LABEL: test_vlsseg8_mask_nxv4bf16_triscv_m1x8_i8_i8_3_8t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a2, e16, m1, ta, ma
; CHECK-NEXT:    vlsseg8e16.v v7, (a0), a1, v0.t
; CHECK-NEXT:    ret
entry:
  %0 = tail call target("riscv_m1x8", i8, i8, 3, 8) @llvm.riscv.vlsseg8.mask.triscv_m1x8_i8_i8_3_8t.nxv4i1(target("riscv_m1x8", i8, i8, 3, 8) undef, ptr %base, i64 %offset, <vscale x 4 x i1> %mask, i64 %vl, i64 1, i64 4)
  %1 = call <vscale x 4 x bfloat> @llvm.riscv.vector.extract.nxv4bf16.triscv_m1x8_i8_i8_3_8t(target("riscv_m1x8", i8, i8, 3, 8) %0, i64 1)
  ret <vscale x 4 x bfloat> %1
}


; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=riscv64 -mattr=+f,+d < %s | FileCheck %s

define i1 @test_is_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fclass.d a0, fa0
; CHECK-NEXT:    andi a0, a0, 897
; CHECK-NEXT:    snez a0, a0
; CHECK-NEXT:    ret
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp ueq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fclass.d a0, fa0
; CHECK-NEXT:    andi a0, a0, 126
; CHECK-NEXT:    snez a0, a0
; CHECK-NEXT:    ret
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp one double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_inf(double %arg) {
; CHECK-LABEL: test_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fclass.d a0, fa0
; CHECK-NEXT:    andi a0, a0, 129
; CHECK-NEXT:    snez a0, a0
; CHECK-NEXT:    ret
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp oeq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf(double %arg) {
; CHECK-LABEL: test_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fclass.d a0, fa0
; CHECK-NEXT:    andi a0, a0, 894
; CHECK-NEXT:    snez a0, a0
; CHECK-NEXT:    ret
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp une double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a1, a1, 1
; CHECK-NEXT:    srli a1, a1, 1
; CHECK-NEXT:    lui a0, 32767
; CHECK-NEXT:    slli a0, a0, 36
; CHECK-NEXT:    addi a0, a0, -1
; CHECK-NEXT:    slt a0, a0, a1
; CHECK-NEXT:    ret
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp ueq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a1, a1, 1
; CHECK-NEXT:    srli a1, a1, 1
; CHECK-NEXT:    lui a0, 32767
; CHECK-NEXT:    slli a0, a0, 36
; CHECK-NEXT:    slt a0, a1, a0
; CHECK-NEXT:    ret
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp one fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a1, a1, 1
; CHECK-NEXT:    srli a1, a1, 1
; CHECK-NEXT:    lui a2, 32767
; CHECK-NEXT:    slli a2, a2, 36
; CHECK-NEXT:    xor a1, a1, a2
; CHECK-NEXT:    or a0, a0, a1
; CHECK-NEXT:    seqz a0, a0
; CHECK-NEXT:    ret
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp oeq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a1, a1, 1
; CHECK-NEXT:    srli a1, a1, 1
; CHECK-NEXT:    lui a2, 32767
; CHECK-NEXT:    slli a2, a2, 36
; CHECK-NEXT:    xor a1, a1, a2
; CHECK-NEXT:    or a0, a0, a1
; CHECK-NEXT:    snez a0, a0
; CHECK-NEXT:    ret
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp une fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

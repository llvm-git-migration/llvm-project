; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=sparc --fp-contract off < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32-FPC-OFF
; RUN: llc -mtriple=sparc --fp-contract on < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32-FPC-ON
; RUN: llc -mtriple=sparc --fp-contract fast < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32-FPC-FAST
; RUN: llc -mtriple=sparc64 --fp-contract off < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64-FPC-OFF
; RUN: llc -mtriple=sparc64 --fp-contract on < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64-FPC-ON
; RUN: llc -mtriple=sparc64 --fp-contract fast < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64-FPC-FAST

define float @fmuladd_intrinsic_f32(float %a, float %b, float %c) #0 {
; SOFT-FLOAT-32-FPC-OFF-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-32-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-32-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-OFF-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-32-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-32-FPC-ON-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-32-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-32-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-ON-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    ret
; SOFT-FLOAT-32-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-32-FPC-FAST-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-32-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-32-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-FAST-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-32-FPC-FAST-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-OFF-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-64-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-64-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-OFF-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-64-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-ON-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-64-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-64-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-ON-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    ret
; SOFT-FLOAT-64-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-FAST-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-64-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-64-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-FAST-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-64-FPC-FAST-NEXT:    restore %g0, %o0, %o0
    %result = call float @llvm.fmuladd.f32(float %a, float %b, float %c)
    ret float %result
}

define double @fmuladd_intrinsic_f64(double %a, double %b, double %c) #0 {
; SOFT-FLOAT-32-FPC-OFF-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-32-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-32-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-OFF-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-32-FPC-OFF-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-32-FPC-ON-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-32-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-32-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-ON-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-ON-NEXT:    ret
; SOFT-FLOAT-32-FPC-ON-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-32-FPC-FAST-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-32-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-32-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-FAST-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-32-FPC-FAST-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-64-FPC-OFF-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-64-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-64-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-OFF-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-64-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-ON-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-64-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-64-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-ON-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    ret
; SOFT-FLOAT-64-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-FAST-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-64-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-64-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-FAST-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-64-FPC-FAST-NEXT:    restore %g0, %o0, %o0
    %result = call double @llvm.fmuladd.f64(double %a, double %b, double %c)
    ret double %result
}

define float @fmuladd_contract_f32(float %a, float %b, float %c) #0 {
; SOFT-FLOAT-32-FPC-OFF-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-32-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-32-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-OFF-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-32-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-32-FPC-ON-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-32-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-32-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-ON-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    ret
; SOFT-FLOAT-32-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-32-FPC-FAST-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-32-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-32-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-FAST-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __mulsf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __addsf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i2, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-32-FPC-FAST-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-OFF-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-64-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-64-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-OFF-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-64-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-ON-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-64-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-64-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-ON-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    ret
; SOFT-FLOAT-64-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-FAST-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-64-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-64-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-FAST-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i0, 0, %o0
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __mulsf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i1, 0, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __addsf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    srl %i2, 0, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-64-FPC-FAST-NEXT:    restore %g0, %o0, %o0
    %product = fmul float %a, %b
    %result = fadd float %product, %c
    ret float %result
}

define double @fmuladd_contract_f64(double %a, double %b, double %c) #0 {
; SOFT-FLOAT-32-FPC-OFF-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-32-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-32-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-OFF-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-OFF-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-OFF-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-32-FPC-OFF-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-32-FPC-ON-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-32-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-32-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-ON-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-ON-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-ON-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-ON-NEXT:    ret
; SOFT-FLOAT-32-FPC-ON-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-32-FPC-FAST-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-32-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-32-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-32-FPC-FAST-NEXT:    save %sp, -96, %sp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-32-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i2, %o2
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __muldf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i3, %o3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i4, %o2
; SOFT-FLOAT-32-FPC-FAST-NEXT:    call __adddf3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %i5, %o3
; SOFT-FLOAT-32-FPC-FAST-NEXT:    mov %o0, %i0
; SOFT-FLOAT-32-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-32-FPC-FAST-NEXT:    restore %g0, %o1, %o1
;
; SOFT-FLOAT-64-FPC-OFF-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-64-FPC-OFF:         .cfi_startproc
; SOFT-FLOAT-64-FPC-OFF-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-OFF-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-OFF-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-OFF-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-OFF-NEXT:    ret
; SOFT-FLOAT-64-FPC-OFF-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-ON-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-64-FPC-ON:         .cfi_startproc
; SOFT-FLOAT-64-FPC-ON-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-ON-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-ON-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-ON-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-ON-NEXT:    ret
; SOFT-FLOAT-64-FPC-ON-NEXT:    restore %g0, %o0, %o0
;
; SOFT-FLOAT-64-FPC-FAST-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-64-FPC-FAST:         .cfi_startproc
; SOFT-FLOAT-64-FPC-FAST-NEXT:  ! %bb.0:
; SOFT-FLOAT-64-FPC-FAST-NEXT:    save %sp, -176, %sp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_def_cfa_register %fp
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_window_save
; SOFT-FLOAT-64-FPC-FAST-NEXT:    .cfi_register %o7, %i7
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i0, %o0
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __muldf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i1, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    call __adddf3
; SOFT-FLOAT-64-FPC-FAST-NEXT:    mov %i2, %o1
; SOFT-FLOAT-64-FPC-FAST-NEXT:    ret
; SOFT-FLOAT-64-FPC-FAST-NEXT:    restore %g0, %o0, %o0
    %product = fmul double %a, %b
    %result = fadd double %product, %c
    ret double %result
}

attributes #0 = { "use-soft-float"="true" }

declare float @llvm.fmuladd.f32(float %a, float %b, float %c)
declare double @llvm.fmuladd.f64(double %a, double %b, double %c)

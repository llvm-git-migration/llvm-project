; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=arm --fp-contract off < %s | FileCheck %s -check-prefix=SOFT-FLOAT-FPC-OFF
; RUN: llc -mtriple=arm --fp-contract on < %s | FileCheck %s -check-prefix=SOFT-FLOAT-FPC-ON
; RUN: llc -mtriple=arm --fp-contract fast < %s | FileCheck %s -check-prefix=SOFT-FLOAT-FPC-FAST
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp --fp-contract off < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP32-FPC-OFF
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp --fp-contract on < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP32-FPC-ON
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp --fp-contract fast < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP32-FPC-FAST
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp,+fp64 --fp-contract off < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP64-FPC-OFF
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp,+fp64 --fp-contract on < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP64-FPC-ON
; RUN: llc -mtriple=arm -mattr=+vfp4d16sp,+fp64 --fp-contract fast < %s | FileCheck %s -check-prefix=SOFT-FLOAT-VFP64-FPC-FAST

define float @fmuladd_intrinsic_f32(float %a, float %b, float %c) #0 {
; SOFT-FLOAT-FPC-OFF-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-ON-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-FAST-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-OFF-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP32-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-ON-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP32-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-FAST-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP32-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-OFF-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP64-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-ON-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP64-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-FAST-LABEL: fmuladd_intrinsic_f32:
; SOFT-FLOAT-VFP64-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov pc, lr
    %result = call float @llvm.fmuladd.f32(float %a, float %b, float %c)
    ret float %result
}

define double @fmuladd_intrinsic_f64(double %a, double %b, double %c) #0 {
; SOFT-FLOAT-FPC-OFF-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-ON-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-FAST-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-OFF-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP32-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-ON-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP32-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-FAST-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP32-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-OFF-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP64-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-ON-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP64-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-FAST-LABEL: fmuladd_intrinsic_f64:
; SOFT-FLOAT-VFP64-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov pc, lr
    %result = call double @llvm.fmuladd.f64(double %a, double %b, double %c)
    ret double %result
}

define float @fmuladd_contract_f32(float %a, float %b, float %c) #0 {
; SOFT-FLOAT-FPC-OFF-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-ON-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-FAST-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-OFF-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP32-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-ON-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP32-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-FAST-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP32-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-OFF-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP64-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-ON-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP64-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-FAST-LABEL: fmuladd_contract_f32:
; SOFT-FLOAT-VFP64-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    push {r4, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov r4, r2
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __mulsf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov r1, r4
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __addsf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    pop {r4, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov pc, lr
    %product = fmul float %a, %b
    %result = fadd float %product, %c
    ret float %result
}

define double @fmuladd_contract_f64(double %a, double %b, double %c) #0 {
; SOFT-FLOAT-FPC-OFF-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-ON-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-FPC-FAST-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-OFF-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP32-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-ON-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP32-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP32-FPC-FAST-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP32-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP32-FPC-FAST-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-OFF-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP64-FPC-OFF:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-OFF-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-ON-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP64-FPC-ON:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-ON-NEXT:    mov pc, lr
;
; SOFT-FLOAT-VFP64-FPC-FAST-LABEL: fmuladd_contract_f64:
; SOFT-FLOAT-VFP64-FPC-FAST:       @ %bb.0:
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    push {r11, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __muldf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    ldr r2, [sp, #8]
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    ldr r3, [sp, #12]
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    bl __adddf3
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    pop {r11, lr}
; SOFT-FLOAT-VFP64-FPC-FAST-NEXT:    mov pc, lr
    %product = fmul double %a, %b
    %result = fadd double %product, %c
    ret double %result
}

attributes #0 = { "use-soft-float"="true" }

declare float @llvm.fmuladd.f32(float %a, float %b, float %c)
declare double @llvm.fmuladd.f64(double %a, double %b, double %c)

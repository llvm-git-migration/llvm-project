; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=thumbv7-apple-darwin %s -o - | FileCheck %s

define i8 @scmp_8_8(i8 %x, i8 %y) nounwind {
; CHECK-LABEL: scmp_8_8:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    sxtb r2, r0
; CHECK-NEXT:    movs r0, #0
; CHECK-NEXT:    sxtb r1, r1
; CHECK-NEXT:    cmp r2, r1
; CHECK-NEXT:    it gt
; CHECK-NEXT:    movgt r0, #1
; CHECK-NEXT:    cmp r0, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne r0, #1
; CHECK-NEXT:    cmp r2, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r0, #-1
; CHECK-NEXT:    bx lr
  %1 = call i8 @llvm.scmp(i8 %x, i8 %y)
  ret i8 %1
}

define i8 @scmp_8_16(i16 %x, i16 %y) nounwind {
; CHECK-LABEL: scmp_8_16:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    sxth r2, r0
; CHECK-NEXT:    movs r0, #0
; CHECK-NEXT:    sxth r1, r1
; CHECK-NEXT:    cmp r2, r1
; CHECK-NEXT:    it gt
; CHECK-NEXT:    movgt r0, #1
; CHECK-NEXT:    cmp r0, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne r0, #1
; CHECK-NEXT:    cmp r2, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r0, #-1
; CHECK-NEXT:    bx lr
  %1 = call i8 @llvm.scmp(i16 %x, i16 %y)
  ret i8 %1
}

define i8 @scmp_8_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: scmp_8_32:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    movs r2, #0
; CHECK-NEXT:    cmp r0, r1
; CHECK-NEXT:    it gt
; CHECK-NEXT:    movgt r2, #1
; CHECK-NEXT:    cmp r2, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne r2, #1
; CHECK-NEXT:    cmp r0, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r2, #-1
; CHECK-NEXT:    mov r0, r2
; CHECK-NEXT:    bx lr
  %1 = call i8 @llvm.scmp(i32 %x, i32 %y)
  ret i8 %1
}

define i8 @scmp_8_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_8_64:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs.w r12, r2, r0
; CHECK-NEXT:    mov.w r9, #0
; CHECK-NEXT:    sbcs.w r12, r3, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #1
; CHECK-NEXT:    cmp.w r9, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne.w r9, #1
; CHECK-NEXT:    subs r0, r0, r2
; CHECK-NEXT:    sbcs.w r0, r1, r3
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #-1
; CHECK-NEXT:    mov r0, r9
; CHECK-NEXT:    bx lr
  %1 = call i8 @llvm.scmp(i64 %x, i64 %y)
  ret i8 %1
}

define i8 @scmp_8_128(i128 %x, i128 %y) nounwind {
; CHECK-LABEL: scmp_8_128:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    push {r4, r5, r6, lr}
; CHECK-NEXT:    ldrd r12, lr, [sp, #16]
; CHECK-NEXT:    mov.w r9, #0
; CHECK-NEXT:    ldrd r4, r5, [sp, #24]
; CHECK-NEXT:    subs.w r6, r12, r0
; CHECK-NEXT:    sbcs.w r6, lr, r1
; CHECK-NEXT:    sbcs.w r6, r4, r2
; CHECK-NEXT:    sbcs.w r6, r5, r3
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #1
; CHECK-NEXT:    cmp.w r9, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne.w r9, #1
; CHECK-NEXT:    subs.w r0, r0, r12
; CHECK-NEXT:    sbcs.w r0, r1, lr
; CHECK-NEXT:    sbcs.w r0, r2, r4
; CHECK-NEXT:    sbcs.w r0, r3, r5
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #-1
; CHECK-NEXT:    mov r0, r9
; CHECK-NEXT:    pop {r4, r5, r6, pc}
  %1 = call i8 @llvm.scmp(i128 %x, i128 %y)
  ret i8 %1
}

define i32 @scmp_32_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: scmp_32_32:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    movs r2, #0
; CHECK-NEXT:    cmp r0, r1
; CHECK-NEXT:    it gt
; CHECK-NEXT:    movgt r2, #1
; CHECK-NEXT:    cmp r2, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne r2, #1
; CHECK-NEXT:    cmp r0, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r2, #-1
; CHECK-NEXT:    mov r0, r2
; CHECK-NEXT:    bx lr
  %1 = call i32 @llvm.scmp(i32 %x, i32 %y)
  ret i32 %1
}

define i32 @scmp_32_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_32_64:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs.w r12, r2, r0
; CHECK-NEXT:    mov.w r9, #0
; CHECK-NEXT:    sbcs.w r12, r3, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #1
; CHECK-NEXT:    cmp.w r9, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne.w r9, #1
; CHECK-NEXT:    subs r0, r0, r2
; CHECK-NEXT:    sbcs.w r0, r1, r3
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #-1
; CHECK-NEXT:    mov r0, r9
; CHECK-NEXT:    bx lr
  %1 = call i32 @llvm.scmp(i64 %x, i64 %y)
  ret i32 %1
}

define i64 @scmp_64_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_64_64:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs.w r12, r0, r2
; CHECK-NEXT:    mov.w r9, #0
; CHECK-NEXT:    sbcs.w r12, r1, r3
; CHECK-NEXT:    mov.w r12, #0
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r12, #1
; CHECK-NEXT:    subs r0, r2, r0
; CHECK-NEXT:    sbcs.w r0, r3, r1
; CHECK-NEXT:    it lt
; CHECK-NEXT:    movlt.w r9, #1
; CHECK-NEXT:    cmp.w r9, #0
; CHECK-NEXT:    it ne
; CHECK-NEXT:    movne.w r9, #1
; CHECK-NEXT:    cmp.w r12, #0
; CHECK-NEXT:    itt ne
; CHECK-NEXT:    movne.w r9, #-1
; CHECK-NEXT:    movne.w r12, #-1
; CHECK-NEXT:    mov r0, r9
; CHECK-NEXT:    mov r1, r12
; CHECK-NEXT:    bx lr
  %1 = call i64 @llvm.scmp(i64 %x, i64 %y)
  ret i64 %1
}

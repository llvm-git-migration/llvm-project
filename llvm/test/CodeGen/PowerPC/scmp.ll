; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=powerpc64-unknown-unknown %s -o - | FileCheck %s

define i8 @scmp_8_8(i8 %x, i8 %y) nounwind {
; CHECK-LABEL: scmp_8_8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extsb 4, 4
; CHECK-NEXT:    extsb 5, 3
; CHECK-NEXT:    cmpw 5, 4
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    sub 3, 4, 5
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.scmp(i8 %x, i8 %y)
  ret i8 %1
}

define i8 @scmp_8_16(i16 %x, i16 %y) nounwind {
; CHECK-LABEL: scmp_8_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    extsh 4, 4
; CHECK-NEXT:    extsh 5, 3
; CHECK-NEXT:    cmpw 5, 4
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    sub 3, 4, 5
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.scmp(i16 %x, i16 %y)
  ret i8 %1
}

define i8 @scmp_8_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: scmp_8_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpw 3, 4
; CHECK-NEXT:    li 5, -1
; CHECK-NEXT:    blt 0, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    extsw 4, 4
; CHECK-NEXT:    extsw 3, 3
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 5, 3, 1, 63
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    mr 3, 5
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.scmp(i32 %x, i32 %y)
  ret i8 %1
}

define i8 @scmp_8_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_8_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    sradi 6, 4, 63
; CHECK-NEXT:    rldicl 7, 5, 1, 63
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subc 8, 4, 5
; CHECK-NEXT:    cmpd 5, 4
; CHECK-NEXT:    adde 4, 7, 6
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    xori 3, 4, 1
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.scmp(i64 %x, i64 %y)
  ret i8 %1
}

define i8 @scmp_8_128(i128 %x, i128 %y) nounwind {
; CHECK-LABEL: scmp_8_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpld 3, 5
; CHECK-NEXT:    cmpd 5, 3, 5
; CHECK-NEXT:    li 7, 0
; CHECK-NEXT:    crandc 21, 21, 2
; CHECK-NEXT:    cmpld 1, 4, 6
; CHECK-NEXT:    bc 12, 21, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    crand 21, 2, 5
; CHECK-NEXT:    bc 4, 21, .LBB4_3
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    li 7, 1
; CHECK-NEXT:  .LBB4_3:
; CHECK-NEXT:    crandc 20, 20, 2
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    bclr 12, 20, 0
; CHECK-NEXT:  # %bb.4:
; CHECK-NEXT:    crand 20, 2, 4
; CHECK-NEXT:    bclr 12, 20, 0
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    mr 3, 7
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.scmp(i128 %x, i128 %y)
  ret i8 %1
}

define i32 @scmp_32_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: scmp_32_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpw 3, 4
; CHECK-NEXT:    li 5, -1
; CHECK-NEXT:    blt 0, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    extsw 4, 4
; CHECK-NEXT:    extsw 3, 3
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 5, 3, 1, 63
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    mr 3, 5
; CHECK-NEXT:    blr
  %1 = call i32 @llvm.scmp(i32 %x, i32 %y)
  ret i32 %1
}

define i32 @scmp_32_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_32_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    sradi 6, 4, 63
; CHECK-NEXT:    rldicl 7, 5, 1, 63
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subc 8, 4, 5
; CHECK-NEXT:    cmpd 5, 4
; CHECK-NEXT:    adde 4, 7, 6
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    xori 3, 4, 1
; CHECK-NEXT:    blr
  %1 = call i32 @llvm.scmp(i64 %x, i64 %y)
  ret i32 %1
}

define i64 @scmp_64_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: scmp_64_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    sradi 6, 4, 63
; CHECK-NEXT:    rldicl 7, 5, 1, 63
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subc 8, 4, 5
; CHECK-NEXT:    cmpd 5, 4
; CHECK-NEXT:    adde 4, 7, 6
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    xori 3, 4, 1
; CHECK-NEXT:    blr
  %1 = call i64 @llvm.scmp(i64 %x, i64 %y)
  ret i64 %1
}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:      --code-model=small < %s | FileCheck %s --check-prefixes=DEFAULT_SMALL64
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:      --code-model=large < %s | FileCheck %s --check-prefixes=DEFAULT_LARGE64
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:      -mattr=+aix-shared-library-tls-model-heuristic --code-model=small < %s | FileCheck %s --check-prefixes=HEURISTIC_SMALL64
; RUN: llc -verify-machineinstrs -mcpu=pwr7 -mattr=-altivec -mtriple powerpc64-ibm-aix-xcoff \
; RUN:      -mattr=+aix-shared-library-tls-model-heuristic --code-model=large < %s | FileCheck %s --check-prefixes=HEURISTIC_LARGE64

@VarTLSIE1 = internal thread_local(initialexec) global i32 42, align 4
@VarTLSIE2 = internal thread_local(initialexec) global i32 0, align 4
@VarTLSLD1 = internal thread_local(localdynamic) global i32 42, align 4
@VarTLSLD2 = internal thread_local(localdynamic) global i32 0, align 4

; Heuristic to tune function level TLS model settings:
; Use initial-exec when we have a function accessing only one TLS variable.
; Use local-dynamic when we have a function accessing a handful or more different TLS variables.

define i32 @Single_IE_USE_IE() {
; DEFAULT_SMALL64-LABEL: Single_IE_USE_IE:
; DEFAULT_SMALL64:       # %bb.0: # %entry
; DEFAULT_SMALL64-NEXT:    ld 3, L..C0(2) # target-flags(ppc-tprel) @VarTLSIE1
; DEFAULT_SMALL64-NEXT:    lwzx 3, 13, 3
; DEFAULT_SMALL64-NEXT:    blr
;
; DEFAULT_LARGE64-LABEL: Single_IE_USE_IE:
; DEFAULT_LARGE64:       # %bb.0: # %entry
; DEFAULT_LARGE64-NEXT:    addis 3, L..C0@u(2)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C0@l(3)
; DEFAULT_LARGE64-NEXT:    lwzx 3, 13, 3
; DEFAULT_LARGE64-NEXT:    blr
;
; HEURISTIC_SMALL64-LABEL: Single_IE_USE_IE:
; HEURISTIC_SMALL64:       # %bb.0: # %entry
; HEURISTIC_SMALL64-NEXT:    ld 3, L..C0(2) # target-flags(ppc-tprel) @VarTLSIE1
; HEURISTIC_SMALL64-NEXT:    lwzx 3, 13, 3
; HEURISTIC_SMALL64-NEXT:    blr
;
; HEURISTIC_LARGE64-LABEL: Single_IE_USE_IE:
; HEURISTIC_LARGE64:       # %bb.0: # %entry
; HEURISTIC_LARGE64-NEXT:    addis 3, L..C0@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 3, L..C0@l(3)
; HEURISTIC_LARGE64-NEXT:    lwzx 3, 13, 3
; HEURISTIC_LARGE64-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSIE1)
  %1 = load i32, ptr %0, align 4
  ret i32 %1
}

define i32 @Single_LD_USE_IE() {
; DEFAULT_SMALL64-LABEL: Single_LD_USE_IE:
; DEFAULT_SMALL64:       # %bb.0: # %entry
; DEFAULT_SMALL64-NEXT:    mflr 0
; DEFAULT_SMALL64-NEXT:    stdu 1, -48(1)
; DEFAULT_SMALL64-NEXT:    ld 3, L..C1(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; DEFAULT_SMALL64-NEXT:    std 0, 64(1)
; DEFAULT_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_SMALL64-NEXT:    ld 5, L..C2(2) # target-flags(ppc-tlsld) @VarTLSLD1
; DEFAULT_SMALL64-NEXT:    lwzx 4, 3, 5
; DEFAULT_SMALL64-NEXT:    addi 6, 4, 42
; DEFAULT_SMALL64-NEXT:    stwx 6, 3, 5
; DEFAULT_SMALL64-NEXT:    mr 3, 4
; DEFAULT_SMALL64-NEXT:    addi 1, 1, 48
; DEFAULT_SMALL64-NEXT:    ld 0, 16(1)
; DEFAULT_SMALL64-NEXT:    mtlr 0
; DEFAULT_SMALL64-NEXT:    blr
;
; DEFAULT_LARGE64-LABEL: Single_LD_USE_IE:
; DEFAULT_LARGE64:       # %bb.0: # %entry
; DEFAULT_LARGE64-NEXT:    mflr 0
; DEFAULT_LARGE64-NEXT:    stdu 1, -48(1)
; DEFAULT_LARGE64-NEXT:    addis 3, L..C1@u(2)
; DEFAULT_LARGE64-NEXT:    addis 6, L..C2@u(2)
; DEFAULT_LARGE64-NEXT:    std 0, 64(1)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C1@l(3)
; DEFAULT_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_LARGE64-NEXT:    ld 5, L..C2@l(6)
; DEFAULT_LARGE64-NEXT:    lwzx 4, 3, 5
; DEFAULT_LARGE64-NEXT:    addi 6, 4, 42
; DEFAULT_LARGE64-NEXT:    stwx 6, 3, 5
; DEFAULT_LARGE64-NEXT:    mr 3, 4
; DEFAULT_LARGE64-NEXT:    addi 1, 1, 48
; DEFAULT_LARGE64-NEXT:    ld 0, 16(1)
; DEFAULT_LARGE64-NEXT:    mtlr 0
; DEFAULT_LARGE64-NEXT:    blr
;
; HEURISTIC_SMALL64-LABEL: Single_LD_USE_IE:
; HEURISTIC_SMALL64:       # %bb.0: # %entry
; HEURISTIC_SMALL64-NEXT:    ld 4, L..C1(2) # target-flags(ppc-tprel) @VarTLSLD1
; HEURISTIC_SMALL64-NEXT:    lwzx 3, 13, 4
; HEURISTIC_SMALL64-NEXT:    addi 5, 3, 42
; HEURISTIC_SMALL64-NEXT:    stwx 5, 13, 4
; HEURISTIC_SMALL64-NEXT:    blr
;
; HEURISTIC_LARGE64-LABEL: Single_LD_USE_IE:
; HEURISTIC_LARGE64:       # %bb.0: # %entry
; HEURISTIC_LARGE64-NEXT:    addis 3, L..C1@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 4, L..C1@l(3)
; HEURISTIC_LARGE64-NEXT:    lwzx 3, 13, 4
; HEURISTIC_LARGE64-NEXT:    addi 5, 3, 42
; HEURISTIC_LARGE64-NEXT:    stwx 5, 13, 4
; HEURISTIC_LARGE64-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSLD1)
  %1 = load i32, ptr %0, align 4
  %2 = add nsw i32 42, %1
  store i32 %2, ptr %0, align 4
  ret i32 %1
}

define i32 @Multiple_IE_USE_LD() {
; DEFAULT_SMALL64-LABEL: Multiple_IE_USE_LD:
; DEFAULT_SMALL64:       # %bb.0: # %entry
; DEFAULT_SMALL64-NEXT:    ld 3, L..C0(2) # target-flags(ppc-tprel) @VarTLSIE1
; DEFAULT_SMALL64-NEXT:    ld 4, L..C3(2) # target-flags(ppc-tprel) @VarTLSIE2
; DEFAULT_SMALL64-NEXT:    lwzx 3, 13, 3
; DEFAULT_SMALL64-NEXT:    lwzx 4, 13, 4
; DEFAULT_SMALL64-NEXT:    add 3, 3, 4
; DEFAULT_SMALL64-NEXT:    blr
;
; DEFAULT_LARGE64-LABEL: Multiple_IE_USE_LD:
; DEFAULT_LARGE64:       # %bb.0: # %entry
; DEFAULT_LARGE64-NEXT:    addis 3, L..C0@u(2)
; DEFAULT_LARGE64-NEXT:    addis 4, L..C3@u(2)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C0@l(3)
; DEFAULT_LARGE64-NEXT:    ld 4, L..C3@l(4)
; DEFAULT_LARGE64-NEXT:    lwzx 3, 13, 3
; DEFAULT_LARGE64-NEXT:    lwzx 4, 13, 4
; DEFAULT_LARGE64-NEXT:    add 3, 3, 4
; DEFAULT_LARGE64-NEXT:    blr
;
; HEURISTIC_SMALL64-LABEL: Multiple_IE_USE_LD:
; HEURISTIC_SMALL64:       # %bb.0: # %entry
; HEURISTIC_SMALL64-NEXT:    mflr 0
; HEURISTIC_SMALL64-NEXT:    stdu 1, -48(1)
; HEURISTIC_SMALL64-NEXT:    ld 3, L..C2(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; HEURISTIC_SMALL64-NEXT:    std 0, 64(1)
; HEURISTIC_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_SMALL64-NEXT:    ld 4, L..C3(2) # target-flags(ppc-tlsld) @VarTLSIE1
; HEURISTIC_SMALL64-NEXT:    ld 5, L..C4(2) # target-flags(ppc-tlsld) @VarTLSIE2
; HEURISTIC_SMALL64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_SMALL64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_SMALL64-NEXT:    add 3, 4, 3
; HEURISTIC_SMALL64-NEXT:    addi 1, 1, 48
; HEURISTIC_SMALL64-NEXT:    ld 0, 16(1)
; HEURISTIC_SMALL64-NEXT:    mtlr 0
; HEURISTIC_SMALL64-NEXT:    blr
;
; HEURISTIC_LARGE64-LABEL: Multiple_IE_USE_LD:
; HEURISTIC_LARGE64:       # %bb.0: # %entry
; HEURISTIC_LARGE64-NEXT:    mflr 0
; HEURISTIC_LARGE64-NEXT:    stdu 1, -48(1)
; HEURISTIC_LARGE64-NEXT:    addis 3, L..C2@u(2)
; HEURISTIC_LARGE64-NEXT:    std 0, 64(1)
; HEURISTIC_LARGE64-NEXT:    addis 6, L..C3@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 3, L..C2@l(3)
; HEURISTIC_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_LARGE64-NEXT:    addis 5, L..C4@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 4, L..C3@l(6)
; HEURISTIC_LARGE64-NEXT:    ld 5, L..C4@l(5)
; HEURISTIC_LARGE64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_LARGE64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_LARGE64-NEXT:    add 3, 4, 3
; HEURISTIC_LARGE64-NEXT:    addi 1, 1, 48
; HEURISTIC_LARGE64-NEXT:    ld 0, 16(1)
; HEURISTIC_LARGE64-NEXT:    mtlr 0
; HEURISTIC_LARGE64-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSIE1)
  %1 = load i32, ptr %0, align 4
  %2 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSIE2)
  %3 = load i32, ptr %2, align 4
  %add = add nsw i32 %1, %3
  ret i32 %add
}

define i32 @Multiple_LD_USE_LD() {
; DEFAULT_SMALL64-LABEL: Multiple_LD_USE_LD:
; DEFAULT_SMALL64:       # %bb.0: # %entry
; DEFAULT_SMALL64-NEXT:    mflr 0
; DEFAULT_SMALL64-NEXT:    stdu 1, -48(1)
; DEFAULT_SMALL64-NEXT:    ld 3, L..C1(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; DEFAULT_SMALL64-NEXT:    std 0, 64(1)
; DEFAULT_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_SMALL64-NEXT:    ld 4, L..C2(2) # target-flags(ppc-tlsld) @VarTLSLD1
; DEFAULT_SMALL64-NEXT:    ld 5, L..C4(2) # target-flags(ppc-tlsld) @VarTLSLD2
; DEFAULT_SMALL64-NEXT:    lwzx 4, 3, 4
; DEFAULT_SMALL64-NEXT:    lwzx 3, 3, 5
; DEFAULT_SMALL64-NEXT:    add 3, 4, 3
; DEFAULT_SMALL64-NEXT:    addi 1, 1, 48
; DEFAULT_SMALL64-NEXT:    ld 0, 16(1)
; DEFAULT_SMALL64-NEXT:    mtlr 0
; DEFAULT_SMALL64-NEXT:    blr
;
; DEFAULT_LARGE64-LABEL: Multiple_LD_USE_LD:
; DEFAULT_LARGE64:       # %bb.0: # %entry
; DEFAULT_LARGE64-NEXT:    mflr 0
; DEFAULT_LARGE64-NEXT:    stdu 1, -48(1)
; DEFAULT_LARGE64-NEXT:    addis 3, L..C1@u(2)
; DEFAULT_LARGE64-NEXT:    std 0, 64(1)
; DEFAULT_LARGE64-NEXT:    addis 6, L..C2@u(2)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C1@l(3)
; DEFAULT_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_LARGE64-NEXT:    addis 5, L..C4@u(2)
; DEFAULT_LARGE64-NEXT:    ld 4, L..C2@l(6)
; DEFAULT_LARGE64-NEXT:    ld 5, L..C4@l(5)
; DEFAULT_LARGE64-NEXT:    lwzx 4, 3, 4
; DEFAULT_LARGE64-NEXT:    lwzx 3, 3, 5
; DEFAULT_LARGE64-NEXT:    add 3, 4, 3
; DEFAULT_LARGE64-NEXT:    addi 1, 1, 48
; DEFAULT_LARGE64-NEXT:    ld 0, 16(1)
; DEFAULT_LARGE64-NEXT:    mtlr 0
; DEFAULT_LARGE64-NEXT:    blr
;
; HEURISTIC_SMALL64-LABEL: Multiple_LD_USE_LD:
; HEURISTIC_SMALL64:       # %bb.0: # %entry
; HEURISTIC_SMALL64-NEXT:    mflr 0
; HEURISTIC_SMALL64-NEXT:    stdu 1, -48(1)
; HEURISTIC_SMALL64-NEXT:    ld 3, L..C2(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; HEURISTIC_SMALL64-NEXT:    std 0, 64(1)
; HEURISTIC_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_SMALL64-NEXT:    ld 4, L..C5(2) # target-flags(ppc-tlsld) @VarTLSLD1
; HEURISTIC_SMALL64-NEXT:    ld 5, L..C6(2) # target-flags(ppc-tlsld) @VarTLSLD2
; HEURISTIC_SMALL64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_SMALL64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_SMALL64-NEXT:    add 3, 4, 3
; HEURISTIC_SMALL64-NEXT:    addi 1, 1, 48
; HEURISTIC_SMALL64-NEXT:    ld 0, 16(1)
; HEURISTIC_SMALL64-NEXT:    mtlr 0
; HEURISTIC_SMALL64-NEXT:    blr
;
; HEURISTIC_LARGE64-LABEL: Multiple_LD_USE_LD:
; HEURISTIC_LARGE64:       # %bb.0: # %entry
; HEURISTIC_LARGE64-NEXT:    mflr 0
; HEURISTIC_LARGE64-NEXT:    stdu 1, -48(1)
; HEURISTIC_LARGE64-NEXT:    addis 3, L..C2@u(2)
; HEURISTIC_LARGE64-NEXT:    std 0, 64(1)
; HEURISTIC_LARGE64-NEXT:    addis 6, L..C5@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 3, L..C2@l(3)
; HEURISTIC_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_LARGE64-NEXT:    addis 5, L..C6@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 4, L..C5@l(6)
; HEURISTIC_LARGE64-NEXT:    ld 5, L..C6@l(5)
; HEURISTIC_LARGE64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_LARGE64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_LARGE64-NEXT:    add 3, 4, 3
; HEURISTIC_LARGE64-NEXT:    addi 1, 1, 48
; HEURISTIC_LARGE64-NEXT:    ld 0, 16(1)
; HEURISTIC_LARGE64-NEXT:    mtlr 0
; HEURISTIC_LARGE64-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSLD1)
  %1 = load i32, ptr %0, align 4
  %2 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSLD2)
  %3 = load i32, ptr %2, align 4
  %add = add nsw i32 %1, %3
  ret i32 %add
}

define i32 @Multiple_MIX_USE_LD() {
; DEFAULT_SMALL64-LABEL: Multiple_MIX_USE_LD:
; DEFAULT_SMALL64:       # %bb.0: # %entry
; DEFAULT_SMALL64-NEXT:    mflr 0
; DEFAULT_SMALL64-NEXT:    stdu 1, -48(1)
; DEFAULT_SMALL64-NEXT:    ld 3, L..C0(2) # target-flags(ppc-tprel) @VarTLSIE1
; DEFAULT_SMALL64-NEXT:    std 0, 64(1)
; DEFAULT_SMALL64-NEXT:    lwzx 6, 13, 3
; DEFAULT_SMALL64-NEXT:    ld 3, L..C1(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; DEFAULT_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_SMALL64-NEXT:    ld 4, L..C2(2) # target-flags(ppc-tlsld) @VarTLSLD1
; DEFAULT_SMALL64-NEXT:    lwzx 3, 3, 4
; DEFAULT_SMALL64-NEXT:    add 3, 6, 3
; DEFAULT_SMALL64-NEXT:    addi 1, 1, 48
; DEFAULT_SMALL64-NEXT:    ld 0, 16(1)
; DEFAULT_SMALL64-NEXT:    mtlr 0
; DEFAULT_SMALL64-NEXT:    blr
;
; DEFAULT_LARGE64-LABEL: Multiple_MIX_USE_LD:
; DEFAULT_LARGE64:       # %bb.0: # %entry
; DEFAULT_LARGE64-NEXT:    mflr 0
; DEFAULT_LARGE64-NEXT:    stdu 1, -48(1)
; DEFAULT_LARGE64-NEXT:    addis 3, L..C0@u(2)
; DEFAULT_LARGE64-NEXT:    std 0, 64(1)
; DEFAULT_LARGE64-NEXT:    addis 7, L..C2@u(2)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C0@l(3)
; DEFAULT_LARGE64-NEXT:    lwzx 6, 13, 3
; DEFAULT_LARGE64-NEXT:    addis 3, L..C1@u(2)
; DEFAULT_LARGE64-NEXT:    ld 3, L..C1@l(3)
; DEFAULT_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; DEFAULT_LARGE64-NEXT:    ld 4, L..C2@l(7)
; DEFAULT_LARGE64-NEXT:    lwzx 3, 3, 4
; DEFAULT_LARGE64-NEXT:    add 3, 6, 3
; DEFAULT_LARGE64-NEXT:    addi 1, 1, 48
; DEFAULT_LARGE64-NEXT:    ld 0, 16(1)
; DEFAULT_LARGE64-NEXT:    mtlr 0
; DEFAULT_LARGE64-NEXT:    blr
;
; HEURISTIC_SMALL64-LABEL: Multiple_MIX_USE_LD:
; HEURISTIC_SMALL64:       # %bb.0: # %entry
; HEURISTIC_SMALL64-NEXT:    mflr 0
; HEURISTIC_SMALL64-NEXT:    stdu 1, -48(1)
; HEURISTIC_SMALL64-NEXT:    ld 3, L..C2(2) # target-flags(ppc-tlsldm) @"_$TLSML"
; HEURISTIC_SMALL64-NEXT:    std 0, 64(1)
; HEURISTIC_SMALL64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_SMALL64-NEXT:    ld 4, L..C3(2) # target-flags(ppc-tlsld) @VarTLSIE1
; HEURISTIC_SMALL64-NEXT:    ld 5, L..C5(2) # target-flags(ppc-tlsld) @VarTLSLD1
; HEURISTIC_SMALL64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_SMALL64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_SMALL64-NEXT:    add 3, 4, 3
; HEURISTIC_SMALL64-NEXT:    addi 1, 1, 48
; HEURISTIC_SMALL64-NEXT:    ld 0, 16(1)
; HEURISTIC_SMALL64-NEXT:    mtlr 0
; HEURISTIC_SMALL64-NEXT:    blr
;
; HEURISTIC_LARGE64-LABEL: Multiple_MIX_USE_LD:
; HEURISTIC_LARGE64:       # %bb.0: # %entry
; HEURISTIC_LARGE64-NEXT:    mflr 0
; HEURISTIC_LARGE64-NEXT:    stdu 1, -48(1)
; HEURISTIC_LARGE64-NEXT:    addis 3, L..C2@u(2)
; HEURISTIC_LARGE64-NEXT:    std 0, 64(1)
; HEURISTIC_LARGE64-NEXT:    addis 6, L..C3@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 3, L..C2@l(3)
; HEURISTIC_LARGE64-NEXT:    bla .__tls_get_mod[PR]
; HEURISTIC_LARGE64-NEXT:    addis 5, L..C5@u(2)
; HEURISTIC_LARGE64-NEXT:    ld 4, L..C3@l(6)
; HEURISTIC_LARGE64-NEXT:    ld 5, L..C5@l(5)
; HEURISTIC_LARGE64-NEXT:    lwzx 4, 3, 4
; HEURISTIC_LARGE64-NEXT:    lwzx 3, 3, 5
; HEURISTIC_LARGE64-NEXT:    add 3, 4, 3
; HEURISTIC_LARGE64-NEXT:    addi 1, 1, 48
; HEURISTIC_LARGE64-NEXT:    ld 0, 16(1)
; HEURISTIC_LARGE64-NEXT:    mtlr 0
; HEURISTIC_LARGE64-NEXT:    blr
entry:
  %0 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSIE1)
  %1 = load i32, ptr %0, align 4
  %2 = tail call align 4 ptr @llvm.threadlocal.address.p0(ptr align 4 @VarTLSLD1)
  %3 = load i32, ptr %2, align 4
  %add = add nsw i32 %1, %3
  ret i32 %add
}

declare nonnull ptr @llvm.threadlocal.address.p0(ptr nonnull)

; DEFAULT_SMALL64-LABEL: .toc
; DEFAULT_SMALL64-LABEL: L..C0:
; DEFAULT_SMALL64-NEXT: .tc VarTLSIE1[TC],VarTLSIE1[TL]@ie
; DEFAULT_SMALL64-LABEL: L..C1:
; DEFAULT_SMALL64-NEXT: .tc _Renamed..5f24__TLSML[TC],_Renamed..5f24__TLSML[TC]@ml
; DEFAULT_SMALL64-NEXT: .rename _Renamed..5f24__TLSML[TC],"_$TLSML"
; DEFAULT_SMALL64-LABEL: L..C2:
; DEFAULT_SMALL64-NEXT: .tc VarTLSLD1[TC],VarTLSLD1[TL]@ld
; DEFAULT_SMALL64-LABEL: L..C3:
; DEFAULT_SMALL64-NEXT: .tc VarTLSIE2[TC],VarTLSIE2[UL]@ie
; DEFAULT_SMALL64-LABEL: L..C4:
; DEFAULT_SMALL64-NEXT: .tc VarTLSLD2[TC],VarTLSLD2[UL]@ld

; DEFAULT_LARGE64-LABEL: .toc
; DEFAULT_LARGE64-LABEL: L..C0:
; DEFAULT_LARGE64-NEXT: .tc VarTLSIE1[TE],VarTLSIE1[TL]@ie
; DEFAULT_LARGE64-LABEL: L..C1:
; DEFAULT_LARGE64-NEXT: .tc _Renamed..5f24__TLSML[TC],_Renamed..5f24__TLSML[TC]@ml
; DEFAULT_LARGE64-NEXT: .rename _Renamed..5f24__TLSML[TC],"_$TLSML"
; DEFAULT_LARGE64-LABEL: L..C2:
; DEFAULT_LARGE64-NEXT: .tc VarTLSLD1[TE],VarTLSLD1[TL]@ld
; DEFAULT_LARGE64-LABEL: L..C3:
; DEFAULT_LARGE64-NEXT: .tc VarTLSIE2[TE],VarTLSIE2[UL]@ie
; DEFAULT_LARGE64-LABEL: L..C4:
; DEFAULT_LARGE64-NEXT: .tc VarTLSLD2[TE],VarTLSLD2[UL]@ld

; HEURISTIC_SMALL64-LABEL: .toc
; HEURISTIC_SMALL64-LABEL: L..C0:
; HEURISTIC_SMALL64-NEXT: .tc VarTLSIE1[TC],VarTLSIE1[TL]@ie
; HEURISTIC_SMALL64-LABEL: L..C1:
; HEURISTIC_SMALL64-NEXT: .tc VarTLSLD1[TC],VarTLSLD1[TL]@ie
; HEURISTIC_SMALL64-LABEL: L..C2:
; HEURISTIC_SMALL64-NEXT: .tc _Renamed..5f24__TLSML[TC],_Renamed..5f24__TLSML[TC]@ml
; HEURISTIC_SMALL64-NEXT: .rename _Renamed..5f24__TLSML[TC],"_$TLSML"
; HEURISTIC_SMALL64-LABEL: L..C3:
; HEURISTIC_SMALL64-NEXT: .tc .VarTLSIE1[TC],VarTLSIE1[TL]@ld
; HEURISTIC_SMALL64-LABEL: L..C4:
; HEURISTIC_SMALL64-NEXT: .tc .VarTLSIE2[TC],VarTLSIE2[UL]@ld
; HEURISTIC_SMALL64-LABEL: L..C5:
; HEURISTIC_SMALL64-NEXT: .tc .VarTLSLD1[TC],VarTLSLD1[TL]@ld
; HEURISTIC_SMALL64-LABEL: L..C6:
; HEURISTIC_SMALL64-NEXT: .tc .VarTLSLD2[TC],VarTLSLD2[UL]@ld

; HEURISTIC_LARGE64-LABEL: .toc
; HEURISTIC_LARGE64-LABEL: L..C0:
; HEURISTIC_LARGE64-NEXT: .tc VarTLSIE1[TE],VarTLSIE1[TL]@ie
; HEURISTIC_LARGE64-LABEL: L..C1:
; HEURISTIC_LARGE64-NEXT: .tc VarTLSLD1[TE],VarTLSLD1[TL]@ie
; HEURISTIC_LARGE64-LABEL: L..C2:
; HEURISTIC_LARGE64-NEXT: .tc _Renamed..5f24__TLSML[TC],_Renamed..5f24__TLSML[TC]@ml
; HEURISTIC_LARGE64-NEXT: .rename _Renamed..5f24__TLSML[TC],"_$TLSML"
; HEURISTIC_LARGE64-LABEL: L..C3:
; HEURISTIC_LARGE64-NEXT: .tc .VarTLSIE1[TE],VarTLSIE1[TL]@ld
; HEURISTIC_LARGE64-LABEL: L..C4:
; HEURISTIC_LARGE64-NEXT: .tc .VarTLSIE2[TE],VarTLSIE2[UL]@ld
; HEURISTIC_LARGE64-LABEL: L..C5:
; HEURISTIC_LARGE64-NEXT: .tc .VarTLSLD1[TE],VarTLSLD1[TL]@ld
; HEURISTIC_LARGE64-LABEL: L..C6:
; HEURISTIC_LARGE64-NEXT: .tc .VarTLSLD2[TE],VarTLSLD2[UL]@ld

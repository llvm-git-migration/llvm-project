; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=pwr9 -mattr=+altivec -verify-machineinstrs --vec-extabi \
; RUN:   -mtriple=powerpc-unknown-aix < %s  | FileCheck %s --check-prefix 32BIT

; RUN: llc -mcpu=pwr9 -mattr=+altivec -verify-machineinstrs --vec-extabi \
; RUN:   -mtriple=powerpc64-unknown-aix < %s | FileCheck %s --check-prefix 64BIT

@_ZTIi = external constant i8*

; Function Attrs: uwtable mustprogress
define dso_local signext i32 @_Z5test2iPPKc(i32 signext %argc, i8** nocapture readnone %argv) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
; 32BIT-LABEL: _Z5test2iPPKc:
; 32BIT:       # %bb.0: # %entry
; 32BIT-NEXT:    mflr 0
; 32BIT-NEXT:    stwu 1, -464(1)
; 32BIT-NEXT:    stw 0, 472(1)
; 32BIT-NEXT:    stw 30, 320(1) # 4-byte Folded Spill
; 32BIT-NEXT:    li 30, 0
; 32BIT-NEXT:    stxv 52, 64(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stxv 53, 80(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 31, 324(1) # 4-byte Folded Spill
; 32BIT-NEXT:    mr 31, 3
; 32BIT-NEXT:    stw 14, 256(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 54, 96(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 15, 260(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 55, 112(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 16, 264(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 56, 128(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 17, 268(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stw 18, 272(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 57, 144(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 19, 276(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 58, 160(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 20, 280(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 59, 176(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 21, 284(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stw 22, 288(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 60, 192(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 23, 292(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 61, 208(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 24, 296(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 62, 224(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 25, 300(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stw 26, 304(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stxv 63, 240(1) # 16-byte Folded Spill
; 32BIT-NEXT:    stw 27, 308(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stw 28, 312(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stw 29, 316(1) # 4-byte Folded Spill
; 32BIT-NEXT:    stfd 15, 328(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 16, 336(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 17, 344(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 18, 352(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 19, 360(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 20, 368(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 21, 376(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 22, 384(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 23, 392(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 24, 400(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 25, 408(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 26, 416(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 27, 424(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 28, 432(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 29, 440(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 30, 448(1) # 8-byte Folded Spill
; 32BIT-NEXT:    stfd 31, 456(1) # 8-byte Folded Spill
; 32BIT-NEXT:    #APP
; 32BIT-NEXT:    nop
; 32BIT-NEXT:    #NO_APP
; 32BIT-NEXT:  L..tmp0:
; 32BIT-NEXT:    bl ._Z4testi[PR]
; 32BIT-NEXT:    nop
; 32BIT-NEXT:  L..tmp1:
; 32BIT-NEXT:  L..BB0_1: # %return
; 32BIT-NEXT:    lxv 63, 240(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 62, 224(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 61, 208(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 60, 192(1) # 16-byte Folded Reload
; 32BIT-NEXT:    mr 3, 30
; 32BIT-NEXT:    lxv 59, 176(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 58, 160(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 57, 144(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 56, 128(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 55, 112(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 54, 96(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 53, 80(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lxv 52, 64(1) # 16-byte Folded Reload
; 32BIT-NEXT:    lfd 31, 456(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 30, 448(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 29, 440(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 28, 432(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 31, 324(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 30, 320(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 29, 316(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 27, 424(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 28, 312(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 27, 308(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 26, 304(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 26, 416(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 25, 300(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 24, 296(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 23, 292(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 25, 408(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 22, 288(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 21, 284(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 20, 280(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 24, 400(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 19, 276(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 18, 272(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 17, 268(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 23, 392(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lwz 16, 264(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 15, 260(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lwz 14, 256(1) # 4-byte Folded Reload
; 32BIT-NEXT:    lfd 22, 384(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 21, 376(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 20, 368(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 19, 360(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 18, 352(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 17, 344(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 16, 336(1) # 8-byte Folded Reload
; 32BIT-NEXT:    lfd 15, 328(1) # 8-byte Folded Reload
; 32BIT-NEXT:    addi 1, 1, 464
; 32BIT-NEXT:    lwz 0, 8(1)
; 32BIT-NEXT:    mtlr 0
; 32BIT-NEXT:    blr
; 32BIT-NEXT:  L..BB0_2: # %lpad
; 32BIT-NEXT:  L..tmp2:
; 32BIT-NEXT:    bl .__cxa_begin_catch[PR]
; 32BIT-NEXT:    nop
; 32BIT-NEXT:    lwz 3, 0(3)
; 32BIT-NEXT:    add 30, 3, 31
; 32BIT-NEXT:    bl .__cxa_end_catch[PR]
; 32BIT-NEXT:    nop
; 32BIT-NEXT:    b L..BB0_1
;
; 64BIT-LABEL: _Z5test2iPPKc:
; 64BIT:       # %bb.0: # %entry
; 64BIT-NEXT:    mflr 0
; 64BIT-NEXT:    stdu 1, -592(1)
; 64BIT-NEXT:    std 0, 608(1)
; 64BIT-NEXT:    std 30, 440(1) # 8-byte Folded Spill
; 64BIT-NEXT:    li 30, 0
; 64BIT-NEXT:    stxv 52, 112(1) # 16-byte Folded Spill
; 64BIT-NEXT:    stxv 53, 128(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 31, 448(1) # 8-byte Folded Spill
; 64BIT-NEXT:    mr 31, 3
; 64BIT-NEXT:    std 14, 312(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 54, 144(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 15, 320(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 55, 160(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 16, 328(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 56, 176(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 17, 336(1) # 8-byte Folded Spill
; 64BIT-NEXT:    std 18, 344(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 57, 192(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 19, 352(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 58, 208(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 20, 360(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 59, 224(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 21, 368(1) # 8-byte Folded Spill
; 64BIT-NEXT:    std 22, 376(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 60, 240(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 23, 384(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 61, 256(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 24, 392(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 62, 272(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 25, 400(1) # 8-byte Folded Spill
; 64BIT-NEXT:    std 26, 408(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stxv 63, 288(1) # 16-byte Folded Spill
; 64BIT-NEXT:    std 27, 416(1) # 8-byte Folded Spill
; 64BIT-NEXT:    std 28, 424(1) # 8-byte Folded Spill
; 64BIT-NEXT:    std 29, 432(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 15, 456(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 16, 464(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 17, 472(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 18, 480(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 19, 488(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 20, 496(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 21, 504(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 22, 512(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 23, 520(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 24, 528(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 25, 536(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 26, 544(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 27, 552(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 28, 560(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 29, 568(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 30, 576(1) # 8-byte Folded Spill
; 64BIT-NEXT:    stfd 31, 584(1) # 8-byte Folded Spill
; 64BIT-NEXT:    #APP
; 64BIT-NEXT:    nop
; 64BIT-NEXT:    #NO_APP
; 64BIT-NEXT:  L..tmp0:
; 64BIT-NEXT:    bl ._Z4testi[PR]
; 64BIT-NEXT:    nop
; 64BIT-NEXT:  L..tmp1:
; 64BIT-NEXT:  L..BB0_1: # %return
; 64BIT-NEXT:    lxv 63, 288(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 62, 272(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 61, 256(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 60, 240(1) # 16-byte Folded Reload
; 64BIT-NEXT:    extsw 3, 30
; 64BIT-NEXT:    lxv 59, 224(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 58, 208(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 57, 192(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 56, 176(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 55, 160(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 54, 144(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 53, 128(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lxv 52, 112(1) # 16-byte Folded Reload
; 64BIT-NEXT:    lfd 31, 584(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 30, 576(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 29, 568(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 28, 560(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 31, 448(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 30, 440(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 29, 432(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 27, 552(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 28, 424(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 27, 416(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 26, 408(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 26, 544(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 25, 400(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 24, 392(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 23, 384(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 25, 536(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 22, 376(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 21, 368(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 20, 360(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 24, 528(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 19, 352(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 18, 344(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 17, 336(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 23, 520(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 16, 328(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 15, 320(1) # 8-byte Folded Reload
; 64BIT-NEXT:    ld 14, 312(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 22, 512(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 21, 504(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 20, 496(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 19, 488(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 18, 480(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 17, 472(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 16, 464(1) # 8-byte Folded Reload
; 64BIT-NEXT:    lfd 15, 456(1) # 8-byte Folded Reload
; 64BIT-NEXT:    addi 1, 1, 592
; 64BIT-NEXT:    ld 0, 16(1)
; 64BIT-NEXT:    mtlr 0
; 64BIT-NEXT:    blr
; 64BIT-NEXT:  L..BB0_2: # %lpad
; 64BIT-NEXT:  L..tmp2:
; 64BIT-NEXT:    bl .__cxa_begin_catch[PR]
; 64BIT-NEXT:    nop
; 64BIT-NEXT:    lwz 3, 0(3)
; 64BIT-NEXT:    add 30, 3, 31
; 64BIT-NEXT:    bl .__cxa_end_catch[PR]
; 64BIT-NEXT:    nop
; 64BIT-NEXT:    b L..BB0_1
entry:
  tail call void asm sideeffect "nop", "~{r14},~{f15},~{v20}"()
  %call = invoke signext i32 @_Z4testi(i32 signext %argc)
          to label %return unwind label %lpad

lpad:                                             ; preds = %entry
  %0 = landingpad { i8*, i32 }
          catch i8* bitcast (i8** @_ZTIi to i8*)
  %1 = extractvalue { i8*, i32 } %0, 1
  %2 = tail call i32 @llvm.eh.typeid.for(i8* bitcast (i8** @_ZTIi to i8*)) #3
  %matches = icmp eq i32 %1, %2
  br i1 %matches, label %catch, label %eh.resume

catch:                                            ; preds = %lpad
  %3 = extractvalue { i8*, i32 } %0, 0
  %4 = tail call i8* @__cxa_begin_catch(i8* %3) #3
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %add = add nsw i32 %6, %argc
  tail call void @__cxa_end_catch()
  br label %return

return:                                           ; preds = %entry, %catch
  %retval.0 = phi i32 [ %add, %catch ], [ 0, %entry ]
  ret i32 %retval.0

eh.resume:                                        ; preds = %lpad
  resume { i8*, i32 } %0
}

declare signext i32 @_Z4testi(i32 signext) local_unnamed_addr

declare i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind readnone
declare i32 @llvm.eh.typeid.for(i8*)

declare i8* @__cxa_begin_catch(i8*) local_unnamed_addr

declare void @__cxa_end_catch() local_unnamed_addr

attributes #0 = { uwtable }

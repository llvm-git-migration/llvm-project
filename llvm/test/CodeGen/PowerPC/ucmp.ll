; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=powerpc64-unknown-unknown %s -o - | FileCheck %s

define i8 @ucmp_8_8(i8 %x, i8 %y) nounwind {
; CHECK-LABEL: ucmp_8_8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrlwi 5, 4, 24
; CHECK-NEXT:    clrlwi 6, 3, 24
; CHECK-NEXT:    cmplw 6, 5
; CHECK-NEXT:    blt 0, .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    clrldi 4, 4, 56
; CHECK-NEXT:    clrldi 3, 3, 56
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    rldic 3, 3, 0, 32
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.ucmp(i8 %x, i8 %y)
  ret i8 %1
}

define i8 @ucmp_8_16(i16 %x, i16 %y) nounwind {
; CHECK-LABEL: ucmp_8_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrlwi 5, 4, 16
; CHECK-NEXT:    clrlwi 6, 3, 16
; CHECK-NEXT:    cmplw 6, 5
; CHECK-NEXT:    blt 0, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    clrldi 4, 4, 48
; CHECK-NEXT:    clrldi 3, 3, 48
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    rldic 3, 3, 0, 32
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.ucmp(i16 %x, i16 %y)
  ret i8 %1
}

define i8 @ucmp_8_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: ucmp_8_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmplw 3, 4
; CHECK-NEXT:    blt 0, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    clrldi 4, 4, 32
; CHECK-NEXT:    clrldi 3, 3, 32
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    rldic 3, 3, 0, 32
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.ucmp(i32 %x, i32 %y)
  ret i8 %1
}

define i8 @ucmp_8_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: ucmp_8_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    cmpld 5, 4
; CHECK-NEXT:    subc 5, 4, 5
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subfe 4, 4, 4
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    neg 3, 4
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.ucmp(i64 %x, i64 %y)
  ret i8 %1
}

define i8 @ucmp_8_128(i128 %x, i128 %y) nounwind {
; CHECK-LABEL: ucmp_8_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmpld 3, 5
; CHECK-NEXT:    li 7, 0
; CHECK-NEXT:    crandc 20, 1, 2
; CHECK-NEXT:    cmpld 1, 4, 6
; CHECK-NEXT:    bc 12, 20, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    crand 20, 2, 5
; CHECK-NEXT:    bc 4, 20, .LBB4_3
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    li 7, 1
; CHECK-NEXT:  .LBB4_3:
; CHECK-NEXT:    crandc 20, 0, 2
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    bclr 12, 20, 0
; CHECK-NEXT:  # %bb.4:
; CHECK-NEXT:    crand 20, 2, 4
; CHECK-NEXT:    bclr 12, 20, 0
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    mr 3, 7
; CHECK-NEXT:    blr
  %1 = call i8 @llvm.ucmp(i128 %x, i128 %y)
  ret i8 %1
}

define i32 @ucmp_32_32(i32 %x, i32 %y) nounwind {
; CHECK-LABEL: ucmp_32_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cmplw 3, 4
; CHECK-NEXT:    blt 0, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    clrldi 4, 4, 32
; CHECK-NEXT:    clrldi 3, 3, 32
; CHECK-NEXT:    sub 3, 4, 3
; CHECK-NEXT:    rldicl 3, 3, 1, 63
; CHECK-NEXT:    blr
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    rldic 3, 3, 0, 32
; CHECK-NEXT:    blr
  %1 = call i32 @llvm.ucmp(i32 %x, i32 %y)
  ret i32 %1
}

define i32 @ucmp_32_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: ucmp_32_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    cmpld 5, 4
; CHECK-NEXT:    subc 5, 4, 5
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subfe 4, 4, 4
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    neg 3, 4
; CHECK-NEXT:    blr
  %1 = call i32 @llvm.ucmp(i64 %x, i64 %y)
  ret i32 %1
}

define i64 @ucmp_64_64(i64 %x, i64 %y) nounwind {
; CHECK-LABEL: ucmp_64_64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mr 5, 3
; CHECK-NEXT:    cmpld 5, 4
; CHECK-NEXT:    subc 5, 4, 5
; CHECK-NEXT:    li 3, -1
; CHECK-NEXT:    subfe 4, 4, 4
; CHECK-NEXT:    bltlr 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    neg 3, 4
; CHECK-NEXT:    blr
  %1 = call i64 @llvm.ucmp(i64 %x, i64 %y)
  ret i64 %1
}

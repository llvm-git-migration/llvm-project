; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=mips < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32
; RUN: llc -mtriple=mips -mcpu mips32r2 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32R2
; RUN: llc -mtriple=mips64 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64
; RUN: llc -mtriple=mips64 -mcpu mips64r2 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64R2

define float @fma_f32(float %a, float %b, float %c) "use-soft-float"="true" {
; SOFT-FLOAT-32-LABEL: fma_f32:
; SOFT-FLOAT-32:       # %bb.0:
; SOFT-FLOAT-32-NEXT:    addiu $sp, $sp, -24
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 24
; SOFT-FLOAT-32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32-NEXT:    sw $16, 16($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32-NEXT:    .cfi_offset 31, -4
; SOFT-FLOAT-32-NEXT:    .cfi_offset 16, -8
; SOFT-FLOAT-32-NEXT:    jal __mulsf3
; SOFT-FLOAT-32-NEXT:    move $16, $6
; SOFT-FLOAT-32-NEXT:    move $4, $2
; SOFT-FLOAT-32-NEXT:    jal __addsf3
; SOFT-FLOAT-32-NEXT:    move $5, $16
; SOFT-FLOAT-32-NEXT:    lw $16, 16($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32-NEXT:    jr $ra
; SOFT-FLOAT-32-NEXT:    addiu $sp, $sp, 24
;
; SOFT-FLOAT-32R2-LABEL: fma_f32:
; SOFT-FLOAT-32R2:       # %bb.0:
; SOFT-FLOAT-32R2-NEXT:    addiu $sp, $sp, -24
; SOFT-FLOAT-32R2-NEXT:    .cfi_def_cfa_offset 24
; SOFT-FLOAT-32R2-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32R2-NEXT:    sw $16, 16($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32R2-NEXT:    .cfi_offset 31, -4
; SOFT-FLOAT-32R2-NEXT:    .cfi_offset 16, -8
; SOFT-FLOAT-32R2-NEXT:    jal __mulsf3
; SOFT-FLOAT-32R2-NEXT:    move $16, $6
; SOFT-FLOAT-32R2-NEXT:    move $4, $2
; SOFT-FLOAT-32R2-NEXT:    jal __addsf3
; SOFT-FLOAT-32R2-NEXT:    move $5, $16
; SOFT-FLOAT-32R2-NEXT:    lw $16, 16($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32R2-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32R2-NEXT:    jr $ra
; SOFT-FLOAT-32R2-NEXT:    addiu $sp, $sp, 24
;
; SOFT-FLOAT-64-LABEL: fma_f32:
; SOFT-FLOAT-64:       # %bb.0:
; SOFT-FLOAT-64-NEXT:    daddiu $sp, $sp, -16
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64-NEXT:    sd $16, 0($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64-NEXT:    .cfi_offset 31, -8
; SOFT-FLOAT-64-NEXT:    .cfi_offset 16, -16
; SOFT-FLOAT-64-NEXT:    move $16, $6
; SOFT-FLOAT-64-NEXT:    sll $4, $4, 0
; SOFT-FLOAT-64-NEXT:    jal __mulsf3
; SOFT-FLOAT-64-NEXT:    sll $5, $5, 0
; SOFT-FLOAT-64-NEXT:    sll $4, $2, 0
; SOFT-FLOAT-64-NEXT:    jal __addsf3
; SOFT-FLOAT-64-NEXT:    sll $5, $16, 0
; SOFT-FLOAT-64-NEXT:    ld $16, 0($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64-NEXT:    jr $ra
; SOFT-FLOAT-64-NEXT:    daddiu $sp, $sp, 16
;
; SOFT-FLOAT-64R2-LABEL: fma_f32:
; SOFT-FLOAT-64R2:       # %bb.0:
; SOFT-FLOAT-64R2-NEXT:    daddiu $sp, $sp, -16
; SOFT-FLOAT-64R2-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64R2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64R2-NEXT:    sd $16, 0($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64R2-NEXT:    .cfi_offset 31, -8
; SOFT-FLOAT-64R2-NEXT:    .cfi_offset 16, -16
; SOFT-FLOAT-64R2-NEXT:    move $16, $6
; SOFT-FLOAT-64R2-NEXT:    sll $4, $4, 0
; SOFT-FLOAT-64R2-NEXT:    jal __mulsf3
; SOFT-FLOAT-64R2-NEXT:    sll $5, $5, 0
; SOFT-FLOAT-64R2-NEXT:    sll $4, $2, 0
; SOFT-FLOAT-64R2-NEXT:    jal __addsf3
; SOFT-FLOAT-64R2-NEXT:    sll $5, $16, 0
; SOFT-FLOAT-64R2-NEXT:    ld $16, 0($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64R2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64R2-NEXT:    jr $ra
; SOFT-FLOAT-64R2-NEXT:    daddiu $sp, $sp, 16
    %1 = call float @llvm.fmuladd.f32(float %a, float %b, float %c)
	ret float %1
}

define double @fma_f64(double %a, double %b, double %c) "use-soft-float"="true" {
; SOFT-FLOAT-32-LABEL: fma_f64:
; SOFT-FLOAT-32:       # %bb.0:
; SOFT-FLOAT-32-NEXT:    addiu $sp, $sp, -24
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 24
; SOFT-FLOAT-32-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32-NEXT:    .cfi_offset 31, -4
; SOFT-FLOAT-32-NEXT:    jal __muldf3
; SOFT-FLOAT-32-NEXT:    nop
; SOFT-FLOAT-32-NEXT:    move $4, $2
; SOFT-FLOAT-32-NEXT:    lw $6, 40($sp)
; SOFT-FLOAT-32-NEXT:    lw $7, 44($sp)
; SOFT-FLOAT-32-NEXT:    jal __adddf3
; SOFT-FLOAT-32-NEXT:    move $5, $3
; SOFT-FLOAT-32-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32-NEXT:    jr $ra
; SOFT-FLOAT-32-NEXT:    addiu $sp, $sp, 24
;
; SOFT-FLOAT-32R2-LABEL: fma_f64:
; SOFT-FLOAT-32R2:       # %bb.0:
; SOFT-FLOAT-32R2-NEXT:    addiu $sp, $sp, -24
; SOFT-FLOAT-32R2-NEXT:    .cfi_def_cfa_offset 24
; SOFT-FLOAT-32R2-NEXT:    sw $ra, 20($sp) # 4-byte Folded Spill
; SOFT-FLOAT-32R2-NEXT:    .cfi_offset 31, -4
; SOFT-FLOAT-32R2-NEXT:    jal __muldf3
; SOFT-FLOAT-32R2-NEXT:    nop
; SOFT-FLOAT-32R2-NEXT:    move $4, $2
; SOFT-FLOAT-32R2-NEXT:    lw $6, 40($sp)
; SOFT-FLOAT-32R2-NEXT:    lw $7, 44($sp)
; SOFT-FLOAT-32R2-NEXT:    jal __adddf3
; SOFT-FLOAT-32R2-NEXT:    move $5, $3
; SOFT-FLOAT-32R2-NEXT:    lw $ra, 20($sp) # 4-byte Folded Reload
; SOFT-FLOAT-32R2-NEXT:    jr $ra
; SOFT-FLOAT-32R2-NEXT:    addiu $sp, $sp, 24
;
; SOFT-FLOAT-64-LABEL: fma_f64:
; SOFT-FLOAT-64:       # %bb.0:
; SOFT-FLOAT-64-NEXT:    daddiu $sp, $sp, -16
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64-NEXT:    sd $16, 0($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64-NEXT:    .cfi_offset 31, -8
; SOFT-FLOAT-64-NEXT:    .cfi_offset 16, -16
; SOFT-FLOAT-64-NEXT:    jal __muldf3
; SOFT-FLOAT-64-NEXT:    move $16, $6
; SOFT-FLOAT-64-NEXT:    move $4, $2
; SOFT-FLOAT-64-NEXT:    jal __adddf3
; SOFT-FLOAT-64-NEXT:    move $5, $16
; SOFT-FLOAT-64-NEXT:    ld $16, 0($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64-NEXT:    jr $ra
; SOFT-FLOAT-64-NEXT:    daddiu $sp, $sp, 16
;
; SOFT-FLOAT-64R2-LABEL: fma_f64:
; SOFT-FLOAT-64R2:       # %bb.0:
; SOFT-FLOAT-64R2-NEXT:    daddiu $sp, $sp, -16
; SOFT-FLOAT-64R2-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64R2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64R2-NEXT:    sd $16, 0($sp) # 8-byte Folded Spill
; SOFT-FLOAT-64R2-NEXT:    .cfi_offset 31, -8
; SOFT-FLOAT-64R2-NEXT:    .cfi_offset 16, -16
; SOFT-FLOAT-64R2-NEXT:    jal __muldf3
; SOFT-FLOAT-64R2-NEXT:    move $16, $6
; SOFT-FLOAT-64R2-NEXT:    move $4, $2
; SOFT-FLOAT-64R2-NEXT:    jal __adddf3
; SOFT-FLOAT-64R2-NEXT:    move $5, $16
; SOFT-FLOAT-64R2-NEXT:    ld $16, 0($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64R2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; SOFT-FLOAT-64R2-NEXT:    jr $ra
; SOFT-FLOAT-64R2-NEXT:    daddiu $sp, $sp, 16
    %1 = call double @llvm.fmuladd.f64(double %a, double %b, double %c)
	ret double %1
}

declare float @llvm.fmuladd.f32(float %a, float %b, float %c)
declare double @llvm.fmuladd.f64(double %a, double %b, double %c)

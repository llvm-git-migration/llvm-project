; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=s390x-linux-gnu -mcpu=z10 | FileCheck %s
;
; Tests for FP16 (Half).

; A function where everything is done in Half.
define void @fun0(ptr %Op0, ptr %Op1, ptr %Dst) {
; CHECK-LABEL: fun0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stmg %r12, %r15, 96(%r15)
; CHECK-NEXT:    .cfi_offset %r12, -64
; CHECK-NEXT:    .cfi_offset %r13, -56
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -168
; CHECK-NEXT:    .cfi_def_cfa_offset 328
; CHECK-NEXT:    std %f8, 160(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset %f8, -168
; CHECK-NEXT:    llgh %r2, 0(%r2)
; CHECK-NEXT:    lgr %r13, %r4
; CHECK-NEXT:    lgr %r12, %r3
; CHECK-NEXT:    brasl %r14, __gnu_h2f_ieee@PLT
; CHECK-NEXT:    llgh %r2, 0(%r12)
; CHECK-NEXT:    ler %f8, %f0
; CHECK-NEXT:    brasl %r14, __gnu_h2f_ieee@PLT
; CHECK-NEXT:    aebr %f0, %f8
; CHECK-NEXT:    brasl %r14, __gnu_f2h_ieee@PLT
; CHECK-NEXT:    sth %r2, 0(%r13)
; CHECK-NEXT:    ld %f8, 160(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    lmg %r12, %r15, 264(%r15)
; CHECK-NEXT:    br %r14
entry:
  %0 = load half, ptr %Op0, align 2
  %1 = load half, ptr %Op1, align 2
  %add = fadd half %0, %1
  store half %add, ptr %Dst, align 2
  ret void
}

; A function where Half values are loaded and extended to float and then
; operated on.
define void @fun1(ptr %Op0, ptr %Op1, ptr %Dst) {
; CHECK-LABEL: fun1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    stmg %r12, %r15, 96(%r15)
; CHECK-NEXT:    .cfi_offset %r12, -64
; CHECK-NEXT:    .cfi_offset %r13, -56
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -168
; CHECK-NEXT:    .cfi_def_cfa_offset 328
; CHECK-NEXT:    std %f8, 160(%r15) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset %f8, -168
; CHECK-NEXT:    llgh %r2, 0(%r2)
; CHECK-NEXT:    lgr %r13, %r4
; CHECK-NEXT:    lgr %r12, %r3
; CHECK-NEXT:    brasl %r14, __gnu_h2f_ieee@PLT
; CHECK-NEXT:    llgh %r2, 0(%r12)
; CHECK-NEXT:    ler %f8, %f0
; CHECK-NEXT:    brasl %r14, __gnu_h2f_ieee@PLT
; CHECK-NEXT:    aebr %f0, %f8
; CHECK-NEXT:    brasl %r14, __gnu_f2h_ieee@PLT
; CHECK-NEXT:    sth %r2, 0(%r13)
; CHECK-NEXT:    ld %f8, 160(%r15) # 8-byte Folded Reload
; CHECK-NEXT:    lmg %r12, %r15, 264(%r15)
; CHECK-NEXT:    br %r14
entry:
  %0 = load half, ptr %Op0, align 2
  %ext = fpext half %0 to float
  %1 = load half, ptr %Op1, align 2
  %ext1 = fpext half %1 to float
  %add = fadd float %ext, %ext1
  %res = fptrunc float %add to half
  store half %res, ptr %Dst, align 2
  ret void
}

; Test case with a Half incoming argument.
define zeroext i1 @fun2(half noundef %f) {
; CHECK-LABEL: fun2:
; CHECK:       # %bb.0: # %start
; CHECK-NEXT:    stmg %r14, %r15, 112(%r15)
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -160
; CHECK-NEXT:    .cfi_def_cfa_offset 320
; CHECK-NEXT:    brasl %r14, __gnu_f2h_ieee@PLT
; CHECK-NEXT:    brasl %r14, __gnu_h2f_ieee@PLT
; CHECK-NEXT:    larl %r1, .LCPI2_0
; CHECK-NEXT:    deb %f0, 0(%r1)
; CHECK-NEXT:    brasl %r14, __gnu_f2h_ieee@PLT
; CHECK-NEXT:    risbg %r2, %r2, 63, 191, 49
; CHECK-NEXT:    lmg %r14, %r15, 272(%r15)
; CHECK-NEXT:    br %r14
start:
  %self = fdiv half %f, 0xHC700
  %_4 = bitcast half %self to i16
  %_0 = icmp slt i16 %_4, 0
  ret i1 %_0
}

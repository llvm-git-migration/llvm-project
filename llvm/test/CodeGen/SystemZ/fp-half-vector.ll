; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=s390x-linux-gnu -mcpu=zEC12 -verify-machineinstrs \
; RUN:   | FileCheck %s --check-prefix=NOVEC
; RUN: llc < %s -mtriple=s390x-linux-gnu -mcpu=z16 -verify-machineinstrs \
; RUN:   | FileCheck %s  --check-prefix=VECTOR

; Add the <8 x half> argument with itself and return it.
define <8 x half> @fun0(<8 x half> %Op) {
; NOVEC-LABEL: fun0:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    stmg %r13, %r15, 104(%r15)
; NOVEC-NEXT:    .cfi_offset %r13, -56
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -224
; NOVEC-NEXT:    .cfi_def_cfa_offset 384
; NOVEC-NEXT:    std %f8, 216(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f9, 208(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f10, 200(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f11, 192(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f12, 184(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f13, 176(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f14, 168(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f15, 160(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    .cfi_offset %f8, -168
; NOVEC-NEXT:    .cfi_offset %f9, -176
; NOVEC-NEXT:    .cfi_offset %f10, -184
; NOVEC-NEXT:    .cfi_offset %f11, -192
; NOVEC-NEXT:    .cfi_offset %f12, -200
; NOVEC-NEXT:    .cfi_offset %f13, -208
; NOVEC-NEXT:    .cfi_offset %f14, -216
; NOVEC-NEXT:    .cfi_offset %f15, -224
; NOVEC-NEXT:    lh %r0, 414(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f15, %r0
; NOVEC-NEXT:    lh %r0, 406(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f12, %r0
; NOVEC-NEXT:    lh %r0, 398(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f9, %r0
; NOVEC-NEXT:    lh %r0, 390(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ler %f10, %f6
; NOVEC-NEXT:    ler %f11, %f4
; NOVEC-NEXT:    ler %f13, %f2
; NOVEC-NEXT:    ler %f14, %f0
; NOVEC-NEXT:    lgr %r13, %r2
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    # kill: def $f0h killed $f0h killed $f0d
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f8, %f0
; NOVEC-NEXT:    ler %f0, %f9
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f9, %f0
; NOVEC-NEXT:    ler %f0, %f12
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f12, %f0
; NOVEC-NEXT:    ler %f0, %f15
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f15, %f0
; NOVEC-NEXT:    ler %f0, %f14
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f14, %f0
; NOVEC-NEXT:    ler %f0, %f13
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f13, %f0
; NOVEC-NEXT:    ler %f0, %f11
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f11, %f0
; NOVEC-NEXT:    ler %f0, %f10
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    # kill: def $f0h killed $f0h def $f0d
; NOVEC-NEXT:    lgdr %r0, %f0
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 6(%r13)
; NOVEC-NEXT:    lgdr %r0, %f11
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 4(%r13)
; NOVEC-NEXT:    lgdr %r0, %f13
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 2(%r13)
; NOVEC-NEXT:    lgdr %r0, %f14
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 0(%r13)
; NOVEC-NEXT:    lgdr %r0, %f15
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 14(%r13)
; NOVEC-NEXT:    lgdr %r0, %f12
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 12(%r13)
; NOVEC-NEXT:    lgdr %r0, %f9
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 10(%r13)
; NOVEC-NEXT:    lgdr %r0, %f8
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 8(%r13)
; NOVEC-NEXT:    ld %f8, 216(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f9, 208(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f10, 200(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f11, 192(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f12, 184(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f13, 176(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f14, 168(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f15, 160(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    lmg %r13, %r15, 328(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun0:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    stmg %r13, %r15, 104(%r15)
; VECTOR-NEXT:    .cfi_offset %r13, -56
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -224
; VECTOR-NEXT:    .cfi_def_cfa_offset 384
; VECTOR-NEXT:    std %f8, 216(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f9, 208(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f10, 200(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f11, 192(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f12, 184(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f13, 176(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f14, 168(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f15, 160(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    .cfi_offset %f8, -168
; VECTOR-NEXT:    .cfi_offset %f9, -176
; VECTOR-NEXT:    .cfi_offset %f10, -184
; VECTOR-NEXT:    .cfi_offset %f11, -192
; VECTOR-NEXT:    .cfi_offset %f12, -200
; VECTOR-NEXT:    .cfi_offset %f13, -208
; VECTOR-NEXT:    .cfi_offset %f14, -216
; VECTOR-NEXT:    .cfi_offset %f15, -224
; VECTOR-NEXT:    lh %r0, 414(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v14, %r0, 0
; VECTOR-NEXT:    lh %r0, 406(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v12, %r0, 0
; VECTOR-NEXT:    lh %r0, 398(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v9, %r0, 0
; VECTOR-NEXT:    lh %r0, 390(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    ldr %f10, %f6
; VECTOR-NEXT:    ldr %f11, %f4
; VECTOR-NEXT:    ldr %f13, %f2
; VECTOR-NEXT:    lgr %r13, %r2
; VECTOR-NEXT:    ldr %f15, %f0
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    # kill: def $f0h killed $f0h killed $f0s
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f8, %f0
; VECTOR-NEXT:    ldr %f0, %f9
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f9, %f0
; VECTOR-NEXT:    ldr %f0, %f12
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f12, %f0
; VECTOR-NEXT:    ldr %f0, %f14
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f14, %f0
; VECTOR-NEXT:    ldr %f0, %f15
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f15, %f0
; VECTOR-NEXT:    ldr %f0, %f13
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f13, %f0
; VECTOR-NEXT:    ldr %f0, %f11
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f11, %f0
; VECTOR-NEXT:    ldr %f0, %f10
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    # kill: def $f0h killed $f0h def $f0s
; VECTOR-NEXT:    vlgvf %r0, %v0, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 6(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v11, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 4(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v13, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 2(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v15, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 0(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v14, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 14(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v12, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 12(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v9, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 10(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v8, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 8(%r13)
; VECTOR-NEXT:    ld %f8, 216(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f9, 208(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f10, 200(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f11, 192(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f12, 184(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f13, 176(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f14, 168(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f15, 160(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    lmg %r13, %r15, 328(%r15)
; VECTOR-NEXT:    br %r14
entry:
  %Res = fadd <8 x half> %Op, %Op
  ret <8 x half> %Res
}

; Same, but with partial vector values.
define <4 x half> @fun1(<4 x half> %Op) {
; NOVEC-LABEL: fun1:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    stmg %r14, %r15, 112(%r15)
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -192
; NOVEC-NEXT:    .cfi_def_cfa_offset 352
; NOVEC-NEXT:    std %f8, 184(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f9, 176(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f10, 168(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f11, 160(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    .cfi_offset %f8, -168
; NOVEC-NEXT:    .cfi_offset %f9, -176
; NOVEC-NEXT:    .cfi_offset %f10, -184
; NOVEC-NEXT:    .cfi_offset %f11, -192
; NOVEC-NEXT:    ler %f8, %f6
; NOVEC-NEXT:    ler %f9, %f4
; NOVEC-NEXT:    ler %f10, %f2
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f11, %f0
; NOVEC-NEXT:    ler %f0, %f10
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f10, %f0
; NOVEC-NEXT:    ler %f0, %f9
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f9, %f0
; NOVEC-NEXT:    ler %f0, %f8
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    aebr %f0, %f0
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f6, %f0
; NOVEC-NEXT:    ler %f0, %f11
; NOVEC-NEXT:    ler %f2, %f10
; NOVEC-NEXT:    ler %f4, %f9
; NOVEC-NEXT:    ld %f8, 184(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f9, 176(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f10, 168(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f11, 160(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    lmg %r14, %r15, 304(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun1:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    stmg %r14, %r15, 112(%r15)
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -192
; VECTOR-NEXT:    .cfi_def_cfa_offset 352
; VECTOR-NEXT:    std %f8, 184(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f9, 176(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f10, 168(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f11, 160(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    .cfi_offset %f8, -168
; VECTOR-NEXT:    .cfi_offset %f9, -176
; VECTOR-NEXT:    .cfi_offset %f10, -184
; VECTOR-NEXT:    .cfi_offset %f11, -192
; VECTOR-NEXT:    ldr %f8, %f6
; VECTOR-NEXT:    ldr %f9, %f4
; VECTOR-NEXT:    ldr %f10, %f2
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f11, %f0
; VECTOR-NEXT:    ldr %f0, %f10
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f10, %f0
; VECTOR-NEXT:    ldr %f0, %f9
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f9, %f0
; VECTOR-NEXT:    ldr %f0, %f8
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    aebr %f0, %f0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f6, %f0
; VECTOR-NEXT:    ldr %f0, %f11
; VECTOR-NEXT:    ldr %f2, %f10
; VECTOR-NEXT:    ldr %f4, %f9
; VECTOR-NEXT:    ld %f8, 184(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f9, 176(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f10, 168(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f11, 160(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    lmg %r14, %r15, 304(%r15)
; VECTOR-NEXT:    br %r14
entry:
  %Res = fadd <4 x half> %Op, %Op
  ret <4 x half> %Res
}

; Test a vector extension.
define <2 x half> @fun2(<2 x half> %Op) {
; NOVEC-LABEL: fun2:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    stmg %r14, %r15, 112(%r15)
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -184
; NOVEC-NEXT:    .cfi_def_cfa_offset 344
; NOVEC-NEXT:    std %f8, 176(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f9, 168(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f10, 160(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    .cfi_offset %f8, -168
; NOVEC-NEXT:    .cfi_offset %f9, -176
; NOVEC-NEXT:    .cfi_offset %f10, -184
; NOVEC-NEXT:    ler %f8, %f2
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    ldebr %f9, %f0
; NOVEC-NEXT:    ler %f0, %f8
; NOVEC-NEXT:    brasl %r14, __extendhfsf2@PLT
; NOVEC-NEXT:    adbr %f9, %f9
; NOVEC-NEXT:    ldebr %f10, %f0
; NOVEC-NEXT:    ledbr %f0, %f9
; NOVEC-NEXT:    adbr %f10, %f10
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f8, %f0
; NOVEC-NEXT:    ledbr %f0, %f10
; NOVEC-NEXT:    brasl %r14, __truncsfhf2@PLT
; NOVEC-NEXT:    ler %f2, %f0
; NOVEC-NEXT:    ler %f0, %f8
; NOVEC-NEXT:    ld %f8, 176(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f9, 168(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f10, 160(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    lmg %r14, %r15, 296(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun2:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    stmg %r14, %r15, 112(%r15)
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -184
; VECTOR-NEXT:    .cfi_def_cfa_offset 344
; VECTOR-NEXT:    std %f8, 176(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    .cfi_offset %f8, -168
; VECTOR-NEXT:    ldr %f8, %f0
; VECTOR-NEXT:    ldr %f0, %f2
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    ldebr %f0, %f0
; VECTOR-NEXT:    vst %v0, 160(%r15), 3 # 16-byte Folded Spill
; VECTOR-NEXT:    ldr %f0, %f8
; VECTOR-NEXT:    brasl %r14, __extendhfsf2@PLT
; VECTOR-NEXT:    ldebr %f0, %f0
; VECTOR-NEXT:    vl %v1, 160(%r15), 3 # 16-byte Folded Reload
; VECTOR-NEXT:    vmrhg %v0, %v0, %v1
; VECTOR-NEXT:    vfadb %v0, %v0, %v0
; VECTOR-NEXT:    vledb %v0, %v0, 0, 0
; VECTOR-NEXT:    vst %v0, 160(%r15), 3 # 16-byte Folded Spill
; VECTOR-NEXT:    # kill: def $f0s killed $f0s killed $v0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f8, %f0
; VECTOR-NEXT:    vl %v0, 160(%r15), 3 # 16-byte Folded Reload
; VECTOR-NEXT:    vrepf %v0, %v0, 2
; VECTOR-NEXT:    # kill: def $f0s killed $f0s killed $v0
; VECTOR-NEXT:    brasl %r14, __truncsfhf2@PLT
; VECTOR-NEXT:    ldr %f2, %f0
; VECTOR-NEXT:    ldr %f0, %f8
; VECTOR-NEXT:    ld %f8, 176(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    lmg %r14, %r15, 296(%r15)
; VECTOR-NEXT:    br %r14
entry:
  %E = fpext <2 x half> %Op to <2 x double>
  %Add = fadd <2 x double> %E, %E
  %Res = fptrunc <2 x double> %Add to <2 x half>
  ret <2 x half> %Res
}

; Load and store an <8 x half> vector.
define void @fun3(ptr %Src, ptr %Dst) {
; NOVEC-LABEL: fun3:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    lh %r0, 0(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    lh %r0, 2(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f1, %r0
; NOVEC-NEXT:    lh %r0, 4(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f2, %r0
; NOVEC-NEXT:    lh %r0, 6(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f3, %r0
; NOVEC-NEXT:    lh %r0, 8(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f4, %r0
; NOVEC-NEXT:    lh %r0, 10(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f5, %r0
; NOVEC-NEXT:    lh %r0, 12(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f6, %r0
; NOVEC-NEXT:    lh %r0, 14(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f7, %r0
; NOVEC-NEXT:    lgdr %r0, %f7
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 14(%r3)
; NOVEC-NEXT:    lgdr %r0, %f6
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 12(%r3)
; NOVEC-NEXT:    lgdr %r0, %f5
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 10(%r3)
; NOVEC-NEXT:    lgdr %r0, %f4
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 8(%r3)
; NOVEC-NEXT:    lgdr %r0, %f3
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 6(%r3)
; NOVEC-NEXT:    lgdr %r0, %f2
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 4(%r3)
; NOVEC-NEXT:    lgdr %r0, %f1
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 2(%r3)
; NOVEC-NEXT:    lgdr %r0, %f0
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 0(%r3)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun3:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    lh %r0, 0(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    lh %r0, 2(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v1, %r0, 0
; VECTOR-NEXT:    lh %r0, 4(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v2, %r0, 0
; VECTOR-NEXT:    lh %r0, 6(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v3, %r0, 0
; VECTOR-NEXT:    lh %r0, 8(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v4, %r0, 0
; VECTOR-NEXT:    lh %r0, 10(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v5, %r0, 0
; VECTOR-NEXT:    lh %r0, 12(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v6, %r0, 0
; VECTOR-NEXT:    lh %r0, 14(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v7, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v7, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 14(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v6, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 12(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v5, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 10(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v4, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 8(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v3, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 6(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v2, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 4(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v1, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 2(%r3)
; VECTOR-NEXT:    vlgvf %r0, %v0, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 0(%r3)
; VECTOR-NEXT:    br %r14
entry:
  %L = load <8 x half>, ptr %Src
  store <8 x half> %L, ptr %Dst
  ret void
}

; Call a function with <8 x half> argument and return values.
declare <8 x half> @foo(<8 x half>)
define void @fun4(ptr %Src, ptr %Dst) {
; NOVEC-LABEL: fun4:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    stmg %r13, %r15, 104(%r15)
; NOVEC-NEXT:    .cfi_offset %r13, -56
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -208
; NOVEC-NEXT:    .cfi_def_cfa_offset 368
; NOVEC-NEXT:    lh %r0, 0(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    lh %r0, 2(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    # kill: def $f0h killed $f0h killed $f0d
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f2, %r0
; NOVEC-NEXT:    # kill: def $f2h killed $f2h killed $f2d
; NOVEC-NEXT:    lh %r0, 4(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f4, %r0
; NOVEC-NEXT:    # kill: def $f4h killed $f4h killed $f4d
; NOVEC-NEXT:    lh %r0, 6(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f6, %r0
; NOVEC-NEXT:    # kill: def $f6h killed $f6h killed $f6d
; NOVEC-NEXT:    lh %r0, 8(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f1, %r0
; NOVEC-NEXT:    lh %r0, 10(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f3, %r0
; NOVEC-NEXT:    lh %r0, 12(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f5, %r0
; NOVEC-NEXT:    lh %r0, 14(%r2)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f7, %r0
; NOVEC-NEXT:    lgdr %r0, %f7
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 190(%r15)
; NOVEC-NEXT:    lgdr %r0, %f5
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 182(%r15)
; NOVEC-NEXT:    lgdr %r0, %f3
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 174(%r15)
; NOVEC-NEXT:    lgdr %r0, %f1
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    la %r2, 192(%r15)
; NOVEC-NEXT:    lgr %r13, %r3
; NOVEC-NEXT:    sth %r0, 166(%r15)
; NOVEC-NEXT:    brasl %r14, foo@PLT
; NOVEC-NEXT:    lh %r0, 192(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    lh %r0, 194(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f1, %r0
; NOVEC-NEXT:    lh %r0, 196(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f2, %r0
; NOVEC-NEXT:    lh %r0, 198(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f3, %r0
; NOVEC-NEXT:    lh %r0, 200(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f4, %r0
; NOVEC-NEXT:    lh %r0, 202(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f5, %r0
; NOVEC-NEXT:    lh %r0, 204(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f6, %r0
; NOVEC-NEXT:    lh %r0, 206(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f7, %r0
; NOVEC-NEXT:    lgdr %r0, %f7
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 14(%r13)
; NOVEC-NEXT:    lgdr %r0, %f6
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 12(%r13)
; NOVEC-NEXT:    lgdr %r0, %f5
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 10(%r13)
; NOVEC-NEXT:    lgdr %r0, %f4
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 8(%r13)
; NOVEC-NEXT:    lgdr %r0, %f3
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 6(%r13)
; NOVEC-NEXT:    lgdr %r0, %f2
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 4(%r13)
; NOVEC-NEXT:    lgdr %r0, %f1
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 2(%r13)
; NOVEC-NEXT:    lgdr %r0, %f0
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 0(%r13)
; NOVEC-NEXT:    lmg %r13, %r15, 312(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun4:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    stmg %r13, %r15, 104(%r15)
; VECTOR-NEXT:    .cfi_offset %r13, -56
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -208
; VECTOR-NEXT:    .cfi_def_cfa_offset 368
; VECTOR-NEXT:    lh %r0, 0(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    lh %r0, 2(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v2, %r0, 0
; VECTOR-NEXT:    lh %r0, 4(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v4, %r0, 0
; VECTOR-NEXT:    lh %r0, 6(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v6, %r0, 0
; VECTOR-NEXT:    lh %r0, 8(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v1, %r0, 0
; VECTOR-NEXT:    lh %r0, 10(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v3, %r0, 0
; VECTOR-NEXT:    lh %r0, 12(%r2)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v5, %r0, 0
; VECTOR-NEXT:    lh %r0, 14(%r2)
; VECTOR-NEXT:    # kill: def $f0h killed $f0h killed $f0s
; VECTOR-NEXT:    # kill: def $f2h killed $f2h killed $f2s
; VECTOR-NEXT:    # kill: def $f4h killed $f4h killed $f4s
; VECTOR-NEXT:    # kill: def $f6h killed $f6h killed $f6s
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v7, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v7, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 190(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v5, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 182(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v3, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 174(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v1, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 166(%r15)
; VECTOR-NEXT:    la %r2, 192(%r15)
; VECTOR-NEXT:    lgr %r13, %r3
; VECTOR-NEXT:    brasl %r14, foo@PLT
; VECTOR-NEXT:    lh %r0, 192(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    lh %r0, 194(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v1, %r0, 0
; VECTOR-NEXT:    lh %r0, 196(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v2, %r0, 0
; VECTOR-NEXT:    lh %r0, 198(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v3, %r0, 0
; VECTOR-NEXT:    lh %r0, 200(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v4, %r0, 0
; VECTOR-NEXT:    lh %r0, 202(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v5, %r0, 0
; VECTOR-NEXT:    lh %r0, 204(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v6, %r0, 0
; VECTOR-NEXT:    lh %r0, 206(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v7, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v7, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 14(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v6, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 12(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v5, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 10(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v4, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 8(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v3, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 6(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v2, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 4(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v1, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 2(%r13)
; VECTOR-NEXT:    vlgvf %r0, %v0, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 0(%r13)
; VECTOR-NEXT:    lmg %r13, %r15, 312(%r15)
; VECTOR-NEXT:    br %r14
entry:
  %arg = load <8 x half>, ptr %Src
  %Res = call <8 x half> @foo(<8 x half> %arg)
  store <8 x half> %Res, ptr %Dst
  ret void
}

; Receive and pass argument fully on stack.
declare void @foo2(<4 x half> %dummy, <8 x half> %Arg5)
define void @fun5(<4 x half> %dummy, <8 x half> %Arg5) {
; NOVEC-LABEL: fun5:
; NOVEC:       # %bb.0:
; NOVEC-NEXT:    stmg %r14, %r15, 112(%r15)
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -256
; NOVEC-NEXT:    .cfi_def_cfa_offset 416
; NOVEC-NEXT:    std %f8, 248(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f9, 240(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f10, 232(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    std %f11, 224(%r15) # 8-byte Folded Spill
; NOVEC-NEXT:    .cfi_offset %f8, -168
; NOVEC-NEXT:    .cfi_offset %f9, -176
; NOVEC-NEXT:    .cfi_offset %f10, -184
; NOVEC-NEXT:    .cfi_offset %f11, -192
; NOVEC-NEXT:    lh %r0, 422(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f1, %r0
; NOVEC-NEXT:    lh %r0, 430(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f3, %r0
; NOVEC-NEXT:    lh %r0, 438(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f5, %r0
; NOVEC-NEXT:    lh %r0, 446(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f7, %r0
; NOVEC-NEXT:    lh %r0, 454(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f8, %r0
; NOVEC-NEXT:    lh %r0, 462(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f9, %r0
; NOVEC-NEXT:    lh %r0, 470(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f10, %r0
; NOVEC-NEXT:    lh %r0, 478(%r15)
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f11, %r0
; NOVEC-NEXT:    lgdr %r0, %f11
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 222(%r15)
; NOVEC-NEXT:    lgdr %r0, %f10
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 214(%r15)
; NOVEC-NEXT:    lgdr %r0, %f9
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 206(%r15)
; NOVEC-NEXT:    lgdr %r0, %f8
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 198(%r15)
; NOVEC-NEXT:    lgdr %r0, %f7
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 190(%r15)
; NOVEC-NEXT:    lgdr %r0, %f5
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 182(%r15)
; NOVEC-NEXT:    lgdr %r0, %f3
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 174(%r15)
; NOVEC-NEXT:    lgdr %r0, %f1
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 166(%r15)
; NOVEC-NEXT:    brasl %r14, foo2@PLT
; NOVEC-NEXT:    ld %f8, 248(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f9, 240(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f10, 232(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    ld %f11, 224(%r15) # 8-byte Folded Reload
; NOVEC-NEXT:    lmg %r14, %r15, 368(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun5:
; VECTOR:       # %bb.0:
; VECTOR-NEXT:    stmg %r14, %r15, 112(%r15)
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -256
; VECTOR-NEXT:    .cfi_def_cfa_offset 416
; VECTOR-NEXT:    std %f8, 248(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f9, 240(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f10, 232(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    std %f11, 224(%r15) # 8-byte Folded Spill
; VECTOR-NEXT:    .cfi_offset %f8, -168
; VECTOR-NEXT:    .cfi_offset %f9, -176
; VECTOR-NEXT:    .cfi_offset %f10, -184
; VECTOR-NEXT:    .cfi_offset %f11, -192
; VECTOR-NEXT:    lh %r0, 422(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v1, %r0, 0
; VECTOR-NEXT:    lh %r0, 430(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v3, %r0, 0
; VECTOR-NEXT:    lh %r0, 438(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v5, %r0, 0
; VECTOR-NEXT:    lh %r0, 446(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v7, %r0, 0
; VECTOR-NEXT:    lh %r0, 454(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v8, %r0, 0
; VECTOR-NEXT:    lh %r0, 462(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v9, %r0, 0
; VECTOR-NEXT:    lh %r0, 470(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v10, %r0, 0
; VECTOR-NEXT:    lh %r0, 478(%r15)
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v11, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v11, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 222(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v10, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 214(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v9, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 206(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v8, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 198(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v7, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 190(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v5, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 182(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v3, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 174(%r15)
; VECTOR-NEXT:    vlgvf %r0, %v1, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 166(%r15)
; VECTOR-NEXT:    brasl %r14, foo2@PLT
; VECTOR-NEXT:    ld %f8, 248(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f9, 240(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f10, 232(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    ld %f11, 224(%r15) # 8-byte Folded Reload
; VECTOR-NEXT:    lmg %r14, %r15, 368(%r15)
; VECTOR-NEXT:    br %r14
  call void @foo2(<4 x half> %dummy, <8 x half> %Arg5)
  ret void
}

; Test loading vector constants.
declare void @foo3(<8 x half>, <8 x half>)
define void @fun6() {
; NOVEC-LABEL: fun6:
; NOVEC:       # %bb.0: # %entry
; NOVEC-NEXT:    stmg %r14, %r15, 112(%r15)
; NOVEC-NEXT:    .cfi_offset %r14, -48
; NOVEC-NEXT:    .cfi_offset %r15, -40
; NOVEC-NEXT:    aghi %r15, -256
; NOVEC-NEXT:    .cfi_def_cfa_offset 416
; NOVEC-NEXT:    lhrl %r0, .LCPI6_0
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    lgdr %r0, %f0
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    sth %r0, 254(%r15)
; NOVEC-NEXT:    sth %r0, 246(%r15)
; NOVEC-NEXT:    sth %r0, 238(%r15)
; NOVEC-NEXT:    sth %r0, 230(%r15)
; NOVEC-NEXT:    sth %r0, 222(%r15)
; NOVEC-NEXT:    sth %r0, 214(%r15)
; NOVEC-NEXT:    sth %r0, 206(%r15)
; NOVEC-NEXT:    sth %r0, 198(%r15)
; NOVEC-NEXT:    lhrl %r0, .LCPI6_1
; NOVEC-NEXT:    sll %r0, 16
; NOVEC-NEXT:    risbhg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    ldgr %f0, %r0
; NOVEC-NEXT:    lgdr %r0, %f0
; NOVEC-NEXT:    risblg %r0, %r0, 0, 159, 32
; NOVEC-NEXT:    srl %r0, 16
; NOVEC-NEXT:    ler %f2, %f0
; NOVEC-NEXT:    ler %f4, %f0
; NOVEC-NEXT:    ler %f6, %f0
; NOVEC-NEXT:    sth %r0, 190(%r15)
; NOVEC-NEXT:    sth %r0, 182(%r15)
; NOVEC-NEXT:    sth %r0, 174(%r15)
; NOVEC-NEXT:    sth %r0, 166(%r15)
; NOVEC-NEXT:    brasl %r14, foo3@PLT
; NOVEC-NEXT:    lmg %r14, %r15, 368(%r15)
; NOVEC-NEXT:    br %r14
;
; VECTOR-LABEL: fun6:
; VECTOR:       # %bb.0: # %entry
; VECTOR-NEXT:    stmg %r14, %r15, 112(%r15)
; VECTOR-NEXT:    .cfi_offset %r14, -48
; VECTOR-NEXT:    .cfi_offset %r15, -40
; VECTOR-NEXT:    aghi %r15, -256
; VECTOR-NEXT:    .cfi_def_cfa_offset 416
; VECTOR-NEXT:    lhrl %r0, .LCPI6_0
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v0, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    sth %r0, 254(%r15)
; VECTOR-NEXT:    sth %r0, 246(%r15)
; VECTOR-NEXT:    sth %r0, 238(%r15)
; VECTOR-NEXT:    sth %r0, 230(%r15)
; VECTOR-NEXT:    sth %r0, 222(%r15)
; VECTOR-NEXT:    sth %r0, 214(%r15)
; VECTOR-NEXT:    sth %r0, 206(%r15)
; VECTOR-NEXT:    sth %r0, 198(%r15)
; VECTOR-NEXT:    lhrl %r0, .LCPI6_1
; VECTOR-NEXT:    sll %r0, 16
; VECTOR-NEXT:    vlvgf %v0, %r0, 0
; VECTOR-NEXT:    vlgvf %r0, %v0, 0
; VECTOR-NEXT:    srl %r0, 16
; VECTOR-NEXT:    ldr %f2, %f0
; VECTOR-NEXT:    ldr %f4, %f0
; VECTOR-NEXT:    ldr %f6, %f0
; VECTOR-NEXT:    sth %r0, 190(%r15)
; VECTOR-NEXT:    sth %r0, 182(%r15)
; VECTOR-NEXT:    sth %r0, 174(%r15)
; VECTOR-NEXT:    sth %r0, 166(%r15)
; VECTOR-NEXT:    brasl %r14, foo3@PLT
; VECTOR-NEXT:    lmg %r14, %r15, 368(%r15)
; VECTOR-NEXT:    br %r14
entry:
  call void @foo3(<8 x half> <half 0.0, half 0.0, half 0.0, half 0.0,
                              half 0.0, half 0.0, half 0.0, half 0.0>,
                  <8 x half> <half 0.375, half 0.375, half 0.375, half 0.375,
                              half 0.375, half 0.375, half 0.375, half 0.375>)
  ret void
}

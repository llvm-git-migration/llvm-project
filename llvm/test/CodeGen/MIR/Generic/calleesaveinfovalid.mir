
# RUN: llc -run-pass=none -o - %s | FileCheck %s

--- |

  ; No stack, no callee-saved info -> no callee-saved info
  define i32 @no_stack_no_calleesavedinfo(i32 noundef %0) #0 {
    %2 = tail call i32 @f4(i32 noundef %0)
    ret i32 %2
  }
  
  ; No stack but callee-saved info -> still callee-saved info
  define i32 @no_stack_calleesavedinfo(i32 noundef %0) #0 {
    %2 = tail call i32 @f4(i32 noundef %0)
    ret i32 %2
  }
  
  ; Stack but no callee-saved info -> still callee-saved info
  define i32 @stack_no_calleesavedinfo(i32 noundef %0) #0 {
    %2 = call i32 @f4(i32 noundef %0)
    %3 = add i32 %0, %2
    ret i32 %3
  }
  
  ; Stack and callee-saved info -> still callee-saved info
  define i32 @stack_calleesavedinfo(i32 noundef %0) #0 {
    %2 = call i32 @f4(i32 noundef %0)
    %3 = add i32 %0, %2
    ret i32 %3
  }
  
  declare i32 @f4(i32 noundef)
  
  attributes #0 = { nounwind }

...
---
# CHECK-LABEL:  name:                   no_stack_no_calleesavedinfo
# CHECK:        isCalleeSavedInfoValid: false
name:            no_stack_no_calleesavedinfo
alignment:       4
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$w0' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
  hasTailCall:     true
  isCalleeSavedInfoValid: false
stack: []
machineFunctionInfo:
  hasRedZone:      false
body:             |
  bb.0 (%ir-block.1):
    liveins: $w0
  
    TCRETURNdi @f4, 0, csr_darwin_aarch64_aapcs, implicit $sp, implicit $w0

...
---
# CHECK-LABEL:  name:                   no_stack_calleesavedinfo
# CHECK:        isCalleeSavedInfoValid: true
name:            no_stack_calleesavedinfo
alignment:       4
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$w0' }
frameInfo:
  maxAlignment:    1
  maxCallFrameSize: 0
  hasTailCall:     true
  isCalleeSavedInfoValid: true
stack: []
machineFunctionInfo:
  hasRedZone:      false
body:             |
  bb.0 (%ir-block.1):
    liveins: $w0
  
    TCRETURNdi @f4, 0, csr_darwin_aarch64_aapcs, implicit $sp, implicit $w0

...
---
# CHECK-LABEL:  name:                   stack_no_calleesavedinfo
# CHECK:        isCalleeSavedInfoValid: true
name:            stack_no_calleesavedinfo
alignment:       4
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$w0' }
frameInfo:
  stackSize:       32
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
  isCalleeSavedInfoValid: false
stack:
  - { id: 0, type: spill-slot, offset: -8, size: 8, alignment: 8, callee-saved-register: '$lr' }
  - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 8, callee-saved-register: '$fp' }
  - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '$x19' }
  - { id: 3, type: spill-slot, offset: -32, size: 8, alignment: 8, callee-saved-register: '$x20' }
machineFunctionInfo:
  hasRedZone:      false
body:             |
  bb.0 (%ir-block.1):
    liveins: $w0, $x19, $x20, $lr
  
    early-clobber $sp = frame-setup STPXpre killed $x20, killed $x19, $sp, -4 :: (store (s64) into %stack.3), (store (s64) into %stack.2)
    frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
    renamable $w19 = COPY $w0
    BL @f4, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0
    $w0 = ADDWrr killed renamable $w19, killed renamable $w0
    $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
    early-clobber $sp, $x20, $x19 = frame-destroy LDPXpost $sp, 4 :: (load (s64) from %stack.3), (load (s64) from %stack.2)
    RET_ReallyLR implicit $w0

...
---
# CHECK-LABEL:  name:                   stack_calleesavedinfo
# CHECK:        isCalleeSavedInfoValid: true
name:            stack_calleesavedinfo
alignment:       4
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$w0' }
frameInfo:
  stackSize:       32
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
  isCalleeSavedInfoValid: true
stack:
  - { id: 0, type: spill-slot, offset: -8, size: 8, alignment: 8, callee-saved-register: '$lr' }
  - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 8, callee-saved-register: '$fp' }
  - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '$x19' }
  - { id: 3, type: spill-slot, offset: -32, size: 8, alignment: 8, callee-saved-register: '$x20' }
machineFunctionInfo:
  hasRedZone:      false
body:             |
  bb.0 (%ir-block.1):
    liveins: $w0, $x19, $x20, $lr
  
    early-clobber $sp = frame-setup STPXpre killed $x20, killed $x19, $sp, -4 :: (store (s64) into %stack.3), (store (s64) into %stack.2)
    frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.1), (store (s64) into %stack.0)
    renamable $w19 = COPY $w0
    BL @f4, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0
    $w0 = ADDWrr killed renamable $w19, killed renamable $w0
    $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.1), (load (s64) from %stack.0)
    early-clobber $sp, $x20, $x19 = frame-destroy LDPXpost $sp, 4 :: (load (s64) from %stack.3), (load (s64) from %stack.2)
    RET_ReallyLR implicit $w0

...

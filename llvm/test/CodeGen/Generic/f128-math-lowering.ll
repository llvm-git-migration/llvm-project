
; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
;
; RUN: llc < %s -mtriple=aarch64-unknown-unknown -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-AARCH64
; RUN: llc < %s -mtriple=riscv32-unknown-unknown -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-RISCV32
; RUN: llc < %s -mtriple=s390x-unknown-unknown -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-S390X
; RUN: llc < %s -mtriple=i686-unknown-unknown   -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -verify-machineinstrs | FileCheck %s --check-prefix=CHECK-X64
;
; Verify that fp128 intrinsics only lower to `long double` calls on platforms
; where `f128` and `long double` have the same layout.
;
; We test on x86 and x64 which have 80-bit ld, as well as aarch64 (ld == f128),
; riscv32 (ld == f64), and s380x (ld == f128 with different alignment from
; x64/aarch64 f128).

define fp128 @test_cbrtf128(fp128 %a) {
; CHECK-LABEL:      test_cbrtf128:
; CHECK-AARCH64:    b llvm.cbrt.f128
; CHECK-RISCV32:    call llvm.cbrt.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.cbrt.f128@PLT
; CHECK-X64:        jmp llvm.cbrt.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.cbrt.f128@PLT
start:
  %0 = tail call fp128 @llvm.cbrt.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.cbrt.f128(fp128)


define fp128 @test_ceilf128(fp128 %a) {
; CHECK-LABEL:      test_ceilf128:
; CHECK-AARCH64:    b ceill
; CHECK-RISCV32:    call ceill@plt
; CHECK-S390X:      brasl {{%.*}} ceill@PLT
; CHECK-X64:        jmp ceilf128@PLT
; CHECK-X86:        calll ceilf128
start:
  %0 = tail call fp128 @llvm.ceil.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.ceil.f128(fp128)


define fp128 @test_copysignf128(fp128 %a, fp128 %b) {
; No math library call here, so make sure the assembly does the correct thing.
; This test is autogenerated
; CHECK-LABEL:        test_copysignf128:
; CHECK-AARCH64-LABEL: test_copysignf128:
; CHECK-AARCH64:       // %bb.0: // %start
; CHECK-AARCH64-NEXT:    stp q0, q1, [sp, #-32]!
; CHECK-AARCH64-NEXT:    .cfi_def_cfa_offset 32
; CHECK-AARCH64-NEXT:    ldrb w8, [sp, #15]
; CHECK-AARCH64-NEXT:    ldrb w9, [sp, #31]
; CHECK-AARCH64-NEXT:    bfxil w9, w8, #0, #7
; CHECK-AARCH64-NEXT:    strb w9, [sp, #15]
; CHECK-AARCH64-NEXT:    ldr q0, [sp], #32
; CHECK-AARCH64-NEXT:    ret
;
; CHECK-RISCV32-LABEL: test_copysignf128:
; CHECK-RISCV32:       # %bb.0: # %start
; CHECK-RISCV32-NEXT:    lw a3, 0(a1)
; CHECK-RISCV32-NEXT:    lw a4, 4(a1)
; CHECK-RISCV32-NEXT:    lw a2, 12(a2)
; CHECK-RISCV32-NEXT:    lw a5, 12(a1)
; CHECK-RISCV32-NEXT:    lw a1, 8(a1)
; CHECK-RISCV32-NEXT:    lui a6, 524288
; CHECK-RISCV32-NEXT:    and a2, a2, a6
; CHECK-RISCV32-NEXT:    slli a5, a5, 1
; CHECK-RISCV32-NEXT:    srli a5, a5, 1
; CHECK-RISCV32-NEXT:    or a2, a5, a2
; CHECK-RISCV32-NEXT:    sw a1, 8(a0)
; CHECK-RISCV32-NEXT:    sw a4, 4(a0)
; CHECK-RISCV32-NEXT:    sw a3, 0(a0)
; CHECK-RISCV32-NEXT:    sw a2, 12(a0)
; CHECK-RISCV32-NEXT:    ret
;
; CHECK-S390X-LABEL: test_copysignf128:
; CHECK-S390X:       # %bb.0: # %start
; CHECK-S390X-NEXT:    ld %f0, 0(%r3)
; CHECK-S390X-NEXT:    ld %f2, 8(%r3)
; CHECK-S390X-NEXT:    ld %f1, 0(%r4)
; CHECK-S390X-NEXT:    ld %f3, 8(%r4)
; CHECK-S390X-NEXT:    cpsdr %f0, %f1, %f0
; CHECK-S390X-NEXT:    std %f0, 0(%r2)
; CHECK-S390X-NEXT:    std %f2, 8(%r2)
; CHECK-S390X-NEXT:    br %r14
;
; CHECK-X86-LABEL: test_copysignf128:
; CHECK-X86:       # %bb.0: # %start
; CHECK-X86-NEXT:    pushl %ebx
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 8
; CHECK-X86-NEXT:    pushl %edi
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 12
; CHECK-X86-NEXT:    pushl %esi
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 16
; CHECK-X86-NEXT:    .cfi_offset %esi, -16
; CHECK-X86-NEXT:    .cfi_offset %edi, -12
; CHECK-X86-NEXT:    .cfi_offset %ebx, -8
; CHECK-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-X86-NEXT:    movl $-2147483648, %edi # imm = 0x80000000
; CHECK-X86-NEXT:    andl {{[0-9]+}}(%esp), %edi
; CHECK-X86-NEXT:    movl $2147483647, %ebx # imm = 0x7FFFFFFF
; CHECK-X86-NEXT:    andl {{[0-9]+}}(%esp), %ebx
; CHECK-X86-NEXT:    orl %edi, %ebx
; CHECK-X86-NEXT:    movl %ebx, 12(%eax)
; CHECK-X86-NEXT:    movl %esi, 8(%eax)
; CHECK-X86-NEXT:    movl %edx, 4(%eax)
; CHECK-X86-NEXT:    movl %ecx, (%eax)
; CHECK-X86-NEXT:    popl %esi
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 12
; CHECK-X86-NEXT:    popl %edi
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 8
; CHECK-X86-NEXT:    popl %ebx
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 4
; CHECK-X86-NEXT:    retl $4
;
; CHECK-X64-LABEL: test_copysignf128:
; CHECK-X64:       # %bb.0: # %start
; CHECK-X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1
; CHECK-X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-X64-NEXT:    orps %xmm1, %xmm0
; CHECK-X64-NEXT:    retq
start:
  %0 = tail call fp128 @llvm.copysign.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.copysign.f128(fp128, fp128)


define fp128 @test_cosf128(fp128 %a) {
; CHECK-LABEL:      test_cosf128:
; CHECK-AARCH64:    b cosl
; CHECK-RISCV32:    call cosl@plt
; CHECK-S390X:      brasl {{%.*}} cosl@PLT
; CHECK-X64:        jmp cosf128@PLT
; CHECK-X86:        calll cosf128
start:
  %0 = tail call fp128 @llvm.cos.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.cos.f128(fp128)


define fp128 @test_exp2f128(fp128 %a) {
; CHECK-LABEL:      test_exp2f128:
; CHECK-AARCH64:    b exp2l
; CHECK-RISCV32:    call exp2l@plt
; CHECK-S390X:      brasl {{%.*}} exp2l@PLT
; CHECK-X64:        jmp exp2f128@PLT
; CHECK-X86:        calll exp2f128
start:
  %0 = tail call fp128 @llvm.exp2.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.exp2.f128(fp128)


define fp128 @test___exp2f128_finite(fp128 %a) {
; CHECK-LABEL:      test___exp2f128_finite:
; CHECK-AARCH64:    b llvm.__exp2f128_finite.f128
; CHECK-RISCV32:    call llvm.__exp2f128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__exp2f128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__exp2f128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__exp2f128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__exp2f128_finite.f128(fp128  %a)
  ret fp128 %0
}

declare fp128 @llvm.__exp2f128_finite.f128(fp128)


define fp128 @test_expf128(fp128 %a) {
; CHECK-LABEL:      test_expf128:
; CHECK-AARCH64:    b expl
; CHECK-RISCV32:    call expl@plt
; CHECK-S390X:      brasl {{%.*}} expl@PLT
; CHECK-X64:        jmp expf128@PLT
; CHECK-X86:        calll expf128
start:
  %0 = tail call fp128 @llvm.exp.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.exp.f128(fp128)


define fp128 @test___expf128_finite(fp128 %a) {
; CHECK-LABEL:      test___expf128_finite:
; CHECK-AARCH64:    b llvm.__expf128_finite.f128
; CHECK-RISCV32:    call llvm.__expf128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__expf128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__expf128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__expf128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__expf128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__expf128_finite.f128(fp128)


define fp128 @test_floorf128(fp128 %a) {
; CHECK-LABEL:      test_floorf128:
; CHECK-AARCH64:    b floorl
; CHECK-RISCV32:    call floorl@plt
; CHECK-S390X:      brasl {{%.*}} floorl@PLT
; CHECK-X64:        jmp floorf128@PLT
; CHECK-X86:        calll floorf128
start:
  %0 = tail call fp128 @llvm.floor.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.floor.f128(fp128)


define fp128 @test_fmaf128(fp128 %a, fp128 %b, fp128 %c) {
; CHECK-LABEL:      test_fmaf128:
; CHECK-AARCH64:    b fmal
; CHECK-RISCV32:    call fmal@plt
; CHECK-S390X:      brasl {{%.*}} fmal@PLT
; CHECK-X64:        jmp fmaf128@PLT
; CHECK-X86:        calll fmaf128
start:
  %0 = tail call fp128 @llvm.fma.f128(fp128 %a, fp128 %b, fp128 %c)
  ret fp128 %0
}

declare fp128 @llvm.fma.f128(fp128, fp128, fp128)


define fp128 @test_fmaxf128(fp128 %a, fp128 %b) {
; CHECK-LABEL:      test_fmaxf128:
; CHECK-AARCH64:    b llvm.fmax.f128
; CHECK-RISCV32:    call llvm.fmax.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.fmax.f128@PLT
; CHECK-X64:        jmp llvm.fmax.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.fmax.f128@PLT
start:
  %0 = tail call fp128 @llvm.fmax.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmax.f128(fp128, fp128)


define fp128 @test_fminf128(fp128 %a, fp128 %b) {
; CHECK-LABEL:      test_fminf128:
; CHECK-AARCH64:    b llvm.fmin.f128
; CHECK-RISCV32:    call llvm.fmin.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.fmin.f128@PLT
; CHECK-X64:        jmp llvm.fmin.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.fmin.f128@PLT
start:
  %0 = tail call fp128 @llvm.fmin.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmin.f128(fp128, fp128)


define fp128 @test_fmodf128(fp128 %a, fp128 %b) {
; CHECK-LABEL:      test_fmodf128:
; CHECK-AARCH64:    b llvm.fmod.f128
; CHECK-RISCV32:    call llvm.fmod.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.fmod.f128@PLT
; CHECK-X64:        jmp llvm.fmod.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.fmod.f128@PLT
start:
  %0 = tail call fp128 @llvm.fmod.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.fmod.f128(fp128, fp128)


define { fp128, i32 } @test_frexpf128(fp128 %a) {
; CHECK-LABEL:      test_frexpf128:
; CHECK-AARCH64:    bl frexpl
; CHECK-RISCV32:    call frexpl@plt
; CHECK-S390X:      brasl {{%.*}} frexpl@PLT
; CHECK-X64:        callq frexpf128@PLT
; CHECK-X86:        calll frexpf128
start:
  %0 = tail call { fp128, i32 } @llvm.frexp.f128(fp128 %a)
  ret { fp128, i32 } %0
}

declare { fp128, i32 } @llvm.frexp.f128(fp128)


define fp128 @test_ldexpf128(fp128 %a, i32 %b) {
; CHECK-LABEL:      test_ldexpf128:
; CHECK-AARCH64:    b ldexpl
; CHECK-RISCV32:    call ldexpl@plt
; CHECK-S390X:      brasl {{%.*}} ldexpl@PLT
; CHECK-X64:        jmp ldexpf128@PLT
; CHECK-X86:        calll ldexpf128
start:
  %0 = tail call fp128 @llvm.ldexp.f128(fp128 %a, i32 %b)
  ret fp128 %0
}

declare fp128 @llvm.ldexp.f128(fp128, i32)


define i64 @test_llrintf128(fp128 %a) {
; CHECK-LABEL:      test_llrintf128:
; CHECK-AARCH64:    b llrintl
; CHECK-RISCV32:    call llrintl@plt
; CHECK-S390X:      brasl {{%.*}} llrintl@PLT
; CHECK-X64:        jmp llrintf128@PLT
; CHECK-X86:        calll llrintf128
start:
  %0 = tail call i64 @llvm.llrint.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.llrint.f128(fp128)


define i64 @test_llroundf128(fp128 %a) {
; CHECK-LABEL:      test_llroundf128:
; CHECK-AARCH64:    b llroundl
; CHECK-RISCV32:    call llroundl@plt
; CHECK-S390X:      brasl {{%.*}} llroundl@PLT
; CHECK-X64:        jmp llroundf128@PLT
; CHECK-X86:        calll llroundf128
start:
  %0 = tail call i64 @llvm.llround.i64.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.llround.i64.f128(fp128)


define fp128 @test_log10f128(fp128 %a) {
; CHECK-LABEL:      test_log10f128:
; CHECK-AARCH64:    b log10l
; CHECK-RISCV32:    call log10l@plt
; CHECK-S390X:      brasl {{%.*}} log10l@PLT
; CHECK-X64:        jmp log10f128@PLT
; CHECK-X86:        calll log10f128
start:
  %0 = tail call fp128 @llvm.log10.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log10.f128(fp128)


define fp128 @test___log10f128_finite(fp128 %a) {
; CHECK-LABEL:      test___log10f128_finite:
; CHECK-AARCH64:    b llvm.__log10f128_finite.f128
; CHECK-RISCV32:    call llvm.__log10f128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__log10f128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__log10f128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__log10f128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__log10f128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__log10f128_finite.f128(fp128)


define fp128 @test_log2f128(fp128 %a) {
; CHECK-LABEL:      test_log2f128:
; CHECK-AARCH64:    b log2l
; CHECK-RISCV32:    call log2l@plt
; CHECK-S390X:      brasl {{%.*}} log2l@PLT
; CHECK-X64:        jmp log2f128@PLT
; CHECK-X86:        calll log2f128
start:
  %0 = tail call fp128 @llvm.log2.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log2.f128(fp128)


define fp128 @test___log2f128_finite(fp128 %a) {
; CHECK-LABEL:      test___log2f128_finite:
; CHECK-AARCH64:    b llvm.__log2f128_finite.f128
; CHECK-RISCV32:    call llvm.__log2f128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__log2f128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__log2f128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__log2f128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__log2f128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__log2f128_finite.f128(fp128)


define fp128 @test_logf128(fp128 %a) {
; CHECK-LABEL:      test_logf128:
; CHECK-AARCH64:    b logl
; CHECK-RISCV32:    call logl@plt
; CHECK-S390X:      brasl {{%.*}} logl@PLT
; CHECK-X64:        jmp logf128@PLT
; CHECK-X86:        calll logf128
start:
  %0 = tail call fp128 @llvm.log.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.log.f128(fp128)


define fp128 @test___logf128_finite(fp128 %a) {
; CHECK-LABEL:      test___logf128_finite:
; CHECK-AARCH64:    b llvm.__logf128_finite.f128
; CHECK-RISCV32:    call llvm.__logf128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__logf128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__logf128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__logf128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__logf128_finite.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.__logf128_finite.f128(fp128)


define i64 @test_lrintf128(fp128 %a) {
; CHECK-LABEL:      test_lrintf128:
; CHECK-AARCH64:    b lrintl
; CHECK-RISCV32:    call lrintl@plt
; CHECK-S390X:      brasl {{%.*}} lrintl@PLT
; CHECK-X64:        jmp lrintf128@PLT
; CHECK-X86:        calll lrintf128
start:
  %0 = tail call i64 @llvm.lrint.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.lrint.f128(fp128)


define i64 @test_lroundf128(fp128 %a) {
; CHECK-LABEL:      test_lroundf128:
; CHECK-AARCH64:    b lroundl
; CHECK-RISCV32:    call lroundl@plt
; CHECK-S390X:      brasl {{%.*}} lroundl@PLT
; CHECK-X64:        jmp lroundf128@PLT
; CHECK-X86:        calll lroundf128
start:
  %0 = tail call i64 @llvm.lround.i64.f128(fp128 %a)
  ret i64 %0
}

declare i64 @llvm.lround.i64.f128(fp128)


define fp128 @test_nearbyintf128(fp128 %a) {
; CHECK-LABEL:      test_nearbyintf128:
; CHECK-AARCH64:    b nearbyintl
; CHECK-RISCV32:    call nearbyintl@plt
; CHECK-S390X:      brasl {{%.*}} nearbyintl@PLT
; CHECK-X64:        jmp nearbyintf128@PLT
; CHECK-X86:        calll nearbyintf128
start:
  %0 = tail call fp128 @llvm.nearbyint.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.nearbyint.f128(fp128)


define fp128 @test_powf128(fp128 %a, fp128 %b) {
; CHECK-LABEL:      test_powf128:
; CHECK-AARCH64:    b powl
; CHECK-RISCV32:    call powl@plt
; CHECK-S390X:      brasl {{%.*}} powl@PLT
; CHECK-X64:        jmp powf128@PLT
; CHECK-X86:        calll powf128
start:
  %0 = tail call fp128 @llvm.pow.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.pow.f128(fp128, fp128)


define fp128 @test___powf128_finite(fp128 %a, fp128 %b) {
; CHECK-LABEL:      test___powf128_finite:
; CHECK-AARCH64:    b llvm.__powf128_finite.f128
; CHECK-RISCV32:    call llvm.__powf128_finite.f128@plt
; CHECK-S390X:      brasl {{%.*}} llvm.__powf128_finite.f128@PLT
; CHECK-X64:        jmp llvm.__powf128_finite.f128@PLT # TAILCALL
; CHECK-X86:        calll llvm.__powf128_finite.f128@PLT
start:
  %0 = tail call fp128 @llvm.__powf128_finite.f128(fp128 %a, fp128 %b)
  ret fp128 %0
}

declare fp128 @llvm.__powf128_finite.f128(fp128, fp128)


define fp128 @test_rintf128(fp128 %a) {
; CHECK-LABEL:      test_rintf128:
; CHECK-AARCH64:    b rintl
; CHECK-RISCV32:    call rintl@plt
;
; CHECK-S390X-LABEL: test_rintf128:
; CHECK-S390X:       # %bb.0: # %start
; CHECK-S390X-NEXT:    ld %f0, 0(%r3)
; CHECK-S390X-NEXT:    ld %f2, 8(%r3)
; CHECK-S390X-NEXT:    fixbr %f0, 0, %f0
; CHECK-S390X-NEXT:    std %f0, 0(%r2)
; CHECK-S390X-NEXT:    std %f2, 8(%r2)
; CHECK-S390X-NEXT:    br %r14
;
; CHECK-X64:        jmp rintf128@PLT
; CHECK-X86:        calll rintf128
start:
  %0 = tail call fp128 @llvm.rint.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.rint.f128(fp128)


define fp128 @test_roundevenf128(fp128 %a) {
; CHECK-LABEL:      test_roundevenf128:
; CHECK-AARCH64:    b roundevenl
; CHECK-RISCV32:    call roundevenl@plt
; CHECK-S390X:      brasl {{%.*}} roundevenl@PLT
; CHECK-X64:        jmp roundevenf128@PLT
; CHECK-X86:        calll roundevenf128
start:
  %0 = tail call fp128 @llvm.roundeven.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.roundeven.f128(fp128)


define fp128 @test_roundf128(fp128 %a) {
; CHECK-LABEL:      test_roundf128:
; CHECK-AARCH64:    b roundl
; CHECK-RISCV32:    call roundl@plt
; CHECK-S390X:      brasl {{%.*}} roundl@PLT
; CHECK-X64:        jmp roundf128@PLT
; CHECK-X86:        calll roundf128
start:
  %0 = tail call fp128 @llvm.round.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.round.f128(fp128)


define fp128 @test_sinf128(fp128 %a) {
; CHECK-LABEL:      test_sinf128:
; CHECK-AARCH64:    b sinl
; CHECK-RISCV32:    call sinl@plt
; CHECK-S390X:      brasl {{%.*}} sinl@PLT
; CHECK-X64:        jmp sinf128@PLT
; CHECK-X86:        calll sinf128
start:
  %0 = tail call fp128 @llvm.sin.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.sin.f128(fp128)


define fp128 @test_sqrtf128(fp128 %a) {
; CHECK-LABEL:      test_sqrtf128:
; CHECK-AARCH64:    b sqrtl
; CHECK-RISCV32:    call sqrtl@plt
; CHECK-S390X:      sqxbr {{%.*}} {{%.*}}
; CHECK-X64:        jmp sqrtf128@PLT
; CHECK-X86:        calll sqrtf128
start:
  %0 = tail call fp128 @llvm.sqrt.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.sqrt.f128(fp128)


define fp128 @test_truncf128(fp128 %a) {
; CHECK-LABEL:      test_truncf128:
; CHECK-AARCH64:    b truncl
; CHECK-RISCV32:    call truncl@plt
; CHECK-S390X:      brasl {{%.*}} truncl@PLT
; CHECK-X64:        jmp truncf128@PLT
; CHECK-X86:        calll truncf128
start:
  %0 = tail call fp128 @llvm.trunc.f128(fp128 %a)
  ret fp128 %0
}

declare fp128 @llvm.trunc.f128(fp128)

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mcpu=sm_90 -mattr=+ptx78 | FileCheck --check-prefixes=CHECK-BF16 %s
; RUN: %if ptxas-12.0 %{ llc < %s -mcpu=sm_90 -mattr=+ptx78 | %ptxas-verify -arch=sm_90 %}
target triple = "nvptx64-nvidia-cuda"

declare bfloat @llvm.nvvm.ex2.approx.bf16(bfloat)
declare <2 x bfloat> @llvm.nvvm.ex2.approx.bf16x2(<2 x bfloat>)

; CHECK-LABEL: ex2_bfloat
define bfloat @ex2_bfloat(bfloat %0) {
; CHECK-BF16-LABEL: ex2_bfloat(
; CHECK-BF16:       {
; CHECK-BF16-NEXT:    .reg .b16 %rs<3>;
; CHECK-BF16-EMPTY:
; CHECK-BF16-NEXT:  // %bb.0:
; CHECK-BF16-NEXT:    ld.param.b16 %rs1, [ex2_bfloat_param_0];
; CHECK-BF16-NEXT:    ex2.approx.ftz.bf16 %rs2, %rs1;
; CHECK-BF16-NEXT:    st.param.b16 [func_retval0], %rs2;
; CHECK-BF16-NEXT:    ret;
  %res = call bfloat @llvm.nvvm.ex2.approx.bf16(bfloat %0)
  ret bfloat %res
}

; CHECK-LABEL: ex2_2xbfloat
define <2 x bfloat> @ex2_2xbfloat(<2 x bfloat> %0) {
;
; CHECK-BF16-LABEL: ex2_2xbfloat(
; CHECK-BF16:       {
; CHECK-BF16-NEXT:    .reg .b32 %r<3>;
; CHECK-BF16-EMPTY:
; CHECK-BF16-NEXT:  // %bb.0:
; CHECK-BF16-NEXT:    ld.param.b32 %r1, [ex2_2xbfloat_param_0];
; CHECK-BF16-NEXT:    ex2.approx.ftz.bf16x2 %r2, %r1;
; CHECK-BF16-NEXT:    st.param.b32 [func_retval0], %r2;
; CHECK-BF16-NEXT:    ret;
  %res = call <2 x bfloat> @llvm.nvvm.ex2.approx.bf16x2(<2 x bfloat> %0)
  ret <2 x bfloat> %res
}

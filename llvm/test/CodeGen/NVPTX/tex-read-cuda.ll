; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | FileCheck %s --check-prefix=SM20
; RUN: llc < %s -march=nvptx64 -mcpu=sm_30 -verify-machineinstrs | FileCheck %s --check-prefix=SM30
; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | %ptxas-verify %}
; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_30 -verify-machineinstrs | %ptxas-verify %}


target triple = "nvptx-unknown-cuda"

declare { float, float, float, float } @llvm.nvvm.tex.unified.1d.v4f32.s32(i64, i32)
declare i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1))

define void @foo(i64 %img, ptr %red, i32 %idx) {
; SM20-LABEL: foo(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .f32 %f<5>;
; SM20-NEXT:    .reg .b64 %rd<4>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [foo_param_0];
; SM20-NEXT:    ld.param.u64 %rd2, [foo_param_1];
; SM20-NEXT:    cvta.to.global.u64 %rd3, %rd2;
; SM20-NEXT:    ld.param.u32 %r1, [foo_param_2];
; SM20-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [%rd1, {%r1}];
; SM20-NEXT:    st.global.f32 [%rd3], %f1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: foo(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .f32 %f<5>;
; SM30-NEXT:    .reg .b64 %rd<4>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [foo_param_0];
; SM30-NEXT:    ld.param.u64 %rd2, [foo_param_1];
; SM30-NEXT:    cvta.to.global.u64 %rd3, %rd2;
; SM30-NEXT:    ld.param.u32 %r1, [foo_param_2];
; SM30-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [%rd1, {%r1}];
; SM30-NEXT:    st.global.f32 [%rd3], %f1;
; SM30-NEXT:    ret;
  %val = tail call { float, float, float, float } @llvm.nvvm.tex.unified.1d.v4f32.s32(i64 %img, i32 %idx)
  %ret = extractvalue { float, float, float, float } %val, 0
  store float %ret, ptr %red
  ret void
}


@tex0 = internal addrspace(1) global i64 0, align 8

define void @bar(ptr %red, i32 %idx) {
; SM20-LABEL: bar(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .f32 %f<5>;
; SM20-NEXT:    .reg .b64 %rd<4>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [bar_param_0];
; SM20-NEXT:    cvta.to.global.u64 %rd2, %rd1;
; SM20-NEXT:    ld.param.u32 %r1, [bar_param_1];
; SM20-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [tex0, {%r1}];
; SM20-NEXT:    st.global.f32 [%rd2], %f1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: bar(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .f32 %f<5>;
; SM30-NEXT:    .reg .b64 %rd<4>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [bar_param_0];
; SM30-NEXT:    cvta.to.global.u64 %rd2, %rd1;
; SM30-NEXT:    ld.param.u32 %r1, [bar_param_1];
; SM30-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [tex0, {%r1}];
; SM30-NEXT:    st.global.f32 [%rd2], %f1;
; SM30-NEXT:    ret;
  %texHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @tex0)
  %val = tail call { float, float, float, float } @llvm.nvvm.tex.unified.1d.v4f32.s32(i64 %texHandle, i32 %idx)
  %ret = extractvalue { float, float, float, float } %val, 0
  store float %ret, ptr %red
  ret void
}

declare float @texfunc(i64)

define void @baz(ptr %red, i32 %idx) {
; SM20-LABEL: baz(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .f32 %f<8>;
; SM20-NEXT:    .reg .b64 %rd<4>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [baz_param_0];
; SM20-NEXT:    cvta.to.global.u64 %rd2, %rd1;
; SM20-NEXT:    ld.param.u32 %r1, [baz_param_1];
; SM20-NEXT:    mov.u64 %rd3, tex0;
; SM20-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [tex0, {%r1}];
; SM20-NEXT:    { // callseq 0, 0
; SM20-NEXT:    .param .b64 param0;
; SM20-NEXT:    st.param.b64 [param0], %rd3;
; SM20-NEXT:    .param .b32 retval0;
; SM20-NEXT:    call.uni (retval0),
; SM20-NEXT:    texfunc,
; SM20-NEXT:    (
; SM20-NEXT:    param0
; SM20-NEXT:    );
; SM20-NEXT:    ld.param.f32 %f5, [retval0];
; SM20-NEXT:    } // callseq 0
; SM20-NEXT:    add.rn.f32 %f7, %f1, %f5;
; SM20-NEXT:    st.global.f32 [%rd2], %f7;
; SM20-NEXT:    ret;
;
; SM30-LABEL: baz(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .f32 %f<8>;
; SM30-NEXT:    .reg .b64 %rd<4>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [baz_param_0];
; SM30-NEXT:    cvta.to.global.u64 %rd2, %rd1;
; SM30-NEXT:    ld.param.u32 %r1, [baz_param_1];
; SM30-NEXT:    mov.u64 %rd3, tex0;
; SM30-NEXT:    tex.1d.v4.f32.s32 {%f1, %f2, %f3, %f4}, [tex0, {%r1}];
; SM30-NEXT:    { // callseq 0, 0
; SM30-NEXT:    .param .b64 param0;
; SM30-NEXT:    st.param.b64 [param0], %rd3;
; SM30-NEXT:    .param .b32 retval0;
; SM30-NEXT:    call.uni (retval0),
; SM30-NEXT:    texfunc,
; SM30-NEXT:    (
; SM30-NEXT:    param0
; SM30-NEXT:    );
; SM30-NEXT:    ld.param.f32 %f5, [retval0];
; SM30-NEXT:    } // callseq 0
; SM30-NEXT:    add.rn.f32 %f7, %f1, %f5;
; SM30-NEXT:    st.global.f32 [%rd2], %f7;
; SM30-NEXT:    ret;
  %texHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @tex0)
  %val = tail call { float, float, float, float } @llvm.nvvm.tex.unified.1d.v4f32.s32(i64 %texHandle, i32 %idx)
  %ret = extractvalue { float, float, float, float } %val, 0
  %texcall = tail call float @texfunc(i64 %texHandle)
  %ret2 = fadd float %ret, %texcall
  store float %ret2, ptr %red
  ret void
}

!nvvm.annotations = !{!1, !2, !3, !4}
!1 = !{ptr @foo, !"kernel", i32 1}
!2 = !{ptr @bar, !"kernel", i32 1}
!3 = !{ptr addrspace(1) @tex0, !"texture", i32 1}
!4 = !{ptr @baz, !"kernel", i32 1}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -march=nvptx64 | FileCheck %s
; RUN: %if ptxas %{ llc < %s -march=nvptx64 | %ptxas-verify %}

target triple = "nvptx64-nvidia-cuda"

define i32 @trunc(i64 %a, i64 %b) {
; CHECK-LABEL: trunc(
; CHECK:       {
; CHECK-NEXT:    .reg .b32 %r<4>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.u64 %rd1, [trunc_param_0];
; CHECK-NEXT:    ld.param.u64 %rd2, [trunc_param_1];
; CHECK-NEXT:    cvt.u32.u64 %r1, %rd2;
; CHECK-NEXT:    cvt.u32.u64 %r2, %rd1;
; CHECK-NEXT:    or.b32 %r3, %r2, %r1;
; CHECK-NEXT:    st.param.b32 [func_retval0+0], %r3;
; CHECK-NEXT:    ret;
  %or = or i64 %a, %b
  %trunc = trunc i64 %or to i32
  ret i32 %trunc
}

define i32 @trunc_not(i64 %a, i64 %b) {
; CHECK-LABEL: trunc_not(
; CHECK:       {
; CHECK-NEXT:    .reg .b32 %r<2>;
; CHECK-NEXT:    .reg .b64 %rd<5>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.u64 %rd1, [trunc_not_param_0];
; CHECK-NEXT:    ld.param.u64 %rd2, [trunc_not_param_1];
; CHECK-NEXT:    or.b64 %rd3, %rd1, %rd2;
; CHECK-NEXT:    cvt.u32.u64 %r1, %rd3;
; CHECK-NEXT:    mov.u64 %rd4, 0;
; CHECK-NEXT:    st.u64 [%rd4], %rd3;
; CHECK-NEXT:    st.param.b32 [func_retval0+0], %r1;
; CHECK-NEXT:    ret;
  %or = or i64 %a, %b
  %trunc = trunc i64 %or to i32
  store i64 %or, ptr null
  ret i32 %trunc
}

define i32 @trunc_cvt(i64 %a, i64 %b) {
; CHECK-LABEL: trunc_cvt(
; CHECK:       {
; CHECK-NEXT:    .reg .b32 %r<5>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.u64 %rd1, [trunc_cvt_param_0];
; CHECK-NEXT:    ld.param.u64 %rd2, [trunc_cvt_param_1];
; CHECK-NEXT:    cvt.u32.u64 %r1, %rd2;
; CHECK-NEXT:    cvt.u32.u64 %r2, %rd1;
; CHECK-NEXT:    add.s32 %r3, %r2, %r1;
; CHECK-NEXT:    or.b32 %r4, %r3, %r2;
; CHECK-NEXT:    st.param.b32 [func_retval0+0], %r4;
; CHECK-NEXT:    ret;
  %add = add i64 %a, %b
  %or = or i64 %add, %a
  %trunc = trunc i64 %or to i32
  ret i32 %trunc
}

define i32 @trunc_cvt_not(i64 %a, i64 %b) {
; CHECK-LABEL: trunc_cvt_not(
; CHECK:       {
; CHECK-NEXT:    .reg .b32 %r<5>;
; CHECK-NEXT:    .reg .b64 %rd<4>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.u64 %rd1, [trunc_cvt_not_param_0];
; CHECK-NEXT:    ld.param.u64 %rd2, [trunc_cvt_not_param_1];
; CHECK-NEXT:    mov.u64 %rd3, 0;
; CHECK-NEXT:    st.u64 [%rd3], %rd2;
; CHECK-NEXT:    cvt.u32.u64 %r1, %rd2;
; CHECK-NEXT:    cvt.u32.u64 %r2, %rd1;
; CHECK-NEXT:    add.s32 %r3, %r2, %r1;
; CHECK-NEXT:    or.b32 %r4, %r3, %r2;
; CHECK-NEXT:    st.param.b32 [func_retval0+0], %r4;
; CHECK-NEXT:    ret;
  %add = add i64 %a, %b
  store i64 %b, ptr null
  %or = or i64 %add, %a
  %trunc = trunc i64 %or to i32
  ret i32 %trunc
}

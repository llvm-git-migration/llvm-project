; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | FileCheck %s --check-prefix=SM20
; RUN: llc < %s -march=nvptx64 -mcpu=sm_30 -verify-machineinstrs | FileCheck %s --check-prefix=SM30
; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_20 -verify-machineinstrs | %ptxas-verify %}
; RUN: %if ptxas %{ llc < %s -march=nvptx64 -mcpu=sm_30 -verify-machineinstrs | %ptxas-verify %}

target triple = "nvptx-unknown-cuda"

@tex0 = internal addrspace(1) global i64 0, align 8
@surf0 = internal addrspace(1) global i64 0, align 8

declare i32 @llvm.nvvm.txq.width(i64)
declare i32 @llvm.nvvm.txq.height(i64)
declare i32 @llvm.nvvm.suq.width(i64)
declare i32 @llvm.nvvm.suq.height(i64)
declare i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1))


define i32 @t0(i64 %texHandle) {
; SM20-LABEL: t0(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [t0_param_0];
; SM20-NEXT:    txq.width.b32 %r1, [%rd1];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: t0(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [t0_param_0];
; SM30-NEXT:    txq.width.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %width = tail call i32 @llvm.nvvm.txq.width(i64 %texHandle)
  ret i32 %width
}

define i32 @t1() {
; SM20-LABEL: t1(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    txq.width.b32 %r1, [tex0];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: t1(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    mov.u64 %rd1, tex0;
; SM30-NEXT:    txq.width.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %texHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @tex0)
  %width = tail call i32 @llvm.nvvm.txq.width(i64 %texHandle)
  ret i32 %width
}


define i32 @t2(i64 %texHandle) {
; SM20-LABEL: t2(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [t2_param_0];
; SM20-NEXT:    txq.height.b32 %r1, [%rd1];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: t2(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [t2_param_0];
; SM30-NEXT:    txq.height.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %height = tail call i32 @llvm.nvvm.txq.height(i64 %texHandle)
  ret i32 %height
}

define i32 @t3() {
; SM20-LABEL: t3(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    txq.height.b32 %r1, [tex0];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: t3(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    mov.u64 %rd1, tex0;
; SM30-NEXT:    txq.height.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %texHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @tex0)
  %height = tail call i32 @llvm.nvvm.txq.height(i64 %texHandle)
  ret i32 %height
}


define i32 @s0(i64 %surfHandle) {
; SM20-LABEL: s0(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [s0_param_0];
; SM20-NEXT:    suq.width.b32 %r1, [%rd1];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: s0(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [s0_param_0];
; SM30-NEXT:    suq.width.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %width = tail call i32 @llvm.nvvm.suq.width(i64 %surfHandle)
  ret i32 %width
}

define i32 @s1() {
; SM20-LABEL: s1(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    suq.width.b32 %r1, [surf0];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: s1(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    mov.u64 %rd1, surf0;
; SM30-NEXT:    suq.width.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %surfHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @surf0)
  %width = tail call i32 @llvm.nvvm.suq.width(i64 %surfHandle)
  ret i32 %width
}


define i32 @s2(i64 %surfHandle) {
; SM20-LABEL: s2(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    ld.param.u64 %rd1, [s2_param_0];
; SM20-NEXT:    suq.height.b32 %r1, [%rd1];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: s2(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    ld.param.u64 %rd1, [s2_param_0];
; SM30-NEXT:    suq.height.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %height = tail call i32 @llvm.nvvm.suq.height(i64 %surfHandle)
  ret i32 %height
}

define i32 @s3() {
; SM20-LABEL: s3(
; SM20:       {
; SM20-NEXT:    .reg .b32 %r<2>;
; SM20-NEXT:    .reg .b64 %rd<2>;
; SM20-EMPTY:
; SM20-NEXT:  // %bb.0:
; SM20-NEXT:    suq.height.b32 %r1, [surf0];
; SM20-NEXT:    st.param.b32 [func_retval0], %r1;
; SM20-NEXT:    ret;
;
; SM30-LABEL: s3(
; SM30:       {
; SM30-NEXT:    .reg .b32 %r<2>;
; SM30-NEXT:    .reg .b64 %rd<2>;
; SM30-EMPTY:
; SM30-NEXT:  // %bb.0:
; SM30-NEXT:    mov.u64 %rd1, surf0;
; SM30-NEXT:    suq.height.b32 %r1, [%rd1];
; SM30-NEXT:    st.param.b32 [func_retval0], %r1;
; SM30-NEXT:    ret;
  %surfHandle = tail call i64 @llvm.nvvm.texsurf.handle.internal.p1(ptr addrspace(1) @surf0)
  %height = tail call i32 @llvm.nvvm.suq.height(i64 %surfHandle)
  ret i32 %height
}



!nvvm.annotations = !{!1, !2}
!1 = !{ptr addrspace(1) @tex0, !"texture", i32 1}
!2 = !{ptr addrspace(1) @surf0, !"surface", i32 1}

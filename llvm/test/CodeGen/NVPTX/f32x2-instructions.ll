; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; ## Full FP32x2 support enabled by default.
; RUN: llc < %s -mtriple=nvptx64-nvidia-cuda -mcpu=sm_100                      \
; RUN:         -O0 -disable-post-ra -frame-pointer=all -verify-machineinstrs   \
; RUN: | FileCheck --check-prefixes=CHECK-O0 %s
; RUN: %if ptxas %{                                                            \
; RUN:  llc < %s -mtriple=nvptx64-nvidia-cuda -mcpu=sm_100                     \
; RUN:           -O0 -disable-post-ra -frame-pointer=all -verify-machineinstrs \
; RUN:  | %ptxas-verify -arch=sm_100                                           \
; RUN: %}
; RUN: llc < %s -mtriple=nvptx64-nvidia-cuda -mcpu=sm_100                      \
; RUN:         -O3 -verify-machineinstrs                                       \
; RUN: | FileCheck --check-prefixes=CHECK-O3 %s
; RUN: %if ptxas %{                                                            \
; RUN:  llc < %s -mtriple=nvptx64-nvidia-cuda -mcpu=sm_100                     \
; RUN:           -O3 -verify-machineinstrs                                     \
; RUN:  | %ptxas-verify -arch=sm_100                                           \
; RUN: %}

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "nvptx64-nvidia-cuda"

define <2 x float> @test_ret_const() #0 {
;
; CHECK-O0-LABEL: test_ret_const(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    mov.f32 %f1, 0f40000000;
; CHECK-O0-NEXT:    mov.f32 %f2, 0f3F800000;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_ret_const(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    mov.f32 %f1, 0f40000000;
; CHECK-O3-NEXT:    mov.f32 %f2, 0f3F800000;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  ret <2 x float> <float 1.0, float 2.0>
}

define float @test_extract_0(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_extract_0(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_extract_0_param_0];
; CHECK-O0-NEXT:    st.param.f32 [func_retval0], %f1;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_extract_0(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_extract_0_param_0];
; CHECK-O3-NEXT:    st.param.f32 [func_retval0], %f1;
; CHECK-O3-NEXT:    ret;
  %e = extractelement <2 x float> %a, i32 0
  ret float %e
}

define float @test_extract_1(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_extract_1(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_extract_1_param_0];
; CHECK-O0-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_extract_1(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_extract_1_param_0];
; CHECK-O3-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-O3-NEXT:    ret;
  %e = extractelement <2 x float> %a, i32 1
  ret float %e
}

; NOTE: disabled as -O3 miscompiles this into pointer arithmetic on
; test_extract_i_param_0 where the symbol's address is not taken first (that
; is, moved to a temporary)
; define float @test_extract_i(<2 x float> %a, i64 %idx) #0 {
; ; CHECK-LABEL: test_extract_i(
; ; CHECK:       {
; ; CHECK-NEXT:    .reg .pred %p<2>;
; ; CHECK-NEXT:    .reg .f32 %f<4>;
; ; CHECK-NEXT:    .reg .b64 %rd<2>;
; ; CHECK-EMPTY:
; ; CHECK-NEXT:  // %bb.0:
; ; CHECK-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_extract_i_param_0];
; ; CHECK-NEXT:    ld.param.u64 %rd1, [test_extract_i_param_1];
; ; CHECK-NEXT:    setp.eq.s64 %p1, %rd1, 0;
; ; CHECK-NEXT:    selp.f32 %f3, %f1, %f2, %p1;
; ; CHECK-NEXT:    st.param.f32 [func_retval0], %f3;
; ; CHECK-NEXT:    ret;
;   %e = extractelement <2 x float> %a, i64 %idx
;   ret float %e
; }

define <2 x float> @test_fadd(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fadd(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fadd_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fadd_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    add.rn.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fadd_imm_0(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fadd_imm_0(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_0_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd5, %rd6;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_0(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_0_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> <float 1.0, float 2.0>, %a
  ret <2 x float> %r
}

define <2 x float> @test_fadd_imm_1(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fadd_imm_1(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_1_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd5, %rd6;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_1(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_1_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> %a, <float 1.0, float 2.0>
  ret <2 x float> %r
}

define <4 x float> @test_fadd_v4(<4 x float> %a, <4 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fadd_v4(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<9>;
; CHECK-O0-NEXT:    .reg .f32 %f<13>;
; CHECK-O0-NEXT:    .reg .b64 %rd<19>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_v4_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f5, %f6, %f7, %f8}, [test_fadd_v4_param_1];
; CHECK-O0-NEXT:    mov.b32 %r5, %f7;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd11, %r5;
; CHECK-O0-NEXT:    mov.b32 %r6, %f8;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd12, %r6;
; CHECK-O0-NEXT:    shl.b64 %rd13, %rd12, 32;
; CHECK-O0-NEXT:    or.b64 %rd14, %rd11, %rd13;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd10, %rd14;
; CHECK-O0-NEXT:    mov.b32 %r7, %f5;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd15, %r7;
; CHECK-O0-NEXT:    mov.b32 %r8, %f6;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd16, %r8;
; CHECK-O0-NEXT:    shl.b64 %rd17, %rd16, 32;
; CHECK-O0-NEXT:    or.b64 %rd18, %rd15, %rd17;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd2, %rd6, %rd18;
; CHECK-O0-NEXT:    mov.b64 {%f9, %f10}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f11, %f12}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f11, %f12, %f9, %f10};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_v4(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_v4_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f5, %f6, %f7, %f8}, [test_fadd_v4_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd5, {%f7, %f8};
; CHECK-O3-NEXT:    add.rn.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, {%f5, %f6};
; CHECK-O3-NEXT:    add.rn.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_0_v4(<4 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fadd_imm_0_v4(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<13>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_0_v4_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    mov.b64 %rd11, 4647714816524288000;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd10, %rd11;
; CHECK-O0-NEXT:    mov.b64 %rd12, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd2, %rd6, %rd12;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f7, %f8, %f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_0_v4(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_0_v4_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    mov.b64 %rd5, 4647714816524288000;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> <float 1.0, float 2.0, float 3.0, float 4.0>, %a
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_1_v4(<4 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fadd_imm_1_v4(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<13>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_1_v4_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    mov.b64 %rd11, 4647714816524288000;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd10, %rd11;
; CHECK-O0-NEXT:    mov.b64 %rd12, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd2, %rd6, %rd12;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f7, %f8, %f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_1_v4(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_1_v4_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    mov.b64 %rd5, 4647714816524288000;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> %a, <float 1.0, float 2.0, float 3.0, float 4.0>
  ret <4 x float> %r
}

define <2 x float> @test_fsub(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fsub(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fsub_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fsub_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    sub.rn.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fsub(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fsub_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fsub_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    sub.rn.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fsub <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fneg(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fneg(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fneg_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 0;
; CHECK-O0-NEXT:    sub.rn.f32x2 %rd1, %rd6, %rd5;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fneg(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fneg_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 0;
; CHECK-O3-NEXT:    sub.rn.f32x2 %rd4, %rd3, %rd2;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fsub <2 x float> <float 0.0, float 0.0>, %a
  ret <2 x float> %r
}

define <2 x float> @test_fmul(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fmul(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fmul_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fmul_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    mul.rn.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fmul(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fmul_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fmul_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    mul.rn.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fmul <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fma(<2 x float> %a, <2 x float> %b, <2 x float> %c) #0 {
;
; CHECK-O0-LABEL: test_fma(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<7>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<14>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fma_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_fma_param_2];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fma_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    mov.b32 %r5, %f5;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd10, %r5;
; CHECK-O0-NEXT:    mov.b32 %r6, %f6;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd11, %r6;
; CHECK-O0-NEXT:    shl.b64 %rd12, %rd11, 32;
; CHECK-O0-NEXT:    or.b64 %rd13, %rd10, %rd12;
; CHECK-O0-NEXT:    fma.rn.f32x2 %rd1, %rd5, %rd9, %rd13;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f7, %f8};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fma(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-NEXT:    .reg .b64 %rd<6>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fma_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fma_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_fma_param_2];
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f5, %f6};
; CHECK-O3-NEXT:    fma.rn.f32x2 %rd5, %rd2, %rd3, %rd4;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd5;
; CHECK-O3-NEXT:    ret;
  %r = call <2 x float> @llvm.fma(<2 x float> %a, <2 x float> %b, <2 x float> %c)
  ret <2 x float> %r
}

define <2 x float> @test_fdiv(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fdiv(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fdiv_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fdiv_param_0];
; CHECK-O0-NEXT:    div.rn.f32 %f5, %f2, %f4;
; CHECK-O0-NEXT:    div.rn.f32 %f6, %f1, %f3;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fdiv(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fdiv_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fdiv_param_1];
; CHECK-O3-NEXT:    div.rn.f32 %f5, %f2, %f4;
; CHECK-O3-NEXT:    div.rn.f32 %f6, %f1, %f3;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O3-NEXT:    ret;
  %r = fdiv <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_frem(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_frem(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<15>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_frem_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_frem_param_0];
; CHECK-O0-NEXT:    div.rn.f32 %f5, %f2, %f4;
; CHECK-O0-NEXT:    cvt.rzi.f32.f32 %f6, %f5;
; CHECK-O0-NEXT:    mul.f32 %f7, %f6, %f4;
; CHECK-O0-NEXT:    sub.f32 %f8, %f2, %f7;
; CHECK-O0-NEXT:    testp.infinite.f32 %p1, %f4;
; CHECK-O0-NEXT:    selp.f32 %f9, %f2, %f8, %p1;
; CHECK-O0-NEXT:    div.rn.f32 %f10, %f1, %f3;
; CHECK-O0-NEXT:    cvt.rzi.f32.f32 %f11, %f10;
; CHECK-O0-NEXT:    mul.f32 %f12, %f11, %f3;
; CHECK-O0-NEXT:    sub.f32 %f13, %f1, %f12;
; CHECK-O0-NEXT:    testp.infinite.f32 %p2, %f3;
; CHECK-O0-NEXT:    selp.f32 %f14, %f1, %f13, %p2;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f14, %f9};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_frem(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<15>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_frem_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_frem_param_1];
; CHECK-O3-NEXT:    div.rn.f32 %f5, %f2, %f4;
; CHECK-O3-NEXT:    cvt.rzi.f32.f32 %f6, %f5;
; CHECK-O3-NEXT:    mul.f32 %f7, %f6, %f4;
; CHECK-O3-NEXT:    sub.f32 %f8, %f2, %f7;
; CHECK-O3-NEXT:    testp.infinite.f32 %p1, %f4;
; CHECK-O3-NEXT:    selp.f32 %f9, %f2, %f8, %p1;
; CHECK-O3-NEXT:    div.rn.f32 %f10, %f1, %f3;
; CHECK-O3-NEXT:    cvt.rzi.f32.f32 %f11, %f10;
; CHECK-O3-NEXT:    mul.f32 %f12, %f11, %f3;
; CHECK-O3-NEXT:    sub.f32 %f13, %f1, %f12;
; CHECK-O3-NEXT:    testp.infinite.f32 %p2, %f3;
; CHECK-O3-NEXT:    selp.f32 %f14, %f1, %f13, %p2;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f14, %f9};
; CHECK-O3-NEXT:    ret;
  %r = frem <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fadd_ftz(<2 x float> %a, <2 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_fadd_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fadd_ftz_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fadd_ftz_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fadd_imm_0_ftz(<2 x float> %a) #2 {
;
; CHECK-O0-LABEL: test_fadd_imm_0_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_0_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd5, %rd6;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_0_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_0_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> <float 1.0, float 2.0>, %a
  ret <2 x float> %r
}

define <2 x float> @test_fadd_imm_1_ftz(<2 x float> %a) #2 {
;
; CHECK-O0-LABEL: test_fadd_imm_1_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_1_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd5, %rd6;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_1_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fadd_imm_1_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fadd <2 x float> %a, <float 1.0, float 2.0>
  ret <2 x float> %r
}

define <4 x float> @test_fadd_v4_ftz(<4 x float> %a, <4 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_fadd_v4_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<9>;
; CHECK-O0-NEXT:    .reg .f32 %f<13>;
; CHECK-O0-NEXT:    .reg .b64 %rd<19>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_v4_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f5, %f6, %f7, %f8}, [test_fadd_v4_ftz_param_1];
; CHECK-O0-NEXT:    mov.b32 %r5, %f7;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd11, %r5;
; CHECK-O0-NEXT:    mov.b32 %r6, %f8;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd12, %r6;
; CHECK-O0-NEXT:    shl.b64 %rd13, %rd12, 32;
; CHECK-O0-NEXT:    or.b64 %rd14, %rd11, %rd13;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd10, %rd14;
; CHECK-O0-NEXT:    mov.b32 %r7, %f5;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd15, %r7;
; CHECK-O0-NEXT:    mov.b32 %r8, %f6;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd16, %r8;
; CHECK-O0-NEXT:    shl.b64 %rd17, %rd16, 32;
; CHECK-O0-NEXT:    or.b64 %rd18, %rd15, %rd17;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd2, %rd6, %rd18;
; CHECK-O0-NEXT:    mov.b64 {%f9, %f10}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f11, %f12}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f11, %f12, %f9, %f10};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_v4_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_v4_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f5, %f6, %f7, %f8}, [test_fadd_v4_ftz_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd5, {%f7, %f8};
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, {%f5, %f6};
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> %a, %b
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_0_v4_ftz(<4 x float> %a) #2 {
;
; CHECK-O0-LABEL: test_fadd_imm_0_v4_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<13>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_0_v4_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    mov.b64 %rd11, 4647714816524288000;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd10, %rd11;
; CHECK-O0-NEXT:    mov.b64 %rd12, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd2, %rd6, %rd12;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f7, %f8, %f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_0_v4_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_0_v4_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    mov.b64 %rd5, 4647714816524288000;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> <float 1.0, float 2.0, float 3.0, float 4.0>, %a
  ret <4 x float> %r
}

define <4 x float> @test_fadd_imm_1_v4_ftz(<4 x float> %a) #2 {
;
; CHECK-O0-LABEL: test_fadd_imm_1_v4_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<13>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_1_v4_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd4, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd5, %rd4, 32;
; CHECK-O0-NEXT:    or.b64 %rd6, %rd3, %rd5;
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd8, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd9, %rd8, 32;
; CHECK-O0-NEXT:    or.b64 %rd10, %rd7, %rd9;
; CHECK-O0-NEXT:    mov.b64 %rd11, 4647714816524288000;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd1, %rd10, %rd11;
; CHECK-O0-NEXT:    mov.b64 %rd12, 4611686019492741120;
; CHECK-O0-NEXT:    add.rn.ftz.f32x2 %rd2, %rd6, %rd12;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd2;
; CHECK-O0-NEXT:    st.param.v4.f32 [func_retval0], {%f7, %f8, %f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fadd_imm_1_v4_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v4.f32 {%f1, %f2, %f3, %f4}, [test_fadd_imm_1_v4_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f3, %f4};
; CHECK-O3-NEXT:    mov.b64 %rd5, 4647714816524288000;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd6, %rd4, %rd5;
; CHECK-O3-NEXT:    mov.b64 %rd7, 4611686019492741120;
; CHECK-O3-NEXT:    add.rn.ftz.f32x2 %rd8, %rd3, %rd7;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd6};
; CHECK-O3-NEXT:    ret;
  %r = fadd <4 x float> %a, <float 1.0, float 2.0, float 3.0, float 4.0>
  ret <4 x float> %r
}

define <2 x float> @test_fsub_ftz(<2 x float> %a, <2 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_fsub_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fsub_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fsub_ftz_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    sub.rn.ftz.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fsub_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fsub_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fsub_ftz_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    sub.rn.ftz.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fsub <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fneg_ftz(<2 x float> %a) #2 {
;
; CHECK-O0-LABEL: test_fneg_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fneg_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    mov.b64 %rd6, 0;
; CHECK-O0-NEXT:    sub.rn.ftz.f32x2 %rd1, %rd6, %rd5;
; CHECK-O0-NEXT:    mov.b64 {%f3, %f4}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fneg_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fneg_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    mov.b64 %rd3, 0;
; CHECK-O3-NEXT:    sub.rn.ftz.f32x2 %rd4, %rd3, %rd2;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fsub <2 x float> <float 0.0, float 0.0>, %a
  ret <2 x float> %r
}

define <2 x float> @test_fmul_ftz(<2 x float> %a, <2 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_fmul_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<5>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fmul_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fmul_ftz_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    mul.rn.ftz.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fmul_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fmul_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fmul_ftz_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    mul.rn.ftz.f32x2 %rd4, %rd2, %rd3;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %r = fmul <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_fma_ftz(<2 x float> %a, <2 x float> %b, <2 x float> %c) #2 {
;
; CHECK-O0-LABEL: test_fma_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<7>;
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<14>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fma_ftz_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_fma_ftz_param_2];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fma_ftz_param_1];
; CHECK-O0-NEXT:    mov.b32 %r3, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    mov.b32 %r5, %f5;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd10, %r5;
; CHECK-O0-NEXT:    mov.b32 %r6, %f6;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd11, %r6;
; CHECK-O0-NEXT:    shl.b64 %rd12, %rd11, 32;
; CHECK-O0-NEXT:    or.b64 %rd13, %rd10, %rd12;
; CHECK-O0-NEXT:    fma.rn.ftz.f32x2 %rd1, %rd5, %rd9, %rd13;
; CHECK-O0-NEXT:    mov.b64 {%f7, %f8}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f7, %f8};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fma_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-NEXT:    .reg .b64 %rd<6>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fma_ftz_param_0];
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f1, %f2};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fma_ftz_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_fma_ftz_param_2];
; CHECK-O3-NEXT:    mov.b64 %rd4, {%f5, %f6};
; CHECK-O3-NEXT:    fma.rn.ftz.f32x2 %rd5, %rd2, %rd3, %rd4;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd5;
; CHECK-O3-NEXT:    ret;
  %r = call <2 x float> @llvm.fma(<2 x float> %a, <2 x float> %b, <2 x float> %c)
  ret <2 x float> %r
}

define <2 x float> @test_fdiv_ftz(<2 x float> %a, <2 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_fdiv_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fdiv_ftz_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fdiv_ftz_param_0];
; CHECK-O0-NEXT:    div.rn.ftz.f32 %f5, %f2, %f4;
; CHECK-O0-NEXT:    div.rn.ftz.f32 %f6, %f1, %f3;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fdiv_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fdiv_ftz_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fdiv_ftz_param_1];
; CHECK-O3-NEXT:    div.rn.ftz.f32 %f5, %f2, %f4;
; CHECK-O3-NEXT:    div.rn.ftz.f32 %f6, %f1, %f3;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O3-NEXT:    ret;
  %r = fdiv <2 x float> %a, %b
  ret <2 x float> %r
}

define <2 x float> @test_frem_ftz(<2 x float> %a, <2 x float> %b) #2 {
;
; CHECK-O0-LABEL: test_frem_ftz(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<15>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_frem_ftz_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_frem_ftz_param_0];
; CHECK-O0-NEXT:    div.rn.ftz.f32 %f5, %f2, %f4;
; CHECK-O0-NEXT:    cvt.rzi.ftz.f32.f32 %f6, %f5;
; CHECK-O0-NEXT:    mul.ftz.f32 %f7, %f6, %f4;
; CHECK-O0-NEXT:    sub.ftz.f32 %f8, %f2, %f7;
; CHECK-O0-NEXT:    testp.infinite.f32 %p1, %f4;
; CHECK-O0-NEXT:    selp.f32 %f9, %f2, %f8, %p1;
; CHECK-O0-NEXT:    div.rn.ftz.f32 %f10, %f1, %f3;
; CHECK-O0-NEXT:    cvt.rzi.ftz.f32.f32 %f11, %f10;
; CHECK-O0-NEXT:    mul.ftz.f32 %f12, %f11, %f3;
; CHECK-O0-NEXT:    sub.ftz.f32 %f13, %f1, %f12;
; CHECK-O0-NEXT:    testp.infinite.f32 %p2, %f3;
; CHECK-O0-NEXT:    selp.f32 %f14, %f1, %f13, %p2;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f14, %f9};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_frem_ftz(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<15>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_frem_ftz_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_frem_ftz_param_1];
; CHECK-O3-NEXT:    div.rn.ftz.f32 %f5, %f2, %f4;
; CHECK-O3-NEXT:    cvt.rzi.ftz.f32.f32 %f6, %f5;
; CHECK-O3-NEXT:    mul.ftz.f32 %f7, %f6, %f4;
; CHECK-O3-NEXT:    sub.ftz.f32 %f8, %f2, %f7;
; CHECK-O3-NEXT:    testp.infinite.f32 %p1, %f4;
; CHECK-O3-NEXT:    selp.f32 %f9, %f2, %f8, %p1;
; CHECK-O3-NEXT:    div.rn.ftz.f32 %f10, %f1, %f3;
; CHECK-O3-NEXT:    cvt.rzi.ftz.f32.f32 %f11, %f10;
; CHECK-O3-NEXT:    mul.ftz.f32 %f12, %f11, %f3;
; CHECK-O3-NEXT:    sub.ftz.f32 %f13, %f1, %f12;
; CHECK-O3-NEXT:    testp.infinite.f32 %p2, %f3;
; CHECK-O3-NEXT:    selp.f32 %f14, %f1, %f13, %p2;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f14, %f9};
; CHECK-O3-NEXT:    ret;
  %r = frem <2 x float> %a, %b
  ret <2 x float> %r
}

define void @test_ldst_v2f32(ptr %a, ptr %b) #0 {
;
; CHECK-O0-LABEL: test_ldst_v2f32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.u64 %rd2, [test_ldst_v2f32_param_1];
; CHECK-O0-NEXT:    ld.param.u64 %rd1, [test_ldst_v2f32_param_0];
; CHECK-O0-NEXT:    ld.v2.f32 {%f1, %f2}, [%rd1];
; CHECK-O0-NEXT:    st.v2.f32 [%rd2], {%f1, %f2};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_ldst_v2f32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.u64 %rd1, [test_ldst_v2f32_param_0];
; CHECK-O3-NEXT:    ld.v2.f32 {%f1, %f2}, [%rd1];
; CHECK-O3-NEXT:    ld.param.u64 %rd2, [test_ldst_v2f32_param_1];
; CHECK-O3-NEXT:    st.v2.f32 [%rd2], {%f1, %f2};
; CHECK-O3-NEXT:    ret;
  %t1 = load <2 x float>, ptr %a
  store <2 x float> %t1, ptr %b, align 32
  ret void
}

define void @test_ldst_v3f32(ptr %a, ptr %b) #0 {
;
; CHECK-O0-LABEL: test_ldst_v3f32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<2>;
; CHECK-O0-NEXT:    .reg .b64 %rd<4>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.u64 %rd2, [test_ldst_v3f32_param_1];
; CHECK-O0-NEXT:    ld.param.u64 %rd1, [test_ldst_v3f32_param_0];
; CHECK-O0-NEXT:    ld.u64 %rd3, [%rd1];
; CHECK-O0-NEXT:    ld.f32 %f1, [%rd1+8];
; CHECK-O0-NEXT:    st.f32 [%rd2+8], %f1;
; CHECK-O0-NEXT:    st.u64 [%rd2], %rd3;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_ldst_v3f32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<2>;
; CHECK-O3-NEXT:    .reg .b64 %rd<4>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.u64 %rd1, [test_ldst_v3f32_param_0];
; CHECK-O3-NEXT:    ld.u64 %rd2, [%rd1];
; CHECK-O3-NEXT:    ld.f32 %f1, [%rd1+8];
; CHECK-O3-NEXT:    ld.param.u64 %rd3, [test_ldst_v3f32_param_1];
; CHECK-O3-NEXT:    st.f32 [%rd3+8], %f1;
; CHECK-O3-NEXT:    st.u64 [%rd3], %rd2;
; CHECK-O3-NEXT:    ret;
  %t1 = load <3 x float>, ptr %a
  store <3 x float> %t1, ptr %b, align 32
  ret void
}

define void @test_ldst_v4f32(ptr %a, ptr %b) #0 {
;
; CHECK-O0-LABEL: test_ldst_v4f32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.u64 %rd2, [test_ldst_v4f32_param_1];
; CHECK-O0-NEXT:    ld.param.u64 %rd1, [test_ldst_v4f32_param_0];
; CHECK-O0-NEXT:    ld.v4.f32 {%f1, %f2, %f3, %f4}, [%rd1];
; CHECK-O0-NEXT:    st.v4.f32 [%rd2], {%f1, %f2, %f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_ldst_v4f32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.u64 %rd1, [test_ldst_v4f32_param_0];
; CHECK-O3-NEXT:    ld.v4.f32 {%f1, %f2, %f3, %f4}, [%rd1];
; CHECK-O3-NEXT:    ld.param.u64 %rd2, [test_ldst_v4f32_param_1];
; CHECK-O3-NEXT:    st.v4.f32 [%rd2], {%f1, %f2, %f3, %f4};
; CHECK-O3-NEXT:    ret;
  %t1 = load <4 x float>, ptr %a
  store <4 x float> %t1, ptr %b, align 32
  ret void
}

define void @test_ldst_v8f32(ptr %a, ptr %b) #0 {
;
; CHECK-O0-LABEL: test_ldst_v8f32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.u64 %rd2, [test_ldst_v8f32_param_1];
; CHECK-O0-NEXT:    ld.param.u64 %rd1, [test_ldst_v8f32_param_0];
; CHECK-O0-NEXT:    ld.v4.f32 {%f1, %f2, %f3, %f4}, [%rd1];
; CHECK-O0-NEXT:    ld.v4.f32 {%f5, %f6, %f7, %f8}, [%rd1+16];
; CHECK-O0-NEXT:    st.v4.f32 [%rd2+16], {%f5, %f6, %f7, %f8};
; CHECK-O0-NEXT:    st.v4.f32 [%rd2], {%f1, %f2, %f3, %f4};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_ldst_v8f32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.u64 %rd1, [test_ldst_v8f32_param_0];
; CHECK-O3-NEXT:    ld.v4.f32 {%f1, %f2, %f3, %f4}, [%rd1];
; CHECK-O3-NEXT:    ld.v4.f32 {%f5, %f6, %f7, %f8}, [%rd1+16];
; CHECK-O3-NEXT:    ld.param.u64 %rd2, [test_ldst_v8f32_param_1];
; CHECK-O3-NEXT:    st.v4.f32 [%rd2+16], {%f5, %f6, %f7, %f8};
; CHECK-O3-NEXT:    st.v4.f32 [%rd2], {%f1, %f2, %f3, %f4};
; CHECK-O3-NEXT:    ret;
  %t1 = load <8 x float>, ptr %a
  store <8 x float> %t1, ptr %b, align 32
  ret void
}

declare <2 x float> @test_callee(<2 x float> %a, <2 x float> %b) #0

define <2 x float> @test_call(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_call(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_call_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_call_param_0];
; CHECK-O0-NEXT:    { // callseq 0, 0
; CHECK-O0-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param0], {%f1, %f2};
; CHECK-O0-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param1], {%f3, %f4};
; CHECK-O0-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O0-NEXT:    call.uni (retval0),
; CHECK-O0-NEXT:    test_callee,
; CHECK-O0-NEXT:    (
; CHECK-O0-NEXT:    param0,
; CHECK-O0-NEXT:    param1
; CHECK-O0-NEXT:    );
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O0-NEXT:    } // callseq 0
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_call(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_call_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_call_param_1];
; CHECK-O3-NEXT:    { // callseq 0, 0
; CHECK-O3-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param0], {%f1, %f2};
; CHECK-O3-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param1], {%f3, %f4};
; CHECK-O3-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O3-NEXT:    call.uni (retval0),
; CHECK-O3-NEXT:    test_callee,
; CHECK-O3-NEXT:    (
; CHECK-O3-NEXT:    param0,
; CHECK-O3-NEXT:    param1
; CHECK-O3-NEXT:    );
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O3-NEXT:    } // callseq 0
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O3-NEXT:    ret;
  %r = call <2 x float> @test_callee(<2 x float> %a, <2 x float> %b)
  ret <2 x float> %r
}

define <2 x float> @test_call_flipped(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_call_flipped(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_call_flipped_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_call_flipped_param_0];
; CHECK-O0-NEXT:    { // callseq 1, 0
; CHECK-O0-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param0], {%f3, %f4};
; CHECK-O0-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param1], {%f1, %f2};
; CHECK-O0-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O0-NEXT:    call.uni (retval0),
; CHECK-O0-NEXT:    test_callee,
; CHECK-O0-NEXT:    (
; CHECK-O0-NEXT:    param0,
; CHECK-O0-NEXT:    param1
; CHECK-O0-NEXT:    );
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O0-NEXT:    } // callseq 1
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_call_flipped(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_call_flipped_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_call_flipped_param_1];
; CHECK-O3-NEXT:    { // callseq 1, 0
; CHECK-O3-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param0], {%f3, %f4};
; CHECK-O3-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param1], {%f1, %f2};
; CHECK-O3-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O3-NEXT:    call.uni (retval0),
; CHECK-O3-NEXT:    test_callee,
; CHECK-O3-NEXT:    (
; CHECK-O3-NEXT:    param0,
; CHECK-O3-NEXT:    param1
; CHECK-O3-NEXT:    );
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O3-NEXT:    } // callseq 1
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O3-NEXT:    ret;
  %r = call <2 x float> @test_callee(<2 x float> %b, <2 x float> %a)
  ret <2 x float> %r
}

define <2 x float> @test_tailcall_flipped(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_tailcall_flipped(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<9>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_tailcall_flipped_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_tailcall_flipped_param_0];
; CHECK-O0-NEXT:    { // callseq 2, 0
; CHECK-O0-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param0], {%f3, %f4};
; CHECK-O0-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O0-NEXT:    st.param.v2.f32 [param1], {%f1, %f2};
; CHECK-O0-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O0-NEXT:    call.uni (retval0),
; CHECK-O0-NEXT:    test_callee,
; CHECK-O0-NEXT:    (
; CHECK-O0-NEXT:    param0,
; CHECK-O0-NEXT:    param1
; CHECK-O0-NEXT:    );
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O0-NEXT:    } // callseq 2
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_tailcall_flipped(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<9>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_tailcall_flipped_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_tailcall_flipped_param_1];
; CHECK-O3-NEXT:    { // callseq 2, 0
; CHECK-O3-NEXT:    .param .align 8 .b8 param0[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param0], {%f3, %f4};
; CHECK-O3-NEXT:    .param .align 8 .b8 param1[8];
; CHECK-O3-NEXT:    st.param.v2.f32 [param1], {%f1, %f2};
; CHECK-O3-NEXT:    .param .align 8 .b8 retval0[8];
; CHECK-O3-NEXT:    call.uni (retval0),
; CHECK-O3-NEXT:    test_callee,
; CHECK-O3-NEXT:    (
; CHECK-O3-NEXT:    param0,
; CHECK-O3-NEXT:    param1
; CHECK-O3-NEXT:    );
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [retval0];
; CHECK-O3-NEXT:    } // callseq 2
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O3-NEXT:    ret;
  %r = tail call <2 x float> @test_callee(<2 x float> %b, <2 x float> %a)
  ret <2 x float> %r
}

define <2 x float> @test_select(<2 x float> %a, <2 x float> %b, i1 zeroext %c) #0 {
;
; CHECK-O0-LABEL: test_select(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<2>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.u8 %rs1, [test_select_param_2];
; CHECK-O0-NEXT:    and.b16 %rs2, %rs1, 1;
; CHECK-O0-NEXT:    setp.eq.b16 %p1, %rs2, 1;
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_param_0];
; CHECK-O0-NEXT:    selp.f32 %f5, %f2, %f4, %p1;
; CHECK-O0-NEXT:    selp.f32 %f6, %f1, %f3, %p1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_select(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<2>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.u8 %rs1, [test_select_param_2];
; CHECK-O3-NEXT:    and.b16 %rs2, %rs1, 1;
; CHECK-O3-NEXT:    setp.eq.b16 %p1, %rs2, 1;
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_param_1];
; CHECK-O3-NEXT:    selp.f32 %f5, %f2, %f4, %p1;
; CHECK-O3-NEXT:    selp.f32 %f6, %f1, %f3, %p1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O3-NEXT:    ret;
  %r = select i1 %c, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x float> @test_select_cc(<2 x float> %a, <2 x float> %b, <2 x float> %c, <2 x float> %d) #0 {
;
; CHECK-O0-LABEL: test_select_cc(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<11>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f7, %f8}, [test_select_cc_param_3];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_select_cc_param_2];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_param_0];
; CHECK-O0-NEXT:    setp.neu.f32 %p1, %f5, %f7;
; CHECK-O0-NEXT:    setp.neu.f32 %p2, %f6, %f8;
; CHECK-O0-NEXT:    selp.f32 %f9, %f2, %f4, %p2;
; CHECK-O0-NEXT:    selp.f32 %f10, %f1, %f3, %p1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f10, %f9};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_select_cc(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<11>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_param_2];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f5, %f6}, [test_select_cc_param_3];
; CHECK-O3-NEXT:    setp.neu.f32 %p1, %f3, %f5;
; CHECK-O3-NEXT:    setp.neu.f32 %p2, %f4, %f6;
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f7, %f8}, [test_select_cc_param_1];
; CHECK-O3-NEXT:    selp.f32 %f9, %f2, %f8, %p2;
; CHECK-O3-NEXT:    selp.f32 %f10, %f1, %f7, %p1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f10, %f9};
; CHECK-O3-NEXT:    ret;
  %cc = fcmp une <2 x float> %c, %d
  %r = select <2 x i1> %cc, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x double> @test_select_cc_f64_f32(<2 x double> %a, <2 x double> %b, <2 x float> %c, <2 x float> %d) #0 {
;
; CHECK-O0-LABEL: test_select_cc_f64_f32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-NEXT:    .reg .f64 %fd<7>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_f64_f32_param_3];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_f64_f32_param_2];
; CHECK-O0-NEXT:    ld.param.v2.f64 {%fd3, %fd4}, [test_select_cc_f64_f32_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_select_cc_f64_f32_param_0];
; CHECK-O0-NEXT:    setp.neu.f32 %p1, %f1, %f3;
; CHECK-O0-NEXT:    setp.neu.f32 %p2, %f2, %f4;
; CHECK-O0-NEXT:    selp.f64 %fd5, %fd2, %fd4, %p2;
; CHECK-O0-NEXT:    selp.f64 %fd6, %fd1, %fd3, %p1;
; CHECK-O0-NEXT:    st.param.v2.f64 [func_retval0], {%fd6, %fd5};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_select_cc_f64_f32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .f64 %fd<7>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_select_cc_f64_f32_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_f64_f32_param_2];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_f64_f32_param_3];
; CHECK-O3-NEXT:    setp.neu.f32 %p1, %f1, %f3;
; CHECK-O3-NEXT:    setp.neu.f32 %p2, %f2, %f4;
; CHECK-O3-NEXT:    ld.param.v2.f64 {%fd3, %fd4}, [test_select_cc_f64_f32_param_1];
; CHECK-O3-NEXT:    selp.f64 %fd5, %fd2, %fd4, %p2;
; CHECK-O3-NEXT:    selp.f64 %fd6, %fd1, %fd3, %p1;
; CHECK-O3-NEXT:    st.param.v2.f64 [func_retval0], {%fd6, %fd5};
; CHECK-O3-NEXT:    ret;
  %cc = fcmp une <2 x float> %c, %d
  %r = select <2 x i1> %cc, <2 x double> %a, <2 x double> %b
  ret <2 x double> %r
}

define <2 x float> @test_select_cc_f32_f64(<2 x float> %a, <2 x float> %b, <2 x double> %c, <2 x double> %d) #0 {
;
; CHECK-O0-LABEL: test_select_cc_f32_f64(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .f64 %fd<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f64 {%fd3, %fd4}, [test_select_cc_f32_f64_param_3];
; CHECK-O0-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_select_cc_f32_f64_param_2];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_f32_f64_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_f32_f64_param_0];
; CHECK-O0-NEXT:    setp.neu.f64 %p1, %fd1, %fd3;
; CHECK-O0-NEXT:    setp.neu.f64 %p2, %fd2, %fd4;
; CHECK-O0-NEXT:    selp.f32 %f5, %f2, %f4, %p2;
; CHECK-O0-NEXT:    selp.f32 %f6, %f1, %f3, %p1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_select_cc_f32_f64(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<7>;
; CHECK-O3-NEXT:    .reg .f64 %fd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_select_cc_f32_f64_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_select_cc_f32_f64_param_2];
; CHECK-O3-NEXT:    ld.param.v2.f64 {%fd3, %fd4}, [test_select_cc_f32_f64_param_3];
; CHECK-O3-NEXT:    setp.neu.f64 %p1, %fd1, %fd3;
; CHECK-O3-NEXT:    setp.neu.f64 %p2, %fd2, %fd4;
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_select_cc_f32_f64_param_1];
; CHECK-O3-NEXT:    selp.f32 %f5, %f2, %f4, %p2;
; CHECK-O3-NEXT:    selp.f32 %f6, %f1, %f3, %p1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f6, %f5};
; CHECK-O3-NEXT:    ret;
  %cc = fcmp une <2 x double> %c, %d
  %r = select <2 x i1> %cc, <2 x float> %a, <2 x float> %b
  ret <2 x float> %r
}

define <2 x i1> @test_fcmp_une(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_une(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_une_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_une_param_0];
; CHECK-O0-NEXT:    setp.neu.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.neu.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_une(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_une_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_une_param_1];
; CHECK-O3-NEXT:    setp.neu.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.neu.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp une <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ueq(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ueq(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ueq_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ueq_param_0];
; CHECK-O0-NEXT:    setp.equ.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.equ.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ueq(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ueq_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ueq_param_1];
; CHECK-O3-NEXT:    setp.equ.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.equ.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ueq <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ugt(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ugt(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ugt_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ugt_param_0];
; CHECK-O0-NEXT:    setp.gtu.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.gtu.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ugt(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ugt_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ugt_param_1];
; CHECK-O3-NEXT:    setp.gtu.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.gtu.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ugt <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uge(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_uge(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_uge_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_uge_param_0];
; CHECK-O0-NEXT:    setp.geu.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.geu.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_uge(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_uge_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_uge_param_1];
; CHECK-O3-NEXT:    setp.geu.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.geu.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp uge <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ult(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ult(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ult_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ult_param_0];
; CHECK-O0-NEXT:    setp.ltu.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.ltu.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ult(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ult_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ult_param_1];
; CHECK-O3-NEXT:    setp.ltu.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.ltu.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ult <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ule(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ule(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ule_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ule_param_0];
; CHECK-O0-NEXT:    setp.leu.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.leu.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ule(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ule_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ule_param_1];
; CHECK-O3-NEXT:    setp.leu.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.leu.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ule <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_uno(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_uno(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_uno_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_uno_param_0];
; CHECK-O0-NEXT:    setp.nan.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.nan.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_uno(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_uno_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_uno_param_1];
; CHECK-O3-NEXT:    setp.nan.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.nan.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp uno <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_one(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_one(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_one_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_one_param_0];
; CHECK-O0-NEXT:    setp.ne.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.ne.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_one(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_one_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_one_param_1];
; CHECK-O3-NEXT:    setp.ne.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.ne.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp one <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oeq(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_oeq(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_oeq_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_oeq_param_0];
; CHECK-O0-NEXT:    setp.eq.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.eq.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_oeq(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_oeq_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_oeq_param_1];
; CHECK-O3-NEXT:    setp.eq.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.eq.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp oeq <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ogt(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ogt(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ogt_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ogt_param_0];
; CHECK-O0-NEXT:    setp.gt.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.gt.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ogt(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ogt_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ogt_param_1];
; CHECK-O3-NEXT:    setp.gt.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.gt.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ogt <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_oge(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_oge(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_oge_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_oge_param_0];
; CHECK-O0-NEXT:    setp.ge.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.ge.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_oge(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_oge_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_oge_param_1];
; CHECK-O3-NEXT:    setp.ge.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.ge.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp oge <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_olt(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_olt(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_olt_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_olt_param_0];
; CHECK-O0-NEXT:    setp.lt.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.lt.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_olt(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_olt_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_olt_param_1];
; CHECK-O3-NEXT:    setp.lt.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.lt.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp olt <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ole(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ole(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ole_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ole_param_0];
; CHECK-O0-NEXT:    setp.le.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.le.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ole(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ole_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ole_param_1];
; CHECK-O3-NEXT:    setp.le.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.le.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ole <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i1> @test_fcmp_ord(<2 x float> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_fcmp_ord(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .pred %p<3>;
; CHECK-O0-NEXT:    .reg .b16 %rs<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<5>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ord_param_1];
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ord_param_0];
; CHECK-O0-NEXT:    setp.num.f32 %p1, %f2, %f4;
; CHECK-O0-NEXT:    setp.num.f32 %p2, %f1, %f3;
; CHECK-O0-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O0-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O0-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fcmp_ord(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .pred %p<3>;
; CHECK-O3-NEXT:    .reg .b16 %rs<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fcmp_ord_param_0];
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_fcmp_ord_param_1];
; CHECK-O3-NEXT:    setp.num.f32 %p1, %f2, %f4;
; CHECK-O3-NEXT:    setp.num.f32 %p2, %f1, %f3;
; CHECK-O3-NEXT:    selp.u16 %rs1, -1, 0, %p2;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0], %rs1;
; CHECK-O3-NEXT:    selp.u16 %rs2, -1, 0, %p1;
; CHECK-O3-NEXT:    st.param.b8 [func_retval0+1], %rs2;
; CHECK-O3-NEXT:    ret;
  %r = fcmp ord <2 x float> %a, %b
  ret <2 x i1> %r
}

define <2 x i32> @test_fptosi_i32(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fptosi_i32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptosi_i32_param_0];
; CHECK-O0-NEXT:    cvt.rzi.s32.f32 %r1, %f2;
; CHECK-O0-NEXT:    cvt.rzi.s32.f32 %r2, %f1;
; CHECK-O0-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fptosi_i32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptosi_i32_param_0];
; CHECK-O3-NEXT:    cvt.rzi.s32.f32 %r1, %f2;
; CHECK-O3-NEXT:    cvt.rzi.s32.f32 %r2, %f1;
; CHECK-O3-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O3-NEXT:    ret;
  %r = fptosi <2 x float> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptosi_i64(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fptosi_i64(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptosi_i64_param_0];
; CHECK-O0-NEXT:    cvt.rzi.s64.f32 %rd1, %f2;
; CHECK-O0-NEXT:    cvt.rzi.s64.f32 %rd2, %f1;
; CHECK-O0-NEXT:    st.param.v2.b64 [func_retval0], {%rd2, %rd1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fptosi_i64(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptosi_i64_param_0];
; CHECK-O3-NEXT:    cvt.rzi.s64.f32 %rd1, %f2;
; CHECK-O3-NEXT:    cvt.rzi.s64.f32 %rd2, %f1;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd2, %rd1};
; CHECK-O3-NEXT:    ret;
  %r = fptosi <2 x float> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x i32> @test_fptoui_2xi32(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fptoui_2xi32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptoui_2xi32_param_0];
; CHECK-O0-NEXT:    cvt.rzi.u32.f32 %r1, %f2;
; CHECK-O0-NEXT:    cvt.rzi.u32.f32 %r2, %f1;
; CHECK-O0-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fptoui_2xi32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptoui_2xi32_param_0];
; CHECK-O3-NEXT:    cvt.rzi.u32.f32 %r1, %f2;
; CHECK-O3-NEXT:    cvt.rzi.u32.f32 %r2, %f1;
; CHECK-O3-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O3-NEXT:    ret;
  %r = fptoui <2 x float> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x i64> @test_fptoui_2xi64(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fptoui_2xi64(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptoui_2xi64_param_0];
; CHECK-O0-NEXT:    cvt.rzi.u64.f32 %rd1, %f2;
; CHECK-O0-NEXT:    cvt.rzi.u64.f32 %rd2, %f1;
; CHECK-O0-NEXT:    st.param.v2.b64 [func_retval0], {%rd2, %rd1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fptoui_2xi64(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fptoui_2xi64_param_0];
; CHECK-O3-NEXT:    cvt.rzi.u64.f32 %rd1, %f2;
; CHECK-O3-NEXT:    cvt.rzi.u64.f32 %rd2, %f1;
; CHECK-O3-NEXT:    st.param.v2.b64 [func_retval0], {%rd2, %rd1};
; CHECK-O3-NEXT:    ret;
  %r = fptoui <2 x float> %a to <2 x i64>
  ret <2 x i64> %r
}

define <2 x float> @test_uitofp_2xi32(<2 x i32> %a) #0 {
;
; CHECK-O0-LABEL: test_uitofp_2xi32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_uitofp_2xi32_param_0];
; CHECK-O0-NEXT:    cvt.rn.f32.u32 %f1, %r2;
; CHECK-O0-NEXT:    cvt.rn.f32.u32 %f2, %r1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_uitofp_2xi32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_uitofp_2xi32_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.u32 %f1, %r2;
; CHECK-O3-NEXT:    cvt.rn.f32.u32 %f2, %r1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = uitofp <2 x i32> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x float> @test_uitofp_2xi64(<2 x i64> %a) #0 {
;
; CHECK-O0-LABEL: test_uitofp_2xi64(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.u64 {%rd1, %rd2}, [test_uitofp_2xi64_param_0];
; CHECK-O0-NEXT:    cvt.rn.f32.u64 %f1, %rd2;
; CHECK-O0-NEXT:    cvt.rn.f32.u64 %f2, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_uitofp_2xi64(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.u64 {%rd1, %rd2}, [test_uitofp_2xi64_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.u64 %f1, %rd2;
; CHECK-O3-NEXT:    cvt.rn.f32.u64 %f2, %rd1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = uitofp <2 x i64> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x float> @test_sitofp_2xi32(<2 x i32> %a) #0 {
;
; CHECK-O0-LABEL: test_sitofp_2xi32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_sitofp_2xi32_param_0];
; CHECK-O0-NEXT:    cvt.rn.f32.s32 %f1, %r2;
; CHECK-O0-NEXT:    cvt.rn.f32.s32 %f2, %r1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_sitofp_2xi32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_sitofp_2xi32_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.s32 %f1, %r2;
; CHECK-O3-NEXT:    cvt.rn.f32.s32 %f2, %r1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = sitofp <2 x i32> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x float> @test_sitofp_2xi64(<2 x i64> %a) #0 {
;
; CHECK-O0-LABEL: test_sitofp_2xi64(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.u64 {%rd1, %rd2}, [test_sitofp_2xi64_param_0];
; CHECK-O0-NEXT:    cvt.rn.f32.s64 %f1, %rd2;
; CHECK-O0-NEXT:    cvt.rn.f32.s64 %f2, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_sitofp_2xi64(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .b64 %rd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.u64 {%rd1, %rd2}, [test_sitofp_2xi64_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.s64 %f1, %rd2;
; CHECK-O3-NEXT:    cvt.rn.f32.s64 %f2, %rd1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = sitofp <2 x i64> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x float> @test_uitofp_2xi32_fadd(<2 x i32> %a, <2 x float> %b) #0 {
;
; CHECK-O0-LABEL: test_uitofp_2xi32_fadd(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<7>;
; CHECK-O0-NEXT:    .reg .f32 %f<7>;
; CHECK-O0-NEXT:    .reg .b64 %rd<10>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_uitofp_2xi32_fadd_param_1];
; CHECK-O0-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_uitofp_2xi32_fadd_param_0];
; CHECK-O0-NEXT:    mov.b32 %r3, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r3;
; CHECK-O0-NEXT:    mov.b32 %r4, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd3, %r4;
; CHECK-O0-NEXT:    shl.b64 %rd4, %rd3, 32;
; CHECK-O0-NEXT:    or.b64 %rd5, %rd2, %rd4;
; CHECK-O0-NEXT:    cvt.rn.f32.u32 %f3, %r1;
; CHECK-O0-NEXT:    mov.b32 %r5, %f3;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd6, %r5;
; CHECK-O0-NEXT:    cvt.rn.f32.u32 %f4, %r2;
; CHECK-O0-NEXT:    mov.b32 %r6, %f4;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd7, %r6;
; CHECK-O0-NEXT:    shl.b64 %rd8, %rd7, 32;
; CHECK-O0-NEXT:    or.b64 %rd9, %rd6, %rd8;
; CHECK-O0-NEXT:    add.rn.f32x2 %rd1, %rd5, %rd9;
; CHECK-O0-NEXT:    mov.b64 {%f5, %f6}, %rd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f5, %f6};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_uitofp_2xi32_fadd(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<5>;
; CHECK-O3-NEXT:    .reg .b64 %rd<5>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_uitofp_2xi32_fadd_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.u32 %f1, %r2;
; CHECK-O3-NEXT:    cvt.rn.f32.u32 %f2, %r1;
; CHECK-O3-NEXT:    mov.b64 %rd2, {%f2, %f1};
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f3, %f4}, [test_uitofp_2xi32_fadd_param_1];
; CHECK-O3-NEXT:    mov.b64 %rd3, {%f3, %f4};
; CHECK-O3-NEXT:    add.rn.f32x2 %rd4, %rd3, %rd2;
; CHECK-O3-NEXT:    st.param.b64 [func_retval0], %rd4;
; CHECK-O3-NEXT:    ret;
  %c = uitofp <2 x i32> %a to <2 x float>
  %r = fadd <2 x float> %b, %c
  ret <2 x float> %r
}

define <2 x float> @test_fptrunc_2xdouble(<2 x double> %a) #0 {
;
; CHECK-O0-LABEL: test_fptrunc_2xdouble(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .f64 %fd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_fptrunc_2xdouble_param_0];
; CHECK-O0-NEXT:    cvt.rn.f32.f64 %f1, %fd2;
; CHECK-O0-NEXT:    cvt.rn.f32.f64 %f2, %fd1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fptrunc_2xdouble(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .f64 %fd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f64 {%fd1, %fd2}, [test_fptrunc_2xdouble_param_0];
; CHECK-O3-NEXT:    cvt.rn.f32.f64 %f1, %fd2;
; CHECK-O3-NEXT:    cvt.rn.f32.f64 %f2, %fd1;
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = fptrunc <2 x double> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x double> @test_fpext_2xdouble(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_fpext_2xdouble(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .f64 %fd<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fpext_2xdouble_param_0];
; CHECK-O0-NEXT:    cvt.f64.f32 %fd1, %f2;
; CHECK-O0-NEXT:    cvt.f64.f32 %fd2, %f1;
; CHECK-O0-NEXT:    st.param.v2.f64 [func_retval0], {%fd2, %fd1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_fpext_2xdouble(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-NEXT:    .reg .f64 %fd<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_fpext_2xdouble_param_0];
; CHECK-O3-NEXT:    cvt.f64.f32 %fd1, %f2;
; CHECK-O3-NEXT:    cvt.f64.f32 %fd2, %f1;
; CHECK-O3-NEXT:    st.param.v2.f64 [func_retval0], {%fd2, %fd1};
; CHECK-O3-NEXT:    ret;
  %r = fpext <2 x float> %a to <2 x double>
  ret <2 x double> %r
}

define <2 x i32> @test_bitcast_2xfloat_to_2xi32(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_bitcast_2xfloat_to_2xi32(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_bitcast_2xfloat_to_2xi32_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f2;
; CHECK-O0-NEXT:    mov.b32 %r2, %f1;
; CHECK-O0-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_bitcast_2xfloat_to_2xi32(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .b32 %r<3>;
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_bitcast_2xfloat_to_2xi32_param_0];
; CHECK-O3-NEXT:    mov.b32 %r1, %f2;
; CHECK-O3-NEXT:    mov.b32 %r2, %f1;
; CHECK-O3-NEXT:    st.param.v2.b32 [func_retval0], {%r2, %r1};
; CHECK-O3-NEXT:    ret;
  %r = bitcast <2 x float> %a to <2 x i32>
  ret <2 x i32> %r
}

define <2 x float> @test_bitcast_2xi32_to_2xfloat(<2 x i32> %a) #0 {
;
; CHECK-O0-LABEL: test_bitcast_2xi32_to_2xfloat(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.u32 {%r1, %r2}, [test_bitcast_2xi32_to_2xfloat_param_0];
; CHECK-O0-NEXT:    mov.b32 %f1, %r2;
; CHECK-O0-NEXT:    mov.b32 %f2, %r1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_bitcast_2xi32_to_2xfloat(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_bitcast_2xi32_to_2xfloat_param_0];
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f1, %f2};
; CHECK-O3-NEXT:    ret;
  %r = bitcast <2 x i32> %a to <2 x float>
  ret <2 x float> %r
}

define <2 x float> @test_bitcast_double_to_2xfloat(double %a) #0 {
;
; CHECK-O0-LABEL: test_bitcast_double_to_2xfloat(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<2>;
; CHECK-O0-NEXT:    .reg .f64 %fd<2>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.f64 %fd1, [test_bitcast_double_to_2xfloat_param_0];
; CHECK-O0-NEXT:    mov.b64 %rd1, %fd1;
; CHECK-O0-NEXT:    cvt.u32.u64 %r1, %rd1;
; CHECK-O0-NEXT:    { .reg .b32 tmp; mov.b64 {tmp, %r2}, %rd1; }
; CHECK-O0-NEXT:    mov.b32 %f1, %r2;
; CHECK-O0-NEXT:    mov.b32 %f2, %r1;
; CHECK-O0-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_bitcast_double_to_2xfloat(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f32 %f<3>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.f32 %f1, [test_bitcast_double_to_2xfloat_param_0+4];
; CHECK-O3-NEXT:    ld.param.f32 %f2, [test_bitcast_double_to_2xfloat_param_0];
; CHECK-O3-NEXT:    st.param.v2.f32 [func_retval0], {%f2, %f1};
; CHECK-O3-NEXT:    ret;
  %r = bitcast double %a to <2 x float>
  ret <2 x float> %r
}

define double @test_bitcast_2xfloat_to_double(<2 x float> %a) #0 {
;
; CHECK-O0-LABEL: test_bitcast_2xfloat_to_double(
; CHECK-O0:       {
; CHECK-O0-NEXT:    .reg .b32 %r<3>;
; CHECK-O0-NEXT:    .reg .f32 %f<3>;
; CHECK-O0-NEXT:    .reg .b64 %rd<5>;
; CHECK-O0-NEXT:    .reg .f64 %fd<2>;
; CHECK-O0-EMPTY:
; CHECK-O0-NEXT:  // %bb.0:
; CHECK-O0-NEXT:    ld.param.v2.f32 {%f1, %f2}, [test_bitcast_2xfloat_to_double_param_0];
; CHECK-O0-NEXT:    mov.b32 %r1, %f1;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd1, %r1;
; CHECK-O0-NEXT:    mov.b32 %r2, %f2;
; CHECK-O0-NEXT:    cvt.u64.u32 %rd2, %r2;
; CHECK-O0-NEXT:    shl.b64 %rd3, %rd2, 32;
; CHECK-O0-NEXT:    or.b64 %rd4, %rd1, %rd3;
; CHECK-O0-NEXT:    mov.b64 %fd1, %rd4;
; CHECK-O0-NEXT:    st.param.f64 [func_retval0], %fd1;
; CHECK-O0-NEXT:    ret;
;
; CHECK-O3-LABEL: test_bitcast_2xfloat_to_double(
; CHECK-O3:       {
; CHECK-O3-NEXT:    .reg .f64 %fd<2>;
; CHECK-O3-EMPTY:
; CHECK-O3-NEXT:  // %bb.0:
; CHECK-O3-NEXT:    ld.param.f64 %fd1, [test_bitcast_2xfloat_to_double_param_0];
; CHECK-O3-NEXT:    st.param.f64 [func_retval0], %fd1;
; CHECK-O3-NEXT:    ret;
  %r = bitcast <2 x float> %a to double
  ret double %r
}

attributes #0 = { nounwind }
attributes #1 = { "unsafe-fp-math" = "true" }
attributes #2 = { "denormal-fp-math"="preserve-sign" }

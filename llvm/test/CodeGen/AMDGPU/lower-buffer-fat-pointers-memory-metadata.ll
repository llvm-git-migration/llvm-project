; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=amdgcn-amd-amdhsa -O0 -mcpu=gfx1200 < %s | FileCheck --check-prefix=GFX12 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -O0 -mcpu=gfx1200 -mattr=+cumode < %s | FileCheck --check-prefix=GFX12 %s

define amdgpu_kernel void @buffer_last_use_load_0(ptr addrspace(7) %in, ptr addrspace(7) %out) {
; GFX12-LABEL: buffer_last_use_load_0:
; GFX12:       ; %bb.0: ; %entry
; GFX12-NEXT:    s_mov_b64 s[0:1], s[4:5]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_load_b64 s[4:5], s[0:1], 0x0
; GFX12-NEXT:    s_load_b64 s[10:11], s[0:1], 0x8
; GFX12-NEXT:    s_load_b32 s16, s[0:1], 0x10
; GFX12-NEXT:    s_load_b64 s[6:7], s[0:1], 0x20
; GFX12-NEXT:    s_load_b64 s[2:3], s[0:1], 0x28
; GFX12-NEXT:    s_load_b32 s14, s[0:1], 0x30
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr1
; GFX12-NEXT:    ; kill: def $sgpr16 killed $sgpr16 def $sgpr16_sgpr17
; GFX12-NEXT:    s_mov_b32 s17, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s1, 32
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    s_lshl_b64 s[12:13], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[8:9], s[4:5], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[8:9], s[8:9], s[12:13]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s9
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 killed $sgpr8_sgpr9
; GFX12-NEXT:    s_lshr_b64 s[10:11], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[16:17], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[10:11], s[10:11], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s11
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s10
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 def $sgpr8_sgpr9_sgpr10_sgpr11
; GFX12-NEXT:    s_mov_b32 s9, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s10, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s11, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s5, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr4
; GFX12-NEXT:    ; kill: def $sgpr14 killed $sgpr14 def $sgpr14_sgpr15
; GFX12-NEXT:    s_mov_b32 s15, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[12:13], s[6:7], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[16:17], s[12:13], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s17
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s16
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[2:3], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[14:15], s[14:15], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[2:3], s[2:3], s[14:15]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s3
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s2
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr0 killed $sgpr0 def $sgpr0_sgpr1_sgpr2_sgpr3
; GFX12-NEXT:    s_mov_b32 s1, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s2, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s3, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s6
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    v_mov_b32_e32 v0, s5
; GFX12-NEXT:    buffer_load_b32 v0, v0, s[8:11], null offen th:TH_LOAD_LU
; GFX12-NEXT:    v_mov_b32_e32 v1, s4
; GFX12-NEXT:    s_wait_loadcnt 0x0
; GFX12-NEXT:    buffer_store_b32 v0, v1, s[0:3], null offen
; GFX12-NEXT:    s_endpgm
entry:
  %val = load i32, ptr addrspace(7) %in, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(7) %out
  ret void
}

define amdgpu_kernel void @flat_last_use_load_1(ptr addrspace(7) %in, ptr addrspace(7) %out) {
; GFX12-LABEL: flat_last_use_load_1:
; GFX12:       ; %bb.0: ; %entry
; GFX12-NEXT:    s_mov_b64 s[0:1], s[4:5]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_load_b64 s[6:7], s[0:1], 0x0
; GFX12-NEXT:    s_load_b64 s[10:11], s[0:1], 0x8
; GFX12-NEXT:    s_load_b32 s16, s[0:1], 0x10
; GFX12-NEXT:    s_load_b64 s[4:5], s[0:1], 0x20
; GFX12-NEXT:    s_load_b64 s[2:3], s[0:1], 0x28
; GFX12-NEXT:    s_load_b32 s14, s[0:1], 0x30
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr1
; GFX12-NEXT:    ; kill: def $sgpr16 killed $sgpr16 def $sgpr16_sgpr17
; GFX12-NEXT:    s_mov_b32 s17, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s1, 32
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    s_lshl_b64 s[12:13], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[8:9], s[6:7], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[8:9], s[8:9], s[12:13]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s9
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 killed $sgpr8_sgpr9
; GFX12-NEXT:    s_lshr_b64 s[10:11], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[16:17], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[10:11], s[10:11], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s11
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s10
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 def $sgpr8_sgpr9_sgpr10_sgpr11
; GFX12-NEXT:    s_mov_b32 s9, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s10, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s11, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr6 killed $sgpr6 killed $sgpr6_sgpr7
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr7
; GFX12-NEXT:    ; kill: def $sgpr14 killed $sgpr14 def $sgpr14_sgpr15
; GFX12-NEXT:    s_mov_b32 s15, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[12:13], s[4:5], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[16:17], s[12:13], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s17
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s16
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[2:3], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[14:15], s[14:15], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[2:3], s[2:3], s[14:15]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s7, s3
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s2
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr0 killed $sgpr0 def $sgpr0_sgpr1_sgpr2_sgpr3
; GFX12-NEXT:    s_mov_b32 s1, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s2, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s3, s7
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr4 killed $sgpr4 killed $sgpr4_sgpr5
; GFX12-NEXT:    s_mov_b32 s5, 0x3ff
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    v_and_b32_e64 v0, v0, s5
; GFX12-NEXT:    s_mov_b32 s5, 2
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    v_lshl_add_u32 v0, v0, s5, s6
; GFX12-NEXT:    buffer_load_b32 v0, v0, s[8:11], null offen th:TH_LOAD_LU
; GFX12-NEXT:    v_mov_b32_e32 v1, s4
; GFX12-NEXT:    s_wait_loadcnt 0x0
; GFX12-NEXT:    buffer_store_b32 v0, v1, s[0:3], null offen
; GFX12-NEXT:    s_endpgm
entry:
  %tid = call i32 @llvm.amdgcn.workitem.id.x()
  %val.gep = getelementptr inbounds i32, ptr addrspace(7) %in, i32 %tid
  %val = load i32, ptr addrspace(7) %val.gep, align 4, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(7) %out
  ret void
}

define amdgpu_kernel void @buffer_last_use_and_volatile_load(ptr addrspace(7) %in, ptr addrspace(7) %out) {
; GFX12-LABEL: buffer_last_use_and_volatile_load:
; GFX12:       ; %bb.0: ; %entry
; GFX12-NEXT:    s_mov_b64 s[0:1], s[4:5]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_load_b64 s[4:5], s[0:1], 0x0
; GFX12-NEXT:    s_load_b64 s[10:11], s[0:1], 0x8
; GFX12-NEXT:    s_load_b32 s16, s[0:1], 0x10
; GFX12-NEXT:    s_load_b64 s[6:7], s[0:1], 0x20
; GFX12-NEXT:    s_load_b64 s[2:3], s[0:1], 0x28
; GFX12-NEXT:    s_load_b32 s14, s[0:1], 0x30
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr1
; GFX12-NEXT:    ; kill: def $sgpr16 killed $sgpr16 def $sgpr16_sgpr17
; GFX12-NEXT:    s_mov_b32 s17, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s1, 32
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    s_lshl_b64 s[12:13], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[8:9], s[4:5], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[8:9], s[8:9], s[12:13]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s9
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 killed $sgpr8_sgpr9
; GFX12-NEXT:    s_lshr_b64 s[10:11], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[16:17], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[10:11], s[10:11], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s11
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s10
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 def $sgpr8_sgpr9_sgpr10_sgpr11
; GFX12-NEXT:    s_mov_b32 s9, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s10, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s11, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s5, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr4
; GFX12-NEXT:    ; kill: def $sgpr14 killed $sgpr14 def $sgpr14_sgpr15
; GFX12-NEXT:    s_mov_b32 s15, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[12:13], s[6:7], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[16:17], s[12:13], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s17
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s16
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[2:3], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[14:15], s[14:15], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[2:3], s[2:3], s[14:15]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s3
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s2
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr0 killed $sgpr0 def $sgpr0_sgpr1_sgpr2_sgpr3
; GFX12-NEXT:    s_mov_b32 s1, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s2, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s3, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s6
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    v_mov_b32_e32 v0, s5
; GFX12-NEXT:    buffer_load_b32 v0, v0, s[8:11], null offen th:TH_LOAD_BYPASS scope:SCOPE_SYS
; GFX12-NEXT:    v_mov_b32_e32 v1, s4
; GFX12-NEXT:    s_wait_loadcnt 0x0
; GFX12-NEXT:    buffer_store_b32 v0, v1, s[0:3], null offen
; GFX12-NEXT:    s_endpgm
entry:
  %val = load volatile i32, ptr addrspace(7) %in, !amdgpu.last.use !{}
  store i32 %val, ptr addrspace(7) %out
  ret void
}

define amdgpu_kernel void @buffer_last_use_and_nontemporal_load(ptr addrspace(7) %in, ptr addrspace(7) %out) {
; GFX12-LABEL: buffer_last_use_and_nontemporal_load:
; GFX12:       ; %bb.0: ; %entry
; GFX12-NEXT:    s_mov_b64 s[0:1], s[4:5]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_load_b64 s[4:5], s[0:1], 0x0
; GFX12-NEXT:    s_load_b64 s[10:11], s[0:1], 0x8
; GFX12-NEXT:    s_load_b32 s16, s[0:1], 0x10
; GFX12-NEXT:    s_load_b64 s[6:7], s[0:1], 0x20
; GFX12-NEXT:    s_load_b64 s[2:3], s[0:1], 0x28
; GFX12-NEXT:    s_load_b32 s14, s[0:1], 0x30
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr1
; GFX12-NEXT:    ; kill: def $sgpr16 killed $sgpr16 def $sgpr16_sgpr17
; GFX12-NEXT:    s_mov_b32 s17, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s1, 32
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    s_lshl_b64 s[12:13], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[8:9], s[4:5], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[8:9], s[8:9], s[12:13]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s9
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 killed $sgpr8_sgpr9
; GFX12-NEXT:    s_lshr_b64 s[10:11], s[10:11], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[16:17], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[10:11], s[10:11], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s11
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s10
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr8 killed $sgpr8 def $sgpr8_sgpr9_sgpr10_sgpr11
; GFX12-NEXT:    s_mov_b32 s9, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s10, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s11, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s5, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; implicit-def: $sgpr0
; GFX12-NEXT:    ; implicit-def: $sgpr4
; GFX12-NEXT:    ; kill: def $sgpr14 killed $sgpr14 def $sgpr14_sgpr15
; GFX12-NEXT:    s_mov_b32 s15, s0
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[16:17], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[12:13], s[6:7], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[16:17], s[12:13], s[16:17]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s13, s17
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s0, s16
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshr_b64 s[2:3], s[2:3], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_lshl_b64 s[14:15], s[14:15], s1
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_or_b64 s[2:3], s[2:3], s[14:15]
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s3
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s12, s2
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    ; kill: def $sgpr0 killed $sgpr0 def $sgpr0_sgpr1_sgpr2_sgpr3
; GFX12-NEXT:    s_mov_b32 s1, s13
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s2, s12
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s3, s4
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    s_mov_b32 s4, s6
; GFX12-NEXT:    s_wait_alu 0xfffe
; GFX12-NEXT:    v_mov_b32_e32 v0, s5
; GFX12-NEXT:    buffer_load_b32 v0, v0, s[8:11], null offen th:TH_LOAD_LU
; GFX12-NEXT:    v_mov_b32_e32 v1, s4
; GFX12-NEXT:    s_wait_loadcnt 0x0
; GFX12-NEXT:    buffer_store_b32 v0, v1, s[0:3], null offen
; GFX12-NEXT:    s_endpgm
entry:
  %val = load i32, ptr addrspace(7) %in, !amdgpu.last.use !{}, !nontemporal !0
  store i32 %val, ptr addrspace(7) %out
  ret void
}

!0 = !{i32 1}
declare i32 @llvm.amdgcn.workitem.id.x()

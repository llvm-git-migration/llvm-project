; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -stop-after=amdgpu-isel < %s | FileCheck -check-prefix=GFX900 %s

define amdgpu_kernel void @test_dynamic_stackalloc_kernel_uniform(i32 %n) {
  ; GFX900-LABEL: name: test_dynamic_stackalloc_kernel_uniform
  ; GFX900: bb.0 (%ir-block.0):
  ; GFX900-NEXT:   liveins: $sgpr8_sgpr9
  ; GFX900-NEXT: {{  $}}
  ; GFX900-NEXT:   [[COPY:%[0-9]+]]:sgpr_64(p4) = COPY $sgpr8_sgpr9
  ; GFX900-NEXT:   [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]](p4), 0, 0 :: (dereferenceable invariant load (s32) from %ir.n.kernarg.offset1, align 16, addrspace 4)
  ; GFX900-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX900-NEXT:   [[S_LSHL_B32_:%[0-9]+]]:sreg_32 = S_LSHL_B32 killed [[S_LOAD_DWORD_IMM]], killed [[S_MOV_B32_]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 15
  ; GFX900-NEXT:   [[S_ADD_I32_:%[0-9]+]]:sreg_32 = nuw S_ADD_I32 killed [[S_LSHL_B32_]], killed [[S_MOV_B32_1]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 -16
  ; GFX900-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32 = S_AND_B32 killed [[S_ADD_I32_]], killed [[S_MOV_B32_2]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX900-NEXT:   [[WAVE_REDUCE_UMAX_PSEUDO_U32_:%[0-9]+]]:sgpr_32 = WAVE_REDUCE_UMAX_PSEUDO_U32 killed [[S_AND_B32_]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX900-NEXT:   [[S_LSHL_B32_1:%[0-9]+]]:sreg_32 = S_LSHL_B32 killed [[WAVE_REDUCE_UMAX_PSEUDO_U32_]], killed [[S_MOV_B32_4]], implicit-def dead $scc
  ; GFX900-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY1:%[0-9]+]]:sreg_32 = COPY $sp_reg
  ; GFX900-NEXT:   [[S_ADD_I32_1:%[0-9]+]]:sreg_32 = S_ADD_I32 [[COPY1]], killed [[S_LSHL_B32_1]], implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY2:%[0-9]+]]:vgpr_32 = COPY [[S_ADD_I32_1]]
  ; GFX900-NEXT:   [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32 = V_READFIRSTLANE_B32 killed [[COPY2]], implicit $exec
  ; GFX900-NEXT:   $sp_reg = COPY [[V_READFIRSTLANE_B32_]]
  ; GFX900-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 123, implicit $exec
  ; GFX900-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_]], $private_rsrc_reg, [[COPY1]], 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.alloca, addrspace 5)
  ; GFX900-NEXT:   S_ENDPGM 0
  %alloca = alloca i32, i32 %n, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define amdgpu_kernel void @test_dynamic_stackalloc_kernel_divergent() {
  ; GFX900-LABEL: name: test_dynamic_stackalloc_kernel_divergent
  ; GFX900: bb.0 (%ir-block.0):
  ; GFX900-NEXT:   liveins: $vgpr0
  ; GFX900-NEXT: {{  $}}
  ; GFX900-NEXT:   [[COPY:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr0
  ; GFX900-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 15
  ; GFX900-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX900-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_:%[0-9]+]]:vgpr_32 = nuw V_LSHL_ADD_U32_e64 [[COPY]](s32), killed [[S_MOV_B32_1]], [[COPY1]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 8176
  ; GFX900-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 killed [[V_LSHL_ADD_U32_e64_]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX900-NEXT:   [[WAVE_REDUCE_UMAX_PSEUDO_U32_:%[0-9]+]]:sgpr_32 = WAVE_REDUCE_UMAX_PSEUDO_U32 killed [[V_AND_B32_e64_]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX900-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY $sp_reg
  ; GFX900-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX900-NEXT:   [[COPY3:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_4]]
  ; GFX900-NEXT:   [[COPY4:%[0-9]+]]:vgpr_32 = COPY [[COPY2]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_1:%[0-9]+]]:vgpr_32 = V_LSHL_ADD_U32_e64 killed [[WAVE_REDUCE_UMAX_PSEUDO_U32_]], [[COPY3]], [[COPY4]], implicit $exec
  ; GFX900-NEXT:   [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32 = V_READFIRSTLANE_B32 killed [[V_LSHL_ADD_U32_e64_1]], implicit $exec
  ; GFX900-NEXT:   $sp_reg = COPY [[V_READFIRSTLANE_B32_]]
  ; GFX900-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 123, implicit $exec
  ; GFX900-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_]], $private_rsrc_reg, [[COPY2]], 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.alloca, addrspace 5)
  ; GFX900-NEXT:   S_ENDPGM 0
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define amdgpu_kernel void @test_dynamic_stackalloc_kernel_divergent_over_aligned() {
  ; GFX900-LABEL: name: test_dynamic_stackalloc_kernel_divergent_over_aligned
  ; GFX900: bb.0 (%ir-block.0):
  ; GFX900-NEXT:   liveins: $vgpr0
  ; GFX900-NEXT: {{  $}}
  ; GFX900-NEXT:   [[COPY:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr0
  ; GFX900-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 15
  ; GFX900-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX900-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_:%[0-9]+]]:vgpr_32 = nuw V_LSHL_ADD_U32_e64 [[COPY]](s32), killed [[S_MOV_B32_1]], [[COPY1]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 8176
  ; GFX900-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 killed [[V_LSHL_ADD_U32_e64_]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX900-NEXT:   [[WAVE_REDUCE_UMAX_PSEUDO_U32_:%[0-9]+]]:sgpr_32 = WAVE_REDUCE_UMAX_PSEUDO_U32 killed [[V_AND_B32_e64_]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX900-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY $sp_reg
  ; GFX900-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 8191
  ; GFX900-NEXT:   [[S_ADD_I32_:%[0-9]+]]:sreg_32 = S_ADD_I32 [[COPY2]], killed [[S_MOV_B32_4]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 -8192
  ; GFX900-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32 = S_AND_B32 killed [[S_ADD_I32_]], killed [[S_MOV_B32_5]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX900-NEXT:   [[COPY3:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_6]]
  ; GFX900-NEXT:   [[COPY4:%[0-9]+]]:vgpr_32 = COPY [[S_AND_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_1:%[0-9]+]]:vgpr_32 = V_LSHL_ADD_U32_e64 killed [[WAVE_REDUCE_UMAX_PSEUDO_U32_]], [[COPY3]], [[COPY4]], implicit $exec
  ; GFX900-NEXT:   [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32 = V_READFIRSTLANE_B32 killed [[V_LSHL_ADD_U32_e64_1]], implicit $exec
  ; GFX900-NEXT:   $sp_reg = COPY [[V_READFIRSTLANE_B32_]]
  ; GFX900-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 123, implicit $exec
  ; GFX900-NEXT:   [[COPY5:%[0-9]+]]:vgpr_32 = COPY [[S_AND_B32_]]
  ; GFX900-NEXT:   BUFFER_STORE_DWORD_OFFEN killed [[V_MOV_B32_e32_]], [[COPY5]], $private_rsrc_reg, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.alloca, addrspace 5)
  ; GFX900-NEXT:   S_ENDPGM 0
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %alloca = alloca i32, i32 %idx, align 128, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define void @test_dynamic_stackalloc_device_over_aligned(i32 %n) {
  ; GFX900-LABEL: name: test_dynamic_stackalloc_device_over_aligned
  ; GFX900: bb.0 (%ir-block.0):
  ; GFX900-NEXT:   liveins: $vgpr0
  ; GFX900-NEXT: {{  $}}
  ; GFX900-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX900-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 15
  ; GFX900-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX900-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_:%[0-9]+]]:vgpr_32 = nuw V_LSHL_ADD_U32_e64 [[COPY]], killed [[S_MOV_B32_1]], [[COPY1]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 -16
  ; GFX900-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 killed [[V_LSHL_ADD_U32_e64_]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX900-NEXT:   [[WAVE_REDUCE_UMAX_PSEUDO_U32_:%[0-9]+]]:sgpr_32 = WAVE_REDUCE_UMAX_PSEUDO_U32 killed [[V_AND_B32_e64_]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX900-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr32
  ; GFX900-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 65535
  ; GFX900-NEXT:   [[S_ADD_I32_:%[0-9]+]]:sreg_32 = S_ADD_I32 [[COPY2]], killed [[S_MOV_B32_4]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_5:%[0-9]+]]:sreg_32 = S_MOV_B32 -65536
  ; GFX900-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32 = S_AND_B32 killed [[S_ADD_I32_]], killed [[S_MOV_B32_5]], implicit-def dead $scc
  ; GFX900-NEXT:   [[S_MOV_B32_6:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX900-NEXT:   [[COPY3:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_6]]
  ; GFX900-NEXT:   [[COPY4:%[0-9]+]]:vgpr_32 = COPY [[S_AND_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_1:%[0-9]+]]:vgpr_32 = V_LSHL_ADD_U32_e64 killed [[WAVE_REDUCE_UMAX_PSEUDO_U32_]], [[COPY3]], [[COPY4]], implicit $exec
  ; GFX900-NEXT:   [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32 = V_READFIRSTLANE_B32 killed [[V_LSHL_ADD_U32_e64_1]], implicit $exec
  ; GFX900-NEXT:   $sgpr32 = COPY [[V_READFIRSTLANE_B32_]]
  ; GFX900-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 123, implicit $exec
  ; GFX900-NEXT:   [[COPY5:%[0-9]+]]:vgpr_32 = COPY [[S_AND_B32_]]
  ; GFX900-NEXT:   BUFFER_STORE_DWORD_OFFEN killed [[V_MOV_B32_e32_]], [[COPY5]], $sgpr0_sgpr1_sgpr2_sgpr3, 0, 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.alloca, addrspace 5)
  ; GFX900-NEXT:   SI_RETURN
  %alloca = alloca i32, i32 %n, align 1024, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define void @test_dynamic_stackalloc_device_under_aligned(i32 %n) {
  ; GFX900-LABEL: name: test_dynamic_stackalloc_device_under_aligned
  ; GFX900: bb.0 (%ir-block.0):
  ; GFX900-NEXT:   liveins: $vgpr0
  ; GFX900-NEXT: {{  $}}
  ; GFX900-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
  ; GFX900-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 15
  ; GFX900-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 2
  ; GFX900-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_:%[0-9]+]]:vgpr_32 = nuw V_LSHL_ADD_U32_e64 [[COPY]], killed [[S_MOV_B32_1]], [[COPY1]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 -16
  ; GFX900-NEXT:   [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 killed [[V_LSHL_ADD_U32_e64_]], killed [[S_MOV_B32_2]], implicit $exec
  ; GFX900-NEXT:   [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; GFX900-NEXT:   [[WAVE_REDUCE_UMAX_PSEUDO_U32_:%[0-9]+]]:sgpr_32 = WAVE_REDUCE_UMAX_PSEUDO_U32 killed [[V_AND_B32_e64_]], killed [[S_MOV_B32_3]], implicit $exec
  ; GFX900-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr32
  ; GFX900-NEXT:   [[S_MOV_B32_4:%[0-9]+]]:sreg_32 = S_MOV_B32 6
  ; GFX900-NEXT:   [[COPY3:%[0-9]+]]:vgpr_32 = COPY killed [[S_MOV_B32_4]]
  ; GFX900-NEXT:   [[COPY4:%[0-9]+]]:vgpr_32 = COPY [[COPY2]]
  ; GFX900-NEXT:   [[V_LSHL_ADD_U32_e64_1:%[0-9]+]]:vgpr_32 = V_LSHL_ADD_U32_e64 killed [[WAVE_REDUCE_UMAX_PSEUDO_U32_]], [[COPY3]], [[COPY4]], implicit $exec
  ; GFX900-NEXT:   [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32 = V_READFIRSTLANE_B32 killed [[V_LSHL_ADD_U32_e64_1]], implicit $exec
  ; GFX900-NEXT:   $sgpr32 = COPY [[V_READFIRSTLANE_B32_]]
  ; GFX900-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $scc
  ; GFX900-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 123, implicit $exec
  ; GFX900-NEXT:   BUFFER_STORE_DWORD_OFFSET killed [[V_MOV_B32_e32_]], $sgpr0_sgpr1_sgpr2_sgpr3, [[COPY2]], 0, 0, 0, implicit $exec :: (volatile store (s32) into %ir.alloca, addrspace 5)
  ; GFX900-NEXT:   SI_RETURN
  %alloca = alloca i32, i32 %n, align 4, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

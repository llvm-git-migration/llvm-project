; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -o - %s --stop-after=amdgpu-mark-last-scratch-load | FileCheck -check-prefix=CHECK %s

define amdgpu_cs void @max_6_vgprs(ptr addrspace(1) %p) "amdgpu-num-vgpr"="6" {
  ; CHECK-LABEL: name: max_6_vgprs
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD undef renamable $vgpr0_vgpr1, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr3 = V_ASHRREV_I32_e64 31, $vgpr2, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr2_vgpr3 = V_LSHLREV_B64_pseudo_e64 2, killed $vgpr2_vgpr3, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr0, renamable $vcc_lo = V_ADD_CO_U32_e64 killed $vgpr0, $vgpr2, 0, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr1, dead renamable $vcc_lo = V_ADDC_U32_e64 killed $vgpr1, killed $vgpr3, killed $vcc_lo, 0, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr5 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 0, 0, implicit $exec :: (volatile load (s32) from %ir.p1, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 16, 0, implicit $exec :: (volatile load (s32) from %ir.p2, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.0, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.0, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 48, 0, implicit $exec :: (volatile load (s32) from %ir.p3, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.1, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.1, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 96, 0, implicit $exec :: (volatile load (s32) from %ir.p4, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.2, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.2, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD killed renamable $vgpr0_vgpr1, 160, 0, implicit $exec :: (volatile load (s32) from %ir.p5, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr0, %stack.3, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.3, addrspace 5)
  ; CHECK-NEXT:   INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr5, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.1, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.1, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.2, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.2, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.3, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.3, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   S_ENDPGM 0
  %tid = load volatile i32, ptr addrspace(1) undef
  %p1 = getelementptr inbounds i32, ptr addrspace(1) %p, i32 %tid
  %p2 = getelementptr inbounds i32, ptr addrspace(1) %p1, i32 4
  %p3 = getelementptr inbounds i32, ptr addrspace(1) %p2, i32 8
  %p4 = getelementptr inbounds i32, ptr addrspace(1) %p3, i32 12
  %p5 = getelementptr inbounds i32, ptr addrspace(1) %p4, i32 16
  %v1 = load volatile i32, ptr addrspace(1) %p1
  %v2 = load volatile i32, ptr addrspace(1) %p2
  %v3 = load volatile i32, ptr addrspace(1) %p3
  %v4 = load volatile i32, ptr addrspace(1) %p4
  %v5 = load volatile i32, ptr addrspace(1) %p5
  call void asm sideeffect "", "~{v[0:4]}" ()
  store volatile i32 %v1, ptr addrspace(1) undef
  store volatile i32 %v2, ptr addrspace(1) undef
  store volatile i32 %v3, ptr addrspace(1) undef
  store volatile i32 %v4, ptr addrspace(1) undef
  store volatile i32 %v5, ptr addrspace(1) undef
  ret void
}

define amdgpu_cs void @max_11_vgprs_branch(ptr addrspace(1) %p, i32 %tmp) "amdgpu-num-vgpr"="11" {
  ; CHECK-LABEL: name: max_11_vgprs_branch
  ; CHECK: bb.0..entry:
  ; CHECK-NEXT:   successors: %bb.3(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $vgpr3 = GLOBAL_LOAD_DWORD undef renamable $vgpr0_vgpr1, 0, 0, implicit $exec :: (volatile "amdgpu-noclobber" load (s32) from `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr4 = V_ASHRREV_I32_e64 31, $vgpr3, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr3_vgpr4 = V_LSHLREV_B64_pseudo_e64 2, killed $vgpr3_vgpr4, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr0, renamable $vcc_lo = V_ADD_CO_U32_e64 killed $vgpr0, $vgpr3, 0, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr1, dead renamable $vcc_lo = V_ADDC_U32_e64 killed $vgpr1, killed $vgpr4, killed $vcc_lo, 0, implicit $exec
  ; CHECK-NEXT:   renamable $vgpr3 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 336, 0, implicit $exec :: (volatile load (s32) from %ir.p7, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr3, %stack.2, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.2, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr3 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 448, 0, implicit $exec :: (volatile load (s32) from %ir.p8, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr3, %stack.3, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.3, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr3 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 576, 0, implicit $exec :: (volatile load (s32) from %ir.p9, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr3, %stack.0, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.0, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr3 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 720, 0, implicit $exec :: (volatile load (s32) from %ir.p10, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr3, %stack.1, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.1, addrspace 5)
  ; CHECK-NEXT:   renamable $vcc_lo = V_CMP_EQ_U32_e64 0, killed $vgpr2, implicit $exec
  ; CHECK-NEXT:   renamable $sgpr0 = COPY $exec_lo, implicit-def $exec_lo
  ; CHECK-NEXT:   renamable $sgpr1 = S_AND_B32 renamable $sgpr0, killed renamable $vcc_lo, implicit-def dead $scc
  ; CHECK-NEXT:   renamable $sgpr0 = S_XOR_B32 renamable $sgpr1, killed renamable $sgpr0, implicit-def dead $scc
  ; CHECK-NEXT:   $exec_lo = S_MOV_B32_term killed renamable $sgpr1
  ; CHECK-NEXT:   S_CBRANCH_EXECZ %bb.1, implicit $exec
  ; CHECK-NEXT:   S_BRANCH %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.Flow:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.4(0x40000000)
  ; CHECK-NEXT:   liveins: $sgpr0, $vgpr0_vgpr1:0x000000000000000F
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $sgpr0 = S_OR_SAVEEXEC_B32 killed renamable $sgpr0, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   $exec_lo = S_XOR_B32_term $exec_lo, renamable $sgpr0, implicit-def $scc
  ; CHECK-NEXT:   S_CBRANCH_EXECZ %bb.4, implicit $exec
  ; CHECK-NEXT:   S_BRANCH %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2..true:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK-NEXT:   liveins: $sgpr0, $vgpr0_vgpr1:0x000000000000000F
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $vgpr10 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 0, 0, implicit $exec :: (volatile load (s32) from %ir.p1, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 16, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.9, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.9, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 48, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr1, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.10, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.10, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 96, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr2, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.11, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.11, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 160, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr3, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.12, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.12, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD killed renamable $vgpr0_vgpr1, 240, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr4, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr0, %stack.13, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.13, addrspace 5)
  ; CHECK-NEXT:   INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr10, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.9, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.9, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.10, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.10, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.11, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.11, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.12, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.12, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.13, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.13, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.2, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.2, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.3, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.3, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   S_BRANCH %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3..false:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $sgpr0, $vgpr0_vgpr1:0x000000000000000F
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   renamable $vgpr10 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 0, 0, implicit $exec :: (volatile load (s32) from %ir.p1, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 16, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr5, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.4, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.4, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 48, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr6, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.5, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.5, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 96, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr7, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.6, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.6, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr2 = GLOBAL_LOAD_DWORD renamable $vgpr0_vgpr1, 160, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr8, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr2, %stack.7, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.7, addrspace 5)
  ; CHECK-NEXT:   renamable $vgpr0 = GLOBAL_LOAD_DWORD killed renamable $vgpr0_vgpr1, 240, 0, implicit $exec :: (volatile load (s32) from %ir.sunkaddr9, addrspace 1)
  ; CHECK-NEXT:   SI_SPILL_V32_SAVE killed $vgpr0, %stack.8, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.8, addrspace 5)
  ; CHECK-NEXT:   INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr10, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.4, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.4, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.5, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.5, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.6, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.6, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.7, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.7, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.8, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.8, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.2, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.2, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.3, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.3, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = IMPLICIT_DEF
  ; CHECK-NEXT:   KILL killed renamable $vgpr0
  ; CHECK-NEXT:   renamable $vgpr0 = IMPLICIT_DEF
  ; CHECK-NEXT:   KILL killed renamable $vgpr0
  ; CHECK-NEXT:   renamable $vgpr0_vgpr1 = IMPLICIT_DEF
  ; CHECK-NEXT:   S_BRANCH %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4..exit:
  ; CHECK-NEXT:   liveins: $sgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $exec_lo = S_OR_B32 $exec_lo, killed renamable $sgpr0, implicit-def $scc
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.1, $sgpr32, 0, 1, implicit $exec :: (load (s32) from %stack.1, addrspace 5)
  ; CHECK-NEXT:   GLOBAL_STORE_DWORD undef renamable $vgpr0_vgpr1, killed renamable $vgpr0, 0, 0, implicit $exec :: (volatile store (s32) into `ptr addrspace(1) undef`, addrspace 1)
  ; CHECK-NEXT:   S_ENDPGM 0
.entry:
  %tid = load volatile i32, ptr addrspace(1) undef
  %p1 = getelementptr inbounds i32, ptr addrspace(1) %p, i32 %tid
  %p2 = getelementptr inbounds i32, ptr addrspace(1) %p1, i32 4
  %p3 = getelementptr inbounds i32, ptr addrspace(1) %p2, i32 8
  %p4 = getelementptr inbounds i32, ptr addrspace(1) %p3, i32 12
  %p5 = getelementptr inbounds i32, ptr addrspace(1) %p4, i32 16
  %p6 = getelementptr inbounds i32, ptr addrspace(1) %p5, i32 20
  %p7 = getelementptr inbounds i32, ptr addrspace(1) %p6, i32 24
  %p8 = getelementptr inbounds i32, ptr addrspace(1) %p7, i32 28
  %p9 = getelementptr inbounds i32, ptr addrspace(1) %p8, i32 32
  %p10 = getelementptr inbounds i32, ptr addrspace(1) %p9, i32 36
  %v7 = load volatile i32, ptr addrspace(1) %p7
  %v8 = load volatile i32, ptr addrspace(1) %p8
  %v9 = load volatile i32, ptr addrspace(1) %p9
  %v10 = load volatile i32, ptr addrspace(1) %p10
  %cmp = icmp ne i32 %tmp, 0
  br i1 %cmp, label %.true, label %.false

.true:
  %v1_t = load volatile i32, ptr addrspace(1) %p1
  %v2_t = load volatile i32, ptr addrspace(1) %p2
  %v3_t = load volatile i32, ptr addrspace(1) %p3
  %v4_t = load volatile i32, ptr addrspace(1) %p4
  %v5_t = load volatile i32, ptr addrspace(1) %p5
  %v6_t = load volatile i32, ptr addrspace(1) %p6
  call void asm sideeffect "", "~{v[0:9]}" ()
  store volatile i32 %v1_t, ptr addrspace(1) undef
  store volatile i32 %v2_t, ptr addrspace(1) undef
  store volatile i32 %v3_t, ptr addrspace(1) undef
  store volatile i32 %v4_t, ptr addrspace(1) undef
  store volatile i32 %v5_t, ptr addrspace(1) undef
  store volatile i32 %v6_t, ptr addrspace(1) undef
  store volatile i32 %v7, ptr addrspace(1) undef
  store volatile i32 %v8, ptr addrspace(1) undef

  br label %.exit

.false:
  %v1_f = load volatile i32, ptr addrspace(1) %p1
  %v2_f = load volatile i32, ptr addrspace(1) %p2
  %v3_f = load volatile i32, ptr addrspace(1) %p3
  %v4_f = load volatile i32, ptr addrspace(1) %p4
  %v5_f = load volatile i32, ptr addrspace(1) %p5
  %v6_f = load volatile i32, ptr addrspace(1) %p6
  call void asm sideeffect "", "~{v[0:9]}" ()
  store volatile i32 %v1_f, ptr addrspace(1) undef
  store volatile i32 %v2_f, ptr addrspace(1) undef
  store volatile i32 %v3_f, ptr addrspace(1) undef
  store volatile i32 %v4_f, ptr addrspace(1) undef
  store volatile i32 %v5_f, ptr addrspace(1) undef
  store volatile i32 %v6_f, ptr addrspace(1) undef
  store volatile i32 %v7, ptr addrspace(1) undef
  store volatile i32 %v8, ptr addrspace(1) undef

  br label %.exit

.exit:
  store volatile i32 %v9, ptr addrspace(1) undef
  store volatile i32 %v10, ptr addrspace(1) undef
  ret void
}

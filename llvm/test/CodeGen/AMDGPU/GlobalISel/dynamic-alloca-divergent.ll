; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -global-isel -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX900 %s

define amdgpu_kernel void @kernel_dynamic_stackalloc_vgpr_align4(ptr addrspace(1) %ptr) {
; GFX900-LABEL: kernel_dynamic_stackalloc_vgpr_align4:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_load_dwordx2 s[4:5], s[8:9], 0x0
; GFX900-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX900-NEXT:    s_add_u32 s0, s0, s17
; GFX900-NEXT:    s_addc_u32 s1, s1, 0
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    global_load_dword v0, v0, s[4:5]
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s33, 0
; GFX900-NEXT:    s_movk_i32 s32, 0x400
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:  .LBB0_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB0_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_mov_b32 s4, s32
; GFX900-NEXT:    s_lshl_b32 s5, s6, 6
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x7b
; GFX900-NEXT:    v_mov_b32_e32 v1, s4
; GFX900-NEXT:    s_add_u32 s32, s4, s5
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_endpgm
  %id = call i32 @llvm.amdgcn.workitem.id.x()
  %gep = getelementptr i32, ptr addrspace(1) %ptr, i32 %id
  %n = load i32, ptr addrspace(1) %gep
  %alloca = alloca i32, i32 %n, align 4, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define amdgpu_kernel void @kernel_dynamic_stackalloc_vgpr_default_align(ptr addrspace(1) %ptr) {
; GFX900-LABEL: kernel_dynamic_stackalloc_vgpr_default_align:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_load_dwordx2 s[4:5], s[8:9], 0x0
; GFX900-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX900-NEXT:    s_add_u32 s0, s0, s17
; GFX900-NEXT:    s_addc_u32 s1, s1, 0
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    global_load_dword v0, v0, s[4:5]
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s33, 0
; GFX900-NEXT:    s_movk_i32 s32, 0x400
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:  .LBB1_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB1_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_mov_b32 s4, s32
; GFX900-NEXT:    s_lshl_b32 s5, s6, 6
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x7b
; GFX900-NEXT:    v_mov_b32_e32 v1, s4
; GFX900-NEXT:    s_add_u32 s32, s4, s5
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_endpgm
  %id = call i32 @llvm.amdgcn.workitem.id.x()
  %gep = getelementptr i32, ptr addrspace(1) %ptr, i32 %id
  %n = load i32, ptr addrspace(1) %gep
  %alloca = alloca i32, i32 %n, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define amdgpu_kernel void @kernel_dynamic_stackalloc_vgpr_align64(ptr addrspace(1) %ptr) {
; GFX900-LABEL: kernel_dynamic_stackalloc_vgpr_align64:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_load_dwordx2 s[4:5], s[8:9], 0x0
; GFX900-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX900-NEXT:    s_add_u32 s0, s0, s17
; GFX900-NEXT:    s_addc_u32 s1, s1, 0
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    global_load_dword v0, v0, s[4:5]
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s33, 0
; GFX900-NEXT:    s_movk_i32 s32, 0x1000
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:  .LBB2_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB2_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_add_u32 s5, s32, 0xfff
; GFX900-NEXT:    s_and_b32 s5, s5, 0xfffff000
; GFX900-NEXT:    s_lshl_b32 s4, s6, 6
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x7b
; GFX900-NEXT:    v_mov_b32_e32 v1, s5
; GFX900-NEXT:    s_add_u32 s32, s5, s4
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_endpgm
  %id = call i32 @llvm.amdgcn.workitem.id.x()
  %gep = getelementptr i32, ptr addrspace(1) %ptr, i32 %id
  %n = load i32, ptr addrspace(1) %gep
  %alloca = alloca i32, i32 %n, align 64, addrspace(5)
  store volatile i32 123, ptr addrspace(5) %alloca
  ret void
}

define void @func_dynamic_stackalloc_vgpr_align4(i32 %n) {
; GFX900-LABEL: func_dynamic_stackalloc_vgpr_align4:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    s_mov_b32 s9, s33
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_mov_b32 s33, s32
; GFX900-NEXT:    s_addk_i32 s32, 0x400
; GFX900-NEXT:  .LBB3_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB3_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_mov_b32 s4, s32
; GFX900-NEXT:    s_lshl_b32 s5, s6, 6
; GFX900-NEXT:    s_add_u32 s32, s4, s5
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x1c8
; GFX900-NEXT:    v_mov_b32_e32 v1, s4
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_addk_i32 s32, 0xfc00
; GFX900-NEXT:    s_mov_b32 s33, s9
; GFX900-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, align 4, addrspace(5)
  store volatile i32 456, ptr addrspace(5) %alloca
  ret void
}

define void @func_dynamic_stackalloc_vgpr_default_align(i32 %n) {
; GFX900-LABEL: func_dynamic_stackalloc_vgpr_default_align:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    s_mov_b32 s9, s33
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_mov_b32 s33, s32
; GFX900-NEXT:    s_addk_i32 s32, 0x400
; GFX900-NEXT:  .LBB4_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB4_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_mov_b32 s4, s32
; GFX900-NEXT:    s_lshl_b32 s5, s6, 6
; GFX900-NEXT:    s_add_u32 s32, s4, s5
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x1c8
; GFX900-NEXT:    v_mov_b32_e32 v1, s4
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_addk_i32 s32, 0xfc00
; GFX900-NEXT:    s_mov_b32 s33, s9
; GFX900-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, addrspace(5)
  store volatile i32 456, ptr addrspace(5) %alloca
  ret void
}

define void @func_dynamic_stackalloc_vgpr_align64(i32 %n) {
; GFX900-LABEL: func_dynamic_stackalloc_vgpr_align64:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    s_mov_b32 s9, s33
; GFX900-NEXT:    s_add_i32 s33, s32, 0xfc0
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_and_b32 s33, s33, 0xfffff000
; GFX900-NEXT:    s_addk_i32 s32, 0x2000
; GFX900-NEXT:  .LBB5_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB5_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_add_u32 s5, s32, 0xfff
; GFX900-NEXT:    s_lshl_b32 s4, s6, 6
; GFX900-NEXT:    s_and_b32 s5, s5, 0xfffff000
; GFX900-NEXT:    s_add_u32 s32, s5, s4
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x1c8
; GFX900-NEXT:    v_mov_b32_e32 v1, s5
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_addk_i32 s32, 0xe000
; GFX900-NEXT:    s_mov_b32 s33, s9
; GFX900-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i32 %n, align 64, addrspace(5)
  store volatile i32 456, ptr addrspace(5) %alloca
  ret void
}

define void @func_dynamic_stackalloc_non_standard_size_i64(i64 %n) {
; GFX900-LABEL: func_dynamic_stackalloc_non_standard_size_i64:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    s_mov_b32 s9, s33
; GFX900-NEXT:    s_add_i32 s33, s32, 0xfc0
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_and_b32 s33, s33, 0xfffff000
; GFX900-NEXT:    s_addk_i32 s32, 0x2000
; GFX900-NEXT:  .LBB6_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB6_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_add_u32 s5, s32, 0xfff
; GFX900-NEXT:    s_lshl_b32 s4, s6, 6
; GFX900-NEXT:    s_and_b32 s5, s5, 0xfffff000
; GFX900-NEXT:    s_add_u32 s32, s5, s4
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x1c8
; GFX900-NEXT:    v_mov_b32_e32 v1, s5
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_addk_i32 s32, 0xe000
; GFX900-NEXT:    s_mov_b32 s33, s9
; GFX900-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i64 %n, align 64, addrspace(5)
  store volatile i32 456, ptr addrspace(5) %alloca
  ret void
}

define void @func_dynamic_stackalloc_non_standard_size_i16(i16 %n) {
; GFX900-LABEL: func_dynamic_stackalloc_non_standard_size_i16:
; GFX900:       ; %bb.0:
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_and_b32_e32 v0, 0xffff, v0
; GFX900-NEXT:    v_lshl_add_u32 v0, v0, 2, 15
; GFX900-NEXT:    s_mov_b32 s9, s33
; GFX900-NEXT:    s_add_i32 s33, s32, 0xfc0
; GFX900-NEXT:    v_and_b32_e32 v0, -16, v0
; GFX900-NEXT:    s_mov_b64 s[4:5], exec
; GFX900-NEXT:    s_mov_b32 s6, 0
; GFX900-NEXT:    s_and_b32 s33, s33, 0xfffff000
; GFX900-NEXT:    s_addk_i32 s32, 0x2000
; GFX900-NEXT:  .LBB7_1: ; =>This Inner Loop Header: Depth=1
; GFX900-NEXT:    s_ff1_i32_b64 s7, s[4:5]
; GFX900-NEXT:    v_readlane_b32 s8, v0, s7
; GFX900-NEXT:    s_bitset0_b64 s[4:5], s7
; GFX900-NEXT:    s_max_u32 s6, s6, s8
; GFX900-NEXT:    s_cmp_lg_u64 s[4:5], 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB7_1
; GFX900-NEXT:  ; %bb.2:
; GFX900-NEXT:    s_add_u32 s5, s32, 0xfff
; GFX900-NEXT:    s_lshl_b32 s4, s6, 6
; GFX900-NEXT:    s_and_b32 s5, s5, 0xfffff000
; GFX900-NEXT:    s_add_u32 s32, s5, s4
; GFX900-NEXT:    v_mov_b32_e32 v0, 0x1c8
; GFX900-NEXT:    v_mov_b32_e32 v1, s5
; GFX900-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GFX900-NEXT:    s_waitcnt vmcnt(0)
; GFX900-NEXT:    s_addk_i32 s32, 0xe000
; GFX900-NEXT:    s_mov_b32 s33, s9
; GFX900-NEXT:    s_setpc_b64 s[30:31]
  %alloca = alloca i32, i16 %n, align 64, addrspace(5)
  store volatile i32 456, ptr addrspace(5) %alloca
  ret void
}

declare i32 @llvm.amdgcn.workitem.id.x() #0

attributes #0 = { nounwind readnone speculatable }

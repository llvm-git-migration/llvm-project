; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -global-isel -stop-after=irtranslator -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -verify-machineinstrs -o - %s | FileCheck -enable-var-scope --check-prefixes=SAMEC,CHECK %s
; RUN: llc -global-isel -stop-after=irtranslator -attributor-assume-closed-world -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -verify-machineinstrs -o - %s | FileCheck -enable-var-scope --check-prefixes=SAMEC,CWRLD %s

define amdgpu_kernel void @test_indirect_call_sgpr_ptr(ptr %fptr) {
  ; SAMEC-LABEL: name: test_indirect_call_sgpr_ptr
  ; SAMEC: bb.1 (%ir-block.0):
  ; SAMEC-NEXT:   liveins: $sgpr12, $sgpr13, $sgpr14, $vgpr0, $vgpr1, $vgpr2, $sgpr4_sgpr5, $sgpr6_sgpr7, $sgpr8_sgpr9
  ; SAMEC-NEXT: {{  $}}
  ; SAMEC-NEXT:   [[COPY:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr2
  ; SAMEC-NEXT:   [[COPY1:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr1
  ; SAMEC-NEXT:   [[COPY2:%[0-9]+]]:vgpr_32(s32) = COPY $vgpr0
  ; SAMEC-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr14
  ; SAMEC-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr13
  ; SAMEC-NEXT:   [[COPY5:%[0-9]+]]:sgpr_32 = COPY $sgpr12
  ; SAMEC-NEXT:   [[COPY6:%[0-9]+]]:sgpr_64 = COPY $sgpr8_sgpr9
  ; SAMEC-NEXT:   [[COPY7:%[0-9]+]]:sgpr_64 = COPY $sgpr4_sgpr5
  ; SAMEC-NEXT:   [[COPY8:%[0-9]+]]:_(p4) = COPY $sgpr6_sgpr7
  ; SAMEC-NEXT:   [[INT:%[0-9]+]]:_(p4) = G_INTRINSIC intrinsic(@llvm.amdgcn.kernarg.segment.ptr)
  ; SAMEC-NEXT:   [[LOAD:%[0-9]+]]:_(p0) = G_LOAD [[INT]](p4) :: (dereferenceable invariant load (p0) from %ir.fptr.kernarg.offset1, align 16, addrspace 4)
  ; SAMEC-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; SAMEC-NEXT:   [[COPY9:%[0-9]+]]:_(p4) = COPY [[COPY7]]
  ; SAMEC-NEXT:   [[DEF:%[0-9]+]]:_(p4) = G_IMPLICIT_DEF
  ; SAMEC-NEXT:   [[COPY10:%[0-9]+]]:_(p4) = COPY [[COPY8]](p4)
  ; SAMEC-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 8
  ; SAMEC-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p4) = G_PTR_ADD [[COPY10]], [[C]](s64)
  ; SAMEC-NEXT:   [[COPY11:%[0-9]+]]:_(s64) = COPY [[COPY6]]
  ; SAMEC-NEXT:   [[COPY12:%[0-9]+]]:_(s32) = COPY [[COPY5]]
  ; SAMEC-NEXT:   [[COPY13:%[0-9]+]]:_(s32) = COPY [[COPY4]]
  ; SAMEC-NEXT:   [[COPY14:%[0-9]+]]:_(s32) = COPY [[COPY3]]
  ; SAMEC-NEXT:   [[DEF1:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; SAMEC-NEXT:   [[COPY15:%[0-9]+]]:_(s32) = COPY [[COPY2]](s32)
  ; SAMEC-NEXT:   [[COPY16:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
  ; SAMEC-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
  ; SAMEC-NEXT:   [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY16]], [[C1]](s32)
  ; SAMEC-NEXT:   [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY15]], [[SHL]]
  ; SAMEC-NEXT:   [[COPY17:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
  ; SAMEC-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 20
  ; SAMEC-NEXT:   [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY17]], [[C2]](s32)
  ; SAMEC-NEXT:   [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
  ; SAMEC-NEXT:   [[COPY18:%[0-9]+]]:_(<4 x s32>) = COPY $private_rsrc_reg
  ; SAMEC-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[COPY18]](<4 x s32>)
  ; SAMEC-NEXT:   $sgpr4_sgpr5 = COPY [[COPY9]](p4)
  ; SAMEC-NEXT:   $sgpr6_sgpr7 = COPY [[DEF]](p4)
  ; SAMEC-NEXT:   $sgpr8_sgpr9 = COPY [[PTR_ADD]](p4)
  ; SAMEC-NEXT:   $sgpr10_sgpr11 = COPY [[COPY11]](s64)
  ; SAMEC-NEXT:   $sgpr12 = COPY [[COPY12]](s32)
  ; SAMEC-NEXT:   $sgpr13 = COPY [[COPY13]](s32)
  ; SAMEC-NEXT:   $sgpr14 = COPY [[COPY14]](s32)
  ; SAMEC-NEXT:   $sgpr15 = COPY [[DEF1]](s32)
  ; SAMEC-NEXT:   $vgpr31 = COPY [[OR1]](s32)
  ; SAMEC-NEXT:   $sgpr30_sgpr31 = noconvergent G_SI_CALL [[LOAD]](p0), 0, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit $sgpr4_sgpr5, implicit $sgpr6_sgpr7, implicit $sgpr8_sgpr9, implicit $sgpr10_sgpr11, implicit $sgpr12, implicit $sgpr13, implicit $sgpr14, implicit $sgpr15, implicit $vgpr31
  ; SAMEC-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; SAMEC-NEXT:   S_ENDPGM 0
  call void %fptr()
  ret void
}

define amdgpu_gfx void @test_gfx_indirect_call_sgpr_ptr(ptr %fptr) {
  ; SAMEC-LABEL: name: test_gfx_indirect_call_sgpr_ptr
  ; SAMEC: bb.1 (%ir-block.0):
  ; SAMEC-NEXT:   liveins: $vgpr0, $vgpr1
  ; SAMEC-NEXT: {{  $}}
  ; SAMEC-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $vgpr0
  ; SAMEC-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $vgpr1
  ; SAMEC-NEXT:   [[MV:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; SAMEC-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $scc
  ; SAMEC-NEXT:   [[COPY2:%[0-9]+]]:_(<4 x s32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
  ; SAMEC-NEXT:   $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[COPY2]](<4 x s32>)
  ; SAMEC-NEXT:   $sgpr30_sgpr31 = noconvergent G_SI_CALL [[MV]](p0), 0, csr_amdgpu_si_gfx, implicit $sgpr0_sgpr1_sgpr2_sgpr3
  ; SAMEC-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $scc
  ; SAMEC-NEXT:   SI_RETURN
  call amdgpu_gfx void %fptr()
  ret void
}

!llvm.module.flags = !{!0}
!0 = !{i32 1, !"amdhsa_code_object_version", i32 500}

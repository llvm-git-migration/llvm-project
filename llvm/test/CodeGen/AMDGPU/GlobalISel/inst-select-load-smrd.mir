# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=amdgcn -mcpu=tahiti -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN,SI,SICI,SIVI
# RUN: llc -mtriple=amdgcn -mcpu=hawaii -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN,CI,SICI
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN,VI,SIVI
# RUN: llc -mtriple=amdgcn -mcpu=gfx900 -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN,GFX9

--- |
  define amdgpu_kernel void @smrd_imm(ptr addrspace(4) %const0) { ret void }
  define amdgpu_kernel void @smrd_wide() { ret void }
  define amdgpu_kernel void @constant_address_positive() { ret void }
  define amdgpu_kernel void @smrd_sgpr() { ret void }
  define amdgpu_kernel void @smrd_sgpr_imm() { ret void }
...
---

name:            smrd_imm
legalized:       true
regBankSelected: true


# Immediate offset:

# Max immediate offset for SI

# Immediate overflow for SI

# Max immediate offset for VI

#
# Immediate overflow for VI

# Max immediate for CI

# Immediate overflow for CI

# Max 32-bit byte offset

# Overflow 32-bit byte offset

# Pointer loads

body: |
  bb.0:
    liveins: $sgpr0_sgpr1

    ; SI-LABEL: name: smrd_imm
    ; SI: liveins: $sgpr0_sgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; SI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM]]
    ; SI-NEXT: [[S_LOAD_DWORD_IMM1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 255, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM1]]
    ; SI-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1024
    ; SI-NEXT: [[S_LOAD_DWORD_SGPR:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR]]
    ; SI-NEXT: [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 1048572
    ; SI-NEXT: [[S_LOAD_DWORD_SGPR1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_1]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR1]]
    ; SI-NEXT: [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 1048576
    ; SI-NEXT: [[S_LOAD_DWORD_SGPR2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_2]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR2]]
    ; SI-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869180
    ; SI-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; SI-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub0
    ; SI-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; SI-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub1
    ; SI-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B]], implicit-def $scc
    ; SI-NEXT: [[S_LOAD_DWORD_IMM2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM2]]
    ; SI-NEXT: [[S_MOV_B1:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869184
    ; SI-NEXT: [[COPY5:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; SI-NEXT: [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub0
    ; SI-NEXT: [[COPY7:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; SI-NEXT: [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub1
    ; SI-NEXT: [[S_ADD_U1:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B1]], implicit-def $scc
    ; SI-NEXT: [[S_LOAD_DWORD_IMM3:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U1]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM3]]
    ; SI-NEXT: [[S_MOV_B32_3:%[0-9]+]]:sreg_32 = S_MOV_B32 4294967292
    ; SI-NEXT: [[S_LOAD_DWORD_SGPR3:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_3]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR3]]
    ; SI-NEXT: [[S_MOV_B2:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 4294967296
    ; SI-NEXT: [[COPY9:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; SI-NEXT: [[COPY10:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub0
    ; SI-NEXT: [[COPY11:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; SI-NEXT: [[COPY12:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub1
    ; SI-NEXT: [[S_ADD_U2:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B2]], implicit-def $scc
    ; SI-NEXT: [[S_LOAD_DWORD_IMM4:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U2]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM4]]
    ; SI-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p0) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM]]
    ; SI-NEXT: [[S_LOAD_DWORDX2_IMM1:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p1) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM1]]
    ; SI-NEXT: [[S_LOAD_DWORDX2_IMM2:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p4) from %ir.const0, addrspace 4)
    ; SI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM2]]
    ;
    ; CI-LABEL: name: smrd_imm
    ; CI: liveins: $sgpr0_sgpr1
    ; CI-NEXT: {{  $}}
    ; CI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; CI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 255, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM1]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 256, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 262143, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci1]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 262144, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci2]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci3:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 4294967295, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci3]]
    ; CI-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869184
    ; CI-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; CI-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub0
    ; CI-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; CI-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub1
    ; CI-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B]], implicit-def $scc
    ; CI-NEXT: [[S_LOAD_DWORD_IMM2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM2]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci4:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 1073741823, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci4]]
    ; CI-NEXT: [[S_LOAD_DWORD_IMM_ci5:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM_ci [[COPY]], 1073741824, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM_ci5]]
    ; CI-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p0) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM]]
    ; CI-NEXT: [[S_LOAD_DWORDX2_IMM1:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p1) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM1]]
    ; CI-NEXT: [[S_LOAD_DWORDX2_IMM2:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p4) from %ir.const0, addrspace 4)
    ; CI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM2]]
    ;
    ; VI-LABEL: name: smrd_imm
    ; VI: liveins: $sgpr0_sgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; VI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 4, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM]]
    ; VI-NEXT: [[S_LOAD_DWORD_IMM1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1020, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM1]]
    ; VI-NEXT: [[S_LOAD_DWORD_IMM2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1024, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM2]]
    ; VI-NEXT: [[S_LOAD_DWORD_IMM3:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1048572, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM3]]
    ; VI-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1048576
    ; VI-NEXT: [[S_LOAD_DWORD_SGPR:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR]]
    ; VI-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869180
    ; VI-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; VI-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub0
    ; VI-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; VI-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub1
    ; VI-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B]], implicit-def $scc
    ; VI-NEXT: [[S_LOAD_DWORD_IMM4:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM4]]
    ; VI-NEXT: [[S_MOV_B1:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869184
    ; VI-NEXT: [[COPY5:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; VI-NEXT: [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub0
    ; VI-NEXT: [[COPY7:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; VI-NEXT: [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub1
    ; VI-NEXT: [[S_ADD_U1:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B1]], implicit-def $scc
    ; VI-NEXT: [[S_LOAD_DWORD_IMM5:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U1]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM5]]
    ; VI-NEXT: [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 4294967292
    ; VI-NEXT: [[S_LOAD_DWORD_SGPR1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[S_MOV_B32_1]], 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR1]]
    ; VI-NEXT: [[S_MOV_B2:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 4294967296
    ; VI-NEXT: [[COPY9:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; VI-NEXT: [[COPY10:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub0
    ; VI-NEXT: [[COPY11:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; VI-NEXT: [[COPY12:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub1
    ; VI-NEXT: [[S_ADD_U2:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B2]], implicit-def $scc
    ; VI-NEXT: [[S_LOAD_DWORD_IMM6:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U2]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM6]]
    ; VI-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p0) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM]]
    ; VI-NEXT: [[S_LOAD_DWORDX2_IMM1:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p1) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM1]]
    ; VI-NEXT: [[S_LOAD_DWORDX2_IMM2:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p4) from %ir.const0, addrspace 4)
    ; VI-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM2]]
    ;
    ; GFX9-LABEL: name: smrd_imm
    ; GFX9: liveins: $sgpr0_sgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 4, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM]]
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1020, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM1]]
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[COPY]], 1024, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM2]]
    ; GFX9-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 1048572
    ; GFX9-NEXT: [[S_LOAD_DWORD_SGPR_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR_IMM [[COPY]], [[S_MOV_B32_]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR_IMM]]
    ; GFX9-NEXT: [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 1048576
    ; GFX9-NEXT: [[S_LOAD_DWORD_SGPR_IMM1:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR_IMM [[COPY]], [[S_MOV_B32_1]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR_IMM1]]
    ; GFX9-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869180
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub0
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; GFX9-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B]].sub1
    ; GFX9-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B]], implicit-def $scc
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM3:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM3]]
    ; GFX9-NEXT: [[S_MOV_B1:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 17179869184
    ; GFX9-NEXT: [[COPY5:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; GFX9-NEXT: [[COPY6:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub0
    ; GFX9-NEXT: [[COPY7:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; GFX9-NEXT: [[COPY8:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B1]].sub1
    ; GFX9-NEXT: [[S_ADD_U1:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B1]], implicit-def $scc
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM4:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U1]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM4]]
    ; GFX9-NEXT: [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 4294967292
    ; GFX9-NEXT: [[S_LOAD_DWORD_SGPR_IMM2:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR_IMM [[COPY]], [[S_MOV_B32_2]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_SGPR_IMM2]]
    ; GFX9-NEXT: [[S_MOV_B2:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 4294967296
    ; GFX9-NEXT: [[COPY9:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; GFX9-NEXT: [[COPY10:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub0
    ; GFX9-NEXT: [[COPY11:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; GFX9-NEXT: [[COPY12:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B2]].sub1
    ; GFX9-NEXT: [[S_ADD_U2:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[S_MOV_B2]], implicit-def $scc
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM5:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U2]], 0, 0 :: (load (s32) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0 = COPY [[S_LOAD_DWORD_IMM5]]
    ; GFX9-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p0) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM]]
    ; GFX9-NEXT: [[S_LOAD_DWORDX2_IMM1:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p1) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM1]]
    ; GFX9-NEXT: [[S_LOAD_DWORDX2_IMM2:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY]], 0, 0 :: (load (p4) from %ir.const0, addrspace 4)
    ; GFX9-NEXT: $sgpr0_sgpr1 = COPY [[S_LOAD_DWORDX2_IMM2]]
    %0:sgpr(p4) = COPY $sgpr0_sgpr1

    %1:sgpr(s64) = G_CONSTANT i64 4
    %2:sgpr(p4) = G_PTR_ADD %0, %1
    %3:sgpr(s32) = G_LOAD %2 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %3

    %4:sgpr(s64) = G_CONSTANT i64 1020
    %5:sgpr(p4) = G_PTR_ADD %0, %4
    %6:sgpr(s32) = G_LOAD %5 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %6

    %7:sgpr(s64) = G_CONSTANT i64 1024
    %8:sgpr(p4) = G_PTR_ADD %0, %7
    %9:sgpr(s32) = G_LOAD %8 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %9

    %10:sgpr(s64) = G_CONSTANT i64 1048572
    %11:sgpr(p4) = G_PTR_ADD %0, %10
    %12:sgpr(s32) = G_LOAD %11 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %12

    %13:sgpr(s64) = G_CONSTANT i64 1048576
    %14:sgpr(p4) = G_PTR_ADD %0, %13
    %15:sgpr(s32) = G_LOAD %14 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %15

    %16:sgpr(s64) = G_CONSTANT i64 17179869180
    %17:sgpr(p4) = G_PTR_ADD %0, %16
    %18:sgpr(s32) = G_LOAD %17 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %18

    %19:sgpr(s64) = G_CONSTANT i64 17179869184
    %20:sgpr(p4) = G_PTR_ADD %0, %19
    %21:sgpr(s32) = G_LOAD %20 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %21

    %22:sgpr(s64) = G_CONSTANT i64 4294967292
    %23:sgpr(p4) = G_PTR_ADD %0, %22
    %24:sgpr(s32) = G_LOAD %23 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %24

    %25:sgpr(s64) = G_CONSTANT i64 4294967296
    %26:sgpr(p4) = G_PTR_ADD %0, %25
    %27:sgpr(s32) = G_LOAD %26 :: (load (s32) from %ir.const0, addrspace 4)
    $sgpr0 = COPY %27

    %28:sgpr(p0) = G_LOAD %0 :: (load (p0) from %ir.const0, addrspace 4)
    $sgpr0_sgpr1 = COPY %28

    %29:sgpr(p1) = G_LOAD %0 :: (load (p1) from %ir.const0, addrspace 4)
    $sgpr0_sgpr1 = COPY %29

    %30:sgpr(p4) = G_LOAD %0 :: (load (p4) from %ir.const0, addrspace 4)
    $sgpr0_sgpr1 = COPY %30

...
---

name:            smrd_wide
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; GCN-LABEL: name: smrd_wide
    ; GCN: liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[S_LOAD_DWORDX8_IMM:%[0-9]+]]:sgpr_256 = S_LOAD_DWORDX8_IMM [[COPY]], 0, 0 :: (load (<8 x s32>), addrspace 4)
    ; GCN-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7 = COPY [[S_LOAD_DWORDX8_IMM]]
    ; GCN-NEXT: [[S_LOAD_DWORDX16_IMM:%[0-9]+]]:sgpr_512 = S_LOAD_DWORDX16_IMM [[COPY]], 0, 0 :: (load (<16 x s32>), addrspace 4)
    ; GCN-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7_sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15 = COPY [[S_LOAD_DWORDX16_IMM]]
    ; GCN-NEXT: [[S_LOAD_DWORDX8_IMM1:%[0-9]+]]:sgpr_256 = S_LOAD_DWORDX8_IMM [[COPY1]], 0, 0 :: (load (<8 x s32>), addrspace 1)
    ; GCN-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7 = COPY [[S_LOAD_DWORDX8_IMM1]]
    ; GCN-NEXT: [[S_LOAD_DWORDX16_IMM1:%[0-9]+]]:sgpr_512 = S_LOAD_DWORDX16_IMM [[COPY1]], 0, 0 :: (load (<16 x s32>), addrspace 1)
    ; GCN-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7_sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15 = COPY [[S_LOAD_DWORDX16_IMM1]]
    %0:sgpr(p4) = COPY $sgpr0_sgpr1
    %1:sgpr(p1) = COPY $sgpr2_sgpr3

    %2:sgpr(<8 x s32>) = G_LOAD %0 :: (load (<8 x s32>), addrspace 4)
    $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7 = COPY %2

    %3:sgpr(<16 x s32>) = G_LOAD %0 :: (load (<16 x s32>), addrspace 4)
    $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7_sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15 = COPY %3

    %4:sgpr(<8 x s32>) = G_LOAD %1 :: (load (<8 x s32>), addrspace 1)
    $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7 = COPY %4

    %5:sgpr(<16 x s32>) = G_LOAD %1 :: (load (<16 x s32>), addrspace 1)
    $sgpr0_sgpr1_sgpr2_sgpr3_sgpr4_sgpr5_sgpr6_sgpr7_sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15 = COPY %5
...


# Test a load of an offset from a constant base address
# GCN-LABEL: name: constant_address_positive{{$}}
# GCN: %0:sreg_64 = S_MOV_B64_IMM_PSEUDO 44

# VI: %3:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM %0, 64, 0 :: (dereferenceable invariant load (s32), addrspace 4)
# SICI: %3:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM %0, 16, 0 :: (dereferenceable invariant load (s32), addrspace 4)

---

name:            constant_address_positive
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; SICI-LABEL: name: constant_address_positive
    ; SICI: liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; SICI-NEXT: {{  $}}
    ; SICI-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 44
    ; SICI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_MOV_B]], 16, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; SICI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_IMM]]
    ;
    ; VI-LABEL: name: constant_address_positive
    ; VI: liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 44
    ; VI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_MOV_B]], 64, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; VI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_IMM]]
    ;
    ; GFX9-LABEL: name: constant_address_positive
    ; GFX9: liveins: $sgpr0_sgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO 44
    ; GFX9-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_MOV_B]], 64, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; GFX9-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_IMM]]
    %0:sgpr(p4) = G_CONSTANT i64 44
    %1:sgpr(s64) = G_CONSTANT i64 64
    %2:sgpr(p4) = G_PTR_ADD %0, %1
    %3:sgpr(s32) = G_LOAD %2 :: (dereferenceable invariant load (s32), align 4, addrspace 4)
    S_ENDPGM 0, implicit %3
...

---

# Test a load with a register offset.

name:            smrd_sgpr
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $sgpr2
    ; SICI-LABEL: name: smrd_sgpr
    ; SICI: liveins: $sgpr0_sgpr1, $sgpr2
    ; SICI-NEXT: {{  $}}
    ; SICI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; SICI-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; SICI-NEXT: [[S_LOAD_DWORD_SGPR:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[COPY1]], 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; SICI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_SGPR]]
    ;
    ; SIVI-LABEL: name: smrd_sgpr
    ; SIVI: liveins: $sgpr0_sgpr1, $sgpr2
    ; SIVI-NEXT: {{  $}}
    ; SIVI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; SIVI-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; SIVI-NEXT: [[S_LOAD_DWORD_SGPR:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR [[COPY]], [[COPY1]], 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; SIVI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_SGPR]]
    ;
    ; GFX9-LABEL: name: smrd_sgpr
    ; GFX9: liveins: $sgpr0_sgpr1, $sgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GFX9-NEXT: [[S_LOAD_DWORD_SGPR_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR_IMM [[COPY]], [[COPY1]], 0, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; GFX9-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_SGPR_IMM]]
    %0:sgpr(p4) = COPY $sgpr0_sgpr1
    %1:sgpr(s32) = COPY $sgpr2
    %2:sgpr(s64) = G_ZEXT %1:sgpr(s32)
    %4:sgpr(p4) = G_PTR_ADD %0, %2
    %5:sgpr(s32) = G_LOAD %4 :: (dereferenceable invariant load (s32), align 4, addrspace 4)
    S_ENDPGM 0, implicit %5
...

---

# Test a load with a (register + immediate) offset.

name:            smrd_sgpr_imm
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $sgpr2
    ; SICI-LABEL: name: smrd_sgpr_imm
    ; SICI: liveins: $sgpr0_sgpr1, $sgpr2
    ; SICI-NEXT: {{  $}}
    ; SICI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; SICI-NEXT: [[COPY1:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY $sgpr2
    ; SICI-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32_xm0 = S_MOV_B32 0
    ; SICI-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY1]], %subreg.sub0, [[S_MOV_B32_]], %subreg.sub1
    ; SICI-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; SICI-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub0
    ; SICI-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; SICI-NEXT: [[COPY5:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub1
    ; SICI-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[REG_SEQUENCE]], implicit-def $scc
    ; SICI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 4, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; SICI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_IMM]]
    ;
    ; VI-LABEL: name: smrd_sgpr_imm
    ; VI: liveins: $sgpr0_sgpr1, $sgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY $sgpr2
    ; VI-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32_xm0 = S_MOV_B32 0
    ; VI-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY1]], %subreg.sub0, [[S_MOV_B32_]], %subreg.sub1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub0
    ; VI-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub0
    ; VI-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY [[COPY]].sub1
    ; VI-NEXT: [[COPY5:%[0-9]+]]:sreg_32 = COPY [[REG_SEQUENCE]].sub1
    ; VI-NEXT: [[S_ADD_U:%[0-9]+]]:sreg_64 = S_ADD_U64_PSEUDO [[COPY]], [[REG_SEQUENCE]], implicit-def $scc
    ; VI-NEXT: [[S_LOAD_DWORD_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM [[S_ADD_U]], 16, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; VI-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_IMM]]
    ;
    ; GFX9-LABEL: name: smrd_sgpr_imm
    ; GFX9: liveins: $sgpr0_sgpr1, $sgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GFX9-NEXT: [[S_LOAD_DWORD_SGPR_IMM:%[0-9]+]]:sreg_32_xm0_xexec = S_LOAD_DWORD_SGPR_IMM [[COPY]], [[COPY1]], 16, 0 :: (dereferenceable invariant load (s32), addrspace 4)
    ; GFX9-NEXT: S_ENDPGM 0, implicit [[S_LOAD_DWORD_SGPR_IMM]]
    %0:sgpr(p4) = COPY $sgpr0_sgpr1
    %1:sgpr(s32) = COPY $sgpr2
    %2:sgpr(s64) = G_ZEXT %1:sgpr(s32)
    %4:sgpr(p4) = G_PTR_ADD %0, %2
    %5:sgpr(s64) = G_CONSTANT i64 16
    %6:sgpr(p4) = G_PTR_ADD %4, %5
    %7:sgpr(s32) = G_LOAD %6 :: (dereferenceable invariant load (s32), align 4, addrspace 4)
    S_ENDPGM 0, implicit %7
...

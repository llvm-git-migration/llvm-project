# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK

---
name:            test_fminnum
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fminnum
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMAXNUM:%[0-9]+]]:_(f32) = G_FMAXNUM [[FNEG]], [[FNEG1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMAXNUM]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMINNUM %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fmaxnum
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fmaxnum
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[FNEG]], [[FNEG1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMAXNUM %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fminnum_ieee
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fminnum_ieee
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FNEG]], [[FNEG1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMAXNUM_IEEE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMINNUM_IEEE %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fmaxnum_ieee
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fmaxnum_ieee
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FNEG]], [[FNEG1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMAXNUM_IEEE %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_amdgpu_fmin_legacy
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_amdgpu_fmin_legacy
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[AMDGPU_FMIN_LEGACY:%[0-9]+]]:_(i32) = G_AMDGPU_FMIN_LEGACY [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[AMDGPU_FMIN_LEGACY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_AMDGPU_FMIN_LEGACY %0, %1
    %4:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_FNEG %4
    %5:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %5(i32)

...
---
name:            test_amdgpu_fmax_legacy
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_amdgpu_fmax_legacy
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[AMDGPU_FMAX_LEGACY:%[0-9]+]]:_(i32) = G_AMDGPU_FMAX_LEGACY [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[AMDGPU_FMAX_LEGACY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_AMDGPU_FMAX_LEGACY %0, %1
    %4:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_FNEG %4
    %5:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %5(i32)

...
---
name:            test_fadd
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    %0:_(s32) = COPY $vgpr0
    %1:_(s32) = COPY $vgpr1
    %2:_(s32) = nsz G_FADD %0, %1
    %3:_(s32) = G_FNEG %2
    $vgpr0 = COPY %3(s32)

...
---
name:            test_fsub
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    %0:_(s32) = COPY $vgpr0
    %1:_(s32) = COPY $vgpr1
    %2:_(s32) = nsz G_FSUB %0, %1
    %3:_(s32) = G_FNEG %2
    $vgpr0 = COPY %3(s32)

...
---
name:            test_fma
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fma
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nsz G_FSUB [[FNEG]], [[BITCAST1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FSUB]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = nsz G_FADD %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fmad
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fmad
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; CHECK-NEXT: [[FMAD:%[0-9]+]]:_(f32) = nsz G_FMAD [[BITCAST]], [[FNEG]], [[FNEG1]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = nsz G_FMAD %5, %6, %7
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...
---
name:            test_fmul
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fmul
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[FNEG]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMUL %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fpext
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FPEXT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %4:_(f16) = G_BITCAST %1(i16)
    %2:_(f32) = G_FPEXT %4(f16)
    %3:_(f32) = G_FNEG %2
    %5:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %5(i32)

...
---
name:            test_intrinsic_trunc
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_intrinsic_trunc
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INTRINSIC_TRUNC]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC_TRUNC %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_frint
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_frint
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FRINT:%[0-9]+]]:_(f32) = G_FRINT [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FRINT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_FRINT %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_fnearbyint
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fnearbyint
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEARBYINT:%[0-9]+]]:_(f32) = G_FNEARBYINT [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEARBYINT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_FNEARBYINT %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_intrinsic_round
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_intrinsic_round
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INTRINSIC_ROUND:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUND [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INTRINSIC_ROUND]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC_ROUND %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_intrinsic_roundeven
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_intrinsic_roundeven
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INTRINSIC_ROUNDEVEN]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC_ROUNDEVEN %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_fsin
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fsin
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FSIN:%[0-9]+]]:_(f32) = G_FSIN [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FSIN]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_FSIN %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_fcanonicalize
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fcanonicalize
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FCANONICALIZE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_FCANONICALIZE %3
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_amdgcn_rcp_iflag
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_amdgcn_rcp_iflag
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(i32) = G_AMDGPU_RCP_IFLAG [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[AMDGPU_RCP_IFLAG]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_AMDGPU_RCP_IFLAG %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FNEG %3
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_fptrunc
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: test_fptrunc
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FPTRUNC:%[0-9]+]]:_(f32) = G_FPTRUNC [[FNEG]](f64)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FPTRUNC]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %3:_(f64) = G_BITCAST %0(i64)
    %1:_(f32) = G_FPTRUNC %3(f64)
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_amdgcn_rcp
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_amdgcn_rcp
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), %3(f32)
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_amdgcn_rcp_legacy
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_amdgcn_rcp_legacy
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp.legacy), [[FNEG]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp.legacy), %3(f32)
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_amdgcn_sin
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_amdgcn_sin
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sin), [[FNEG]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %3:_(f32) = G_BITCAST %0(i32)
    %1:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sin), %3(f32)
    %2:_(f32) = G_FNEG %1
    %4:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_fmul_legacy
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fmul_legacy
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fmul.legacy), [[BITCAST]](f32), [[FNEG]](f32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fmul.legacy), %4(f32), %5(f32)
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fmed3
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fmed3
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fmed3), [[FNEG]](f32), [[FNEG1]](f32), [[FNEG2]](f32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fmed3), %5(f32), %6(f32), %7(f32)
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...
---
name:            test_amdgcn_fma_legacy
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_amdgcn_fma_legacy
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = nsz G_INTRINSIC intrinsic(@llvm.amdgcn.fma.legacy), [[BITCAST]](f32), [[FNEG]](f32), [[FNEG1]](f32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = nsz G_INTRINSIC intrinsic(@llvm.amdgcn.fma.legacy), %5(f32), %6(f32), %7(f32)
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...

# Don't fold fneg for fadd, fsub, fma, fmad or fma_legacy without nsz
---
name:            test_fadd_sz
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fadd_sz
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FADD]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FADD %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fsub_sz
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_fsub_sz
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FSUB]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FSUB %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_fma_sz
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fma_sz
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMA]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_FMA %5, %6, %7
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...
---
name:            test_fmad_sz
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fmad_sz
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMAD]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_FMAD %5, %6, %7
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...
---
name:            test_amdgcn_fma_legacy_sz
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_amdgcn_fma_legacy_sz
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fma.legacy), [[BITCAST]](f32), [[BITCAST1]](f32), [[BITCAST2]](f32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %5:_(f32) = G_BITCAST %0(i32)
    %6:_(f32) = G_BITCAST %1(i32)
    %7:_(f32) = G_BITCAST %2(i32)
    %3:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fma.legacy), %5(f32), %6(f32), %7(f32)
    %4:_(f32) = G_FNEG %3
    %8:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %8(i32)

...

# Don't negate 0 for minnum, maxnum
---
name:            test_fminnum_zero
body:             |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: test_fminnum_zero
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[BITCAST]], [[C]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMINNUM]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_FCONSTANT float 0.000000e+00
    %4:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FMINNUM %4, %1
    %3:_(f32) = G_FNEG %2
    %5:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %5(i32)

...

# On VI and above don't negate 1.0 / (0.5 * pi)
---
name:            test_fminnum_inv2pi_half
body:             |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: test_fminnum_inv2pi_half
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3118
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FMINNUM:%[0-9]+]]:_(f16) = G_FMINNUM [[BITCAST]], [[C]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[FMINNUM]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FNEG]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_FCONSTANT half 0xH3118
    %6:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FMINNUM %6, %2
    %4:_(f16) = G_FNEG %3
    %7:_(i16) = G_BITCAST %4(f16)
    %5:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            test_fminnum_inv2pi_float
body:             |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: test_fminnum_inv2pi_float
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FC45F3060000000
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[BITCAST]], [[C]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMINNUM]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_FCONSTANT float 0x3FC45F3060000000
    %4:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FMINNUM %4, %1
    %3:_(f32) = G_FNEG %2
    %5:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %5(i32)

...
---
name:            test_fminnum_inv2pi_double
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: test_fminnum_inv2pi_double
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 0x3FC45F306DC9C882
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[FMINNUM:%[0-9]+]]:_(f64) = G_FMINNUM [[BITCAST]], [[C]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[FMINNUM]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FNEG]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(f64) = G_FCONSTANT double 0x3FC45F306DC9C882
    %4:_(f64) = G_BITCAST %0(i64)
    %2:_(f64) = G_FMINNUM %4, %1
    %3:_(f64) = G_FNEG %2
    %5:_(i64) = G_BITCAST %3(f64)
    $vgpr0_vgpr1 = COPY %5(i64)

...

#Don't fold when where instruction count will not decrease.
---
name:            test_use_both
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_use_both
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[BITCAST2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr1 = COPY [[BITCAST4]](i32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL1]](f32)
    ; CHECK-NEXT: $vgpr2 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %3:_(f32) = G_FMUL %6, %7
    %4:_(f32) = G_FNEG %3
    %8:_(f32) = G_BITCAST %2(i32)
    %5:_(f32) = G_FMUL %4, %8
    %9:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %9(i32)
    %10:_(i32) = G_BITCAST %4(f32)
    $vgpr1 = COPY %10(i32)
    %11:_(i32) = G_BITCAST %5(f32)
    $vgpr2 = COPY %11(i32)

...

#Don't fold when where instruction count will not decrease.
---
name:            test_use_both2
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_use_both2
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FNEG]](f32)
    ; CHECK-NEXT: $vgpr1 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %4:_(f32) = G_BITCAST %0(i32)
    %5:_(f32) = G_BITCAST %1(i32)
    %2:_(f32) = G_FMUL %4, %5
    %3:_(f32) = G_FNEG %2
    %6:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %6(i32)
    %7:_(i32) = G_BITCAST %3(f32)
    $vgpr1 = COPY %7(i32)

...

---
name:            multiple_uses_of_fneg
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: multiple_uses_of_fneg
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[FNEG]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FMUL]], [[BITCAST2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[COPY3]](i32)
    ; CHECK-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FMUL]], [[BITCAST3]]
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL1]](f32)
    ; CHECK-NEXT: $vgpr1 = COPY [[BITCAST5]](i32)
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL2]](f32)
    ; CHECK-NEXT: $vgpr2 = COPY [[BITCAST6]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %8:_(f32) = G_BITCAST %0(i32)
    %9:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMUL %8, %9
    %5:_(f32) = G_FNEG %4
    %10:_(f32) = G_BITCAST %2(i32)
    %6:_(f32) = G_FMUL %5, %10
    %11:_(f32) = G_BITCAST %3(i32)
    %7:_(f32) = G_FMUL %5, %11
    %12:_(i32) = G_BITCAST %5(f32)
    $vgpr0 = COPY %12(i32)
    %13:_(i32) = G_BITCAST %6(f32)
    $vgpr1 = COPY %13(i32)
    %14:_(i32) = G_BITCAST %7(f32)
    $vgpr2 = COPY %14(i32)



...

# Check if new fneg is inserted at the appropriate place
---
name:            fneg_src_has_multiple_uses
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: fneg_src_has_multiple_uses
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST1]]
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[FNEG]]
    ; CHECK-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[BITCAST2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL1]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; CHECK-NEXT: $vgpr1 = COPY [[BITCAST4]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %3:_(f32) = G_FMUL %6, %7
    %8:_(f32) = G_BITCAST %2(i32)
    %4:_(f32) = G_FMUL %3, %8
    %5:_(f32) = G_FNEG %3
    %9:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %9(i32)
    %10:_(i32) = G_BITCAST %5(f32)
    $vgpr1 = COPY %10(i32)

...

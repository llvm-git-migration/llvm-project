; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn -mcpu=gfx1030 -verify-machineinstrs < %s | FileCheck -check-prefix=GCN %s

define amdgpu_kernel void @scalar_cmp(i32 noundef %value, ptr addrspace(8) nocapture writeonly %res, i32 noundef %v_offset, i32 noundef %0, i32 noundef %flag) {
; GCN-LABEL: scalar_cmp:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_load_dword s0, s[2:3], 0x4c
; GCN-NEXT:    s_or_saveexec_b32 s105, -1
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    v_cmpx_ge_i32_e64 s0, 1
; GCN-NEXT:    s_clause 0x2
; GCN-NEXT:    s_load_dword s4, s[2:3], 0x24
; GCN-NEXT:    s_load_dword s5, s[2:3], 0x44
; GCN-NEXT:    s_load_dwordx4 s[0:3], s[2:3], 0x34
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    v_mov_b32_e32 v0, s4
; GCN-NEXT:    v_mov_b32_e32 v1, s5
; GCN-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GCN-NEXT:    s_endpgm
entry:
  %cmp = icmp sgt i32 %flag, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.i32(i32 %value, ptr addrspace(8) %res, i32 %v_offset, i32 0, i32 0)
  br label %if.end

if.end:
  ret void
}

define amdgpu_kernel void @vec_cmp(i32 noundef %value, ptr addrspace(8) nocapture writeonly %res, i32 noundef %v_offset, i32 noundef %0, i32 noundef %flag) {
; GCN-LABEL: vec_cmp:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_load_dword s0, s[2:3], 0x4c
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    v_cmp_gt_u32_e32 vcc_lo, s0, v0
; GCN-NEXT:    s_and_saveexec_b32 s0, vcc_lo
; GCN-NEXT:    s_cbranch_execz .LBB1_2
; GCN-NEXT:  ; %bb.1: ; %if.then
; GCN-NEXT:    s_clause 0x2
; GCN-NEXT:    s_load_dword s4, s[2:3], 0x24
; GCN-NEXT:    s_load_dword s5, s[2:3], 0x44
; GCN-NEXT:    s_load_dwordx4 s[0:3], s[2:3], 0x34
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    v_mov_b32_e32 v0, s4
; GCN-NEXT:    v_mov_b32_e32 v1, s5
; GCN-NEXT:    buffer_store_dword v0, v1, s[0:3], 0 offen
; GCN-NEXT:  .LBB1_2: ; %if.end
; GCN-NEXT:    s_endpgm
entry:
  %1 = tail call noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x()
  %cmp = icmp ult i32 %1, %flag
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.i32(i32 %value, ptr addrspace(8) %res, i32 %v_offset, i32 0, i32 0)
  br label %if.end

if.end:
  ret void
}

declare void @llvm.amdgcn.raw.ptr.buffer.store.i32(i32, ptr addrspace(8) nocapture writeonly, i32, i32, i32 immarg)
declare i32 @llvm.amdgcn.workitem.id.x()

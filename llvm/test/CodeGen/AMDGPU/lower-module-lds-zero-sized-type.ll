; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=amdgcn-- -amdgpu-lower-module-lds --amdgpu-lower-module-lds-strategy=module < %s | FileCheck %s
; RUN: opt -S -mtriple=amdgcn-- -passes=amdgpu-lower-module-lds --amdgpu-lower-module-lds-strategy=module < %s | FileCheck %s

; Check that we don't crash when lowering an internal zero-sized LDS GV.
; This specifically tests the LDS module lowering path, not the

@var0 = internal addrspace(3) global [0 x float] poison, align 4

define void @func() {
; CHECK-LABEL: define void @func() {
; CHECK-NEXT:    [[IDX:%.*]] = getelementptr inbounds [0 x float], ptr addrspace(3) @llvm.amdgcn.module.lds, i32 0, i32 1
; CHECK-NEXT:    [[V:%.*]] = load float, ptr addrspace(3) [[IDX]], align 4
; CHECK-NEXT:    ret void
;
  %idx = getelementptr inbounds [0 x float], ptr addrspace(3) @var0, i32 0, i32 1
  %v = load float, ptr addrspace(3) %idx
  ret void
}

define amdgpu_kernel void @kernel() {
; CHECK-LABEL: define amdgpu_kernel void @kernel() {
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.module.lds) ]
; CHECK-NEXT:    call void @func()
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr addrspace(3) @llvm.amdgcn.module.lds, align 4
; CHECK-NEXT:    ret void
;
  call void @func()
  load float, ptr addrspace(3) @var0
  ret void
}

# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs -mtriple aarch64-unknown-unknown %s -o - | FileCheck %s

---
name:            ptradd_with_sub
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: ptradd_with_sub
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1600
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[COPY1]](s64)
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: $x0 = COPY [[PTR_ADD1]](p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x0
    %2:_(s64) = G_CONSTANT i64 1600
    %10:_(s64) = G_SUB %1, %2(s64)
    %11:_(p0) = G_PTR_ADD %0, %10(s64)
    $x0 = COPY %11(p0)
    RET_ReallyLR implicit $x0

...
---
name:            ptradd_with_sub_multiple_use
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: ptradd_with_sub_multiple_use
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1600
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[COPY1]], [[C]]
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[SUB]](s64)
    ; CHECK-NEXT: $x0 = COPY [[PTR_ADD]](p0)
    ; CHECK-NEXT: $x1 = COPY [[SUB]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x0
    %2:_(s64) = G_CONSTANT i64 1600
    %10:_(s64) = G_SUB %1, %2(s64)
    %11:_(p0) = G_PTR_ADD %0, %10(s64)
    $x0 = COPY %11(p0)
    $x1 = COPY %10(s64)
    RET_ReallyLR implicit $x0

...
---
name:            ptradd_with_add
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: ptradd_with_add
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1600
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[COPY1]](s64)
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: $x0 = COPY [[PTR_ADD1]](p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %2:_(s64) = G_CONSTANT i64 1600
    %10:_(s64) = G_ADD %1, %2(s64)
    %11:_(p0) = G_PTR_ADD %0, %10(s64)
    $x0 = COPY %11(p0)
    RET_ReallyLR implicit $x0

...
---
name:            load_with_two_constants
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: load_with_two_constants
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 17
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x0
    %3:_(s64) = G_CONSTANT i64 16
    %4:_(s64) = G_CONSTANT i64 1
    %13:_(p0) = G_PTR_ADD %0, %3(s64)
    %12:_(p0) = nsw G_PTR_ADD %13, %4(s64)
    %14:_(s64) = G_LOAD %12(p0) :: (load (s64))
    $x0 = COPY %14(s64)
    RET_ReallyLR implicit $x0

...
---
name:            load_with_two_constants_large
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: load_with_two_constants_large
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 3000
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %3:_(s64) = G_CONSTANT i64 1000
    %4:_(s64) = G_CONSTANT i64 2000
    %13:_(p0) = G_PTR_ADD %0, %3(s64)
    %12:_(p0) = nsw G_PTR_ADD %13, %4(s64)
    %14:_(s64) = G_LOAD %12(p0) :: (load (s64))
    $x0 = COPY %14(s64)
    RET_ReallyLR implicit $x0

...
---
name:            load_with_two_distributed_constants
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: load_with_two_distributed_constants
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[COPY1]](s64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 17
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD1]](p0) :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %3:_(s64) = G_CONSTANT i64 16
    %4:_(s64) = G_CONSTANT i64 1
    %14:_(p0) = G_PTR_ADD %0, %3(s64)
    %13:_(p0) = G_PTR_ADD %14, %1(s64)
    %12:_(p0) = nsw G_PTR_ADD %13, %4(s64)
    %15:_(s64) = G_LOAD %12(p0) :: (load (s64))
    $x0 = COPY %15(s64)
    RET_ReallyLR implicit $x0

...
---
name:            move_inner
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: move_inner
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[COPY1]](s64)
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: $x0 = COPY [[PTR_ADD1]](p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %3:_(s64) = G_CONSTANT i64 16
    %13:_(p0) = G_PTR_ADD %0, %3(s64)
    %12:_(p0) = nsw G_PTR_ADD %13, %1(s64)
    $x0 = COPY %12(p0)
    RET_ReallyLR implicit $x0

...
---
name:            move_inner_rotate
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: move_inner_rotate
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32
    ; CHECK-NEXT: [[CONSTANT_FOLD_BARRIER:%[0-9]+]]:_(s64) = G_CONSTANT_FOLD_BARRIER [[C1]]
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[CONSTANT_FOLD_BARRIER]](s64)
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: $x0 = COPY [[PTR_ADD1]](p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %3:_(s64) = G_CONSTANT i64 16
    %4:_(s64) = G_CONSTANT i64 32
    %5:_(s64) = G_CONSTANT_FOLD_BARRIER %4
    %13:_(p0) = G_PTR_ADD %0, %3(s64)
    %12:_(p0) = nsw G_PTR_ADD %13, %5(s64)
    $x0 = COPY %12(p0)
    RET_ReallyLR implicit $x0

...
---
name:            load_with_three_constants
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: load_with_three_constants
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 60
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %2:_(s64) = G_CONSTANT i64 10
    %3:_(s64) = G_CONSTANT i64 20
    %4:_(s64) = G_CONSTANT i64 30
    %12:_(p0) = G_PTR_ADD %0, %2(s64)
    %13:_(p0) = G_PTR_ADD %12, %3(s64)
    %14:_(p0) = nsw G_PTR_ADD %13, %4(s64)
    %15:_(s64) = G_LOAD %14(p0) :: (load (s64))
    $x0 = COPY %15(s64)
    RET_ReallyLR implicit $x0

...
---
name:            load_with_two_constants_and_sub
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: load_with_two_constants_and_sub
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[COPY1]](s64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 20
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = nsw G_PTR_ADD [[PTR_ADD]], [[C]](s64)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD1]](p0) :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY [[LOAD]](s64)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %0:_(p0) = COPY $x0
    %1:_(s64) = COPY $x1
    %2:_(s64) = G_CONSTANT i64 10
    %4:_(s64) = G_CONSTANT i64 30
    %12:_(s64) = G_SUB %1, %2(s64)
    %13:_(p0) = G_PTR_ADD %0, %12(s64)
    %14:_(p0) = nsw G_PTR_ADD %13, %4(s64)
    %15:_(s64) = G_LOAD %14(p0) :: (load (s64))
    $x0 = COPY %15(s64)
    RET_ReallyLR implicit $x0

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64 -verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-SD
; RUN: llc -mtriple=aarch64 -global-isel -global-isel-abort=2 -verify-machineinstrs %s -o - 2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-GI

define i1 @i64_i64_canon(i64 %a, i64 %b) {
; CHECK-SD-LABEL: i64_i64_canon:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    cmp x0, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_canon:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    cmp x0, #0
; CHECK-GI-NEXT:    cset w0, ls
; CHECK-GI-NEXT:    ret
entry:
  %c = icmp uge i64 0, %a
  ret i1 %c
}

define <2 x i1> @i64_i64_canon_2x64(<2 x i64> %a, <2 x i64> %b) {
; CHECK-LABEL: i64_i64_canon_2x64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    adrp x8, .LCPI1_0
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI1_0]
; CHECK-NEXT:    cmhs v0.2d, v1.2d, v0.2d
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    ret
entry:
  %c = icmp uge  <2 x i64> <i64 42, i64 11>, %a
  ret <2 x i1> %c
}

define i1 @i64_i64_undef_eq(i64 %a, i64 %b) {
; CHECK-LABEL: i64_i64_undef_eq:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i64 %a, undef
  ret i1 %c
}

define i1 @i64_i64_slt_eq(i64 %a, i64 %b) {
; CHECK-LABEL: i64_i64_slt_eq:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
entry:
  %c = icmp slt i64 %a, %a
  ret i1 %c
}

define i1 @i64_i64_not_eq_undef(i64 %a, i64 %b) {
; CHECK-LABEL: i64_i64_not_eq_undef:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
entry:
  %c = icmp slt i64 %a, undef
  ret i1 %c
}

define i1 @i64_i64_sext(i32 %a, i32 %b) {
; CHECK-SD-LABEL: i64_i64_sext:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    // kill: def $w0 killed $w0 def $x0
; CHECK-SD-NEXT:    sxtw x8, w0
; CHECK-SD-NEXT:    cmp x8, w1, sxtw
; CHECK-SD-NEXT:    cset w0, lt
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_sext:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    cmp w0, w1
; CHECK-GI-NEXT:    cset w0, lt
; CHECK-GI-NEXT:    ret
entry:
  %sextedlhs = sext i32 %a to i64
  %sextedrhs = sext i32 %b to i64
  %c = icmp slt i64 %sextedlhs, %sextedrhs
  ret i1 %c
}

define i1 @i64_i64_zext(i32 %a, i32 %b) {
; CHECK-SD-LABEL: i64_i64_zext:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    mov w8, w0
; CHECK-SD-NEXT:    cmp x8, w1, uxtw
; CHECK-SD-NEXT:    cset w0, lt
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_zext:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    cmp w0, w1
; CHECK-GI-NEXT:    cset w0, lo
; CHECK-GI-NEXT:    ret
entry:
  %zextedlhs = zext i32 %a to i64
  %zextedrhs = zext i32 %b to i64
  %c = icmp slt i64 %zextedlhs, %zextedrhs
  ret i1 %c
}

define i1 @i64_i64_ule_or(i64 %a, i64 %b, i64 %c) {
; CHECK-SD-LABEL: i64_i64_ule_or:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr x8, x2, #0x1
; CHECK-SD-NEXT:    cmp x8, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_ule_or:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
entry:
  %or = or i64 1, %c
  %cmp = icmp ule i64 %or, 0
  ret i1 %cmp
}

define i1 @i64_i64_ugt_or(i64 %a, i64 %b, i64 %c) {
; CHECK-SD-LABEL: i64_i64_ugt_or:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr x8, x2, #0x1
; CHECK-SD-NEXT:    cmp x8, #0
; CHECK-SD-NEXT:    cset w0, ne
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_ugt_or:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, #1 // =0x1
; CHECK-GI-NEXT:    ret
entry:
  %or = or i64 1, %c
  %cmp = icmp ugt i64 %or, 0
  ret i1 %cmp
}

define i1 @i64_i64_eq_or(i64 %a, i64 %b, i64 %c) {
; CHECK-SD-LABEL: i64_i64_eq_or:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr x8, x2, #0x1
; CHECK-SD-NEXT:    cmp x8, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_eq_or:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
entry:
  %or = or i64 1, %c
  %cmp = icmp eq i64 %or, 0
  ret i1 %cmp
}

define i1 @i64_i64_eq_freeze_or(i64 %a, i64 %b, i64 %c) {
; CHECK-SD-LABEL: i64_i64_eq_freeze_or:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr x8, x2, #0x1
; CHECK-SD-NEXT:    cmp x8, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_eq_freeze_or:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
entry:
  %or = or i64 1, %c
  %free = freeze i64 %or
  %cmp = icmp eq i64 %free, 0
  ret i1 %cmp
}

define i1 @i64_i64_eq_freeze_add(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_eq_freeze_add:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    cmn x2, #1
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
entry:
  %add = add nuw i64 1, %c
  %free = freeze i64 %add
  %cmp = icmp eq i64 %free, 0
  ret i1 %cmp
}

define i1 @i64_i64_eq_lshr(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_eq_lshr:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
entry:
  %lshr = lshr exact i64 1, %c
  %cmp = icmp eq i64 %lshr, 0
  ret i1 %cmp
}

define i1 @i64_i64_eq_zext(i64 %a, i64 %b, i32 %c) {
; CHECK-SD-LABEL: i64_i64_eq_zext:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr w8, w2, #0x1
; CHECK-SD-NEXT:    cmp w8, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_eq_zext:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
entry:
  %or = or i32 1, %c
  %ze = zext i32 %or to i64
  %cmp = icmp eq i64 %ze, 0
  ret i1 %cmp
}

define i1 @i64_i64_canon_ule(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_canon_ule:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, #1 // =0x1
; CHECK-NEXT:    ret
entry:
  %cmp = icmp ule i64 0, %a
  ret i1 %cmp
}

define i1 @i64_i64_canon_ugt(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_canon_ugt:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
entry:
  %cmp = icmp ugt i64 0, %a
  ret i1 %cmp
}

define i1 @i64_i64_trunc_eq(i64 %a, i64 %b, i64 %c) {
; CHECK-SD-LABEL: i64_i64_trunc_eq:
; CHECK-SD:       // %bb.0: // %entry
; CHECK-SD-NEXT:    orr w8, w2, #0x1
; CHECK-SD-NEXT:    cmp w8, #0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: i64_i64_trunc_eq:
; CHECK-GI:       // %bb.0: // %entry
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
entry:
  %or = or i64 1, %c
  %tr = trunc nsw i64 %or to i32
  %cmp = icmp eq i32 %tr, 0
  ret i1 %cmp
}

define i1 @i64_i64_umin_eq(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_umin_eq:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    orr x8, x2, #0x1
; CHECK-NEXT:    orr x9, x2, #0x2
; CHECK-NEXT:    cmp x8, x9
; CHECK-NEXT:    csel x8, x8, x9, lo
; CHECK-NEXT:    cmp x8, #0
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
entry:
  %or1 = or i64 1, %c
  %or2 = or i64 2, %c
  %umin =  call i64 @llvm.umin.i64(i64 %or1, i64 %or2)
  %cmp = icmp eq i64 %umin, 0
  ret i1 %cmp
}

define i1 @i64_i64_smin_eq(i64 %a, i64 %b, i64 %c) {
; CHECK-LABEL: i64_i64_smin_eq:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    orr x8, x2, #0x1
; CHECK-NEXT:    orr x9, x2, #0x2
; CHECK-NEXT:    cmp x8, x9
; CHECK-NEXT:    csel x8, x8, x9, lt
; CHECK-NEXT:    cmp x8, #0
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
entry:
  %or1 = or i64 1, %c
  %or2 = or i64 2, %c
  %smin =  call i64 @llvm.smin.i64(i64 %or1, i64 %or2)
  %cmp = icmp eq i64 %smin, 0
  ret i1 %cmp
}

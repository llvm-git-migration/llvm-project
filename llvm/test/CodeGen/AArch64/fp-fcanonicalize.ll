; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=aarch64 --mattr=+fullfp16 < %s | FileCheck %s --check-prefix=AARCH64

declare half @llvm.fcanonicalize.f16(half)
declare float @llvm.fcanonicalize.f32(float)
declare double @llvm.fcanonicalize.f64(double)

define half @fcanonicalize_half(half %x) {
; AARCH64-LABEL: fcanonicalize_half:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm h0, h0, h0
; AARCH64-NEXT:    ret
  %z = call half @llvm.canonicalize.f16(half %x)
  ret half %z
}

define half @fcanonicalize_half_nnan(half %x) {
; AARCH64-LABEL: fcanonicalize_half_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm h0, h0, h0
; AARCH64-NEXT:    ret
  %z = call nnan half @llvm.canonicalize.f16(half %x)
  ret half %z
}

define <2 x half> @fcanonicalize_v2f16(<2 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v2f16:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4h, v0.4h, v0.4h
; AARCH64-NEXT:    ret
  %z = call <2 x half> @llvm.canonicalize.v2f16(<2 x half> %x)
  ret <2 x half> %z
}

define <2 x half> @fcanonicalize_v2f16_nnan(<2 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v2f16_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4h, v0.4h, v0.4h
; AARCH64-NEXT:    ret
  %z = call nnan <2 x half> @llvm.canonicalize.v2f16(<2 x half> %x)
  ret <2 x half> %z
}

define <4 x half> @fcanonicalize_v4f16(<4 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v4f16:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4h, v0.4h, v0.4h
; AARCH64-NEXT:    ret
  %z = call <4 x half> @llvm.canonicalize.v4f16(<4 x half> %x)
  ret <4 x half> %z
}

define <4 x half> @fcanonicalize_v4f16_nnan(<4 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v4f16_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4h, v0.4h, v0.4h
; AARCH64-NEXT:    ret
  %z = call nnan <4 x half> @llvm.canonicalize.v4f16(<4 x half> %x)
  ret <4 x half> %z
}

define <8 x half> @fcanonicalize_v8f16(<8 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v8f16:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.8h, v0.8h, v0.8h
; AARCH64-NEXT:    ret
  %z = call <8 x half> @llvm.canonicalize.v8f16(<8 x half> %x)
  ret <8 x half> %z
}

define <8 x half> @fcanonicalize_v8f16_nnan(<8 x half> %x) {
; AARCH64-LABEL: fcanonicalize_v8f16_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.8h, v0.8h, v0.8h
; AARCH64-NEXT:    ret
  %z = call nnan <8 x half> @llvm.canonicalize.v8f16(<8 x half> %x)
  ret <8 x half> %z
}

define float @fcanonicalize_float(float %x) {
; AARCH64-LABEL: fcanonicalize_float:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm s0, s0, s0
; AARCH64-NEXT:    ret
  %z = call float @llvm.canonicalize.f32(float %x)
  ret float %z
}

define float @fcanonicalize_float_nnan(float %x) {
; AARCH64-LABEL: fcanonicalize_float_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm s0, s0, s0
; AARCH64-NEXT:    ret
  %z = call nnan float @llvm.canonicalize.f32(float %x)
  ret float %z
}

define <2 x float> @fcanonicalize_v2f32(<2 x float> %x) {
; AARCH64-LABEL: fcanonicalize_v2f32:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.2s, v0.2s, v0.2s
; AARCH64-NEXT:    ret
  %z = call <2 x float> @llvm.canonicalize.v2f32(<2 x float> %x)
  ret <2 x float> %z
}

define <2 x float> @fcanonicalize_v2f32_nnan(<2 x float> %x) {
; AARCH64-LABEL: fcanonicalize_v2f32_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.2s, v0.2s, v0.2s
; AARCH64-NEXT:    ret
  %z = call nnan <2 x float> @llvm.canonicalize.v2f32(<2 x float> %x)
  ret <2 x float> %z
}

define <4 x float> @fcanonicalize_v4f32(<4 x float> %x) {
; AARCH64-LABEL: fcanonicalize_v4f32:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4s, v0.4s, v0.4s
; AARCH64-NEXT:    ret
  %z = call <4 x float> @llvm.canonicalize.v4f32(<4 x float> %x)
  ret <4 x float> %z
}

define <4 x float> @fcanonicalize_v4f32_nnan(<4 x float> %x) {
; AARCH64-LABEL: fcanonicalize_v4f32_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.4s, v0.4s, v0.4s
; AARCH64-NEXT:    ret
  %z = call nnan <4 x float> @llvm.canonicalize.v4f32(<4 x float> %x)
  ret <4 x float> %z
}

define double @fcanonicalize_double(double %x) {
; AARCH64-LABEL: fcanonicalize_double:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm d0, d0, d0
; AARCH64-NEXT:    ret
  %z = call double @llvm.canonicalize.f64(double %x)
  ret double %z
}

define double @fcanonicalize_double_nnan(double %x) {
; AARCH64-LABEL: fcanonicalize_double_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm d0, d0, d0
; AARCH64-NEXT:    ret
  %z = call nnan double @llvm.canonicalize.f64(double %x)
  ret double %z
}

define <2 x double> @fcanonicalize_v2f64(<2 x double> %x) {
; AARCH64-LABEL: fcanonicalize_v2f64:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.2d, v0.2d, v0.2d
; AARCH64-NEXT:    ret
  %z = call <2 x double> @llvm.canonicalize.v2f64(<2 x double> %x)
  ret <2 x double> %z
}

define <2 x double> @fcanonicalize_v2f64_nnan(<2 x double> %x) {
; AARCH64-LABEL: fcanonicalize_v2f64_nnan:
; AARCH64:       // %bb.0:
; AARCH64-NEXT:    fminnm v0.2d, v0.2d, v0.2d
; AARCH64-NEXT:    ret
  %z = call nnan <2 x double> @llvm.canonicalize.v2f64(<2 x double> %x)
  ret <2 x double> %z
}

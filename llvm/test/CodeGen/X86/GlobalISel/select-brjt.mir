# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=x86_64-linux-gnu -run-pass=instruction-select %s -o - | FileCheck %s --check-prefix=X64
# RUN: llc -mtriple=i386-linux-gnu   -run-pass=instruction-select %s -o - | FileCheck %s --check-prefix=X32

---
name:            test
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
jumpTable:
  kind:            block-address
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.3' ]
body:             |
  ; X64-LABEL: name: test
  ; X64: bb.0.entry:
  ; X64-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; X64-NEXT:   liveins: $edi
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:gr32 = COPY $edi
  ; X64-NEXT:   [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 4
  ; X64-NEXT:   [[SUB32ri:%[0-9]+]]:gr32 = SUB32ri [[COPY]], 0, implicit-def dead $eflags
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:gr64_nosp = COPY [[SUB32ri]]
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:gr32 = COPY [[COPY1]]
  ; X64-NEXT:   CMP32rr [[COPY2]], [[MOV32ri]], implicit-def $eflags
  ; X64-NEXT:   [[SETCCr:%[0-9]+]]:gr8 = SETCCr 7, implicit $eflags
  ; X64-NEXT:   TEST8ri [[SETCCr]], 1, implicit-def $eflags
  ; X64-NEXT:   JCC_1 %bb.4, 5, implicit $eflags
  ; X64-NEXT: {{  $}}
  ; X64-NEXT: bb.1.entry:
  ; X64-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[MOV64rm:%[0-9]+]]:gr64 = MOV64rm $noreg, 8, [[COPY1]], %jump-table.0, $noreg :: (load (p0) from jump-table)
  ; X64-NEXT:   JMP64r [[MOV64rm]]
  ; X64-NEXT: {{  $}}
  ; X64-NEXT: bb.2:
  ; X64-NEXT:   successors: %bb.5(0x80000000)
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   JMP_1 %bb.5
  ; X64-NEXT: {{  $}}
  ; X64-NEXT: bb.3:
  ; X64-NEXT:   successors: %bb.5(0x80000000)
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   JMP_1 %bb.5
  ; X64-NEXT: {{  $}}
  ; X64-NEXT: bb.4:
  ; X64-NEXT:   successors: %bb.5(0x80000000)
  ; X64-NEXT: {{  $}}
  ; X64-NEXT: bb.5:
  ; X64-NEXT:   $eax = COPY [[COPY]]
  ; X64-NEXT:   RET 0, implicit $eax
  ;
  ; X32-LABEL: name: test
  ; X32: bb.0.entry:
  ; X32-NEXT:   successors: %bb.1(0x40000000), %bb.4(0x40000000)
  ; X32-NEXT:   liveins: $edi
  ; X32-NEXT: {{  $}}
  ; X32-NEXT:   [[COPY:%[0-9]+]]:gr32 = COPY $edi
  ; X32-NEXT:   [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 4
  ; X32-NEXT:   [[SUB32ri:%[0-9]+]]:gr32_nosp = SUB32ri [[COPY]], 0, implicit-def dead $eflags
  ; X32-NEXT:   CMP32rr [[SUB32ri]], [[MOV32ri]], implicit-def $eflags
  ; X32-NEXT:   [[SETCCr:%[0-9]+]]:gr8 = SETCCr 7, implicit $eflags
  ; X32-NEXT:   TEST8ri [[SETCCr]], 1, implicit-def $eflags
  ; X32-NEXT:   JCC_1 %bb.4, 5, implicit $eflags
  ; X32-NEXT: {{  $}}
  ; X32-NEXT: bb.1.entry:
  ; X32-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; X32-NEXT: {{  $}}
  ; X32-NEXT:   [[MOV32rm:%[0-9]+]]:gr32 = MOV32rm $noreg, 8, [[SUB32ri]], %jump-table.0, $noreg :: (load (p0) from jump-table)
  ; X32-NEXT:   JMP32r [[MOV32rm]]
  ; X32-NEXT: {{  $}}
  ; X32-NEXT: bb.2:
  ; X32-NEXT:   successors: %bb.5(0x80000000)
  ; X32-NEXT: {{  $}}
  ; X32-NEXT:   JMP_1 %bb.5
  ; X32-NEXT: {{  $}}
  ; X32-NEXT: bb.3:
  ; X32-NEXT:   successors: %bb.5(0x80000000)
  ; X32-NEXT: {{  $}}
  ; X32-NEXT:   JMP_1 %bb.5
  ; X32-NEXT: {{  $}}
  ; X32-NEXT: bb.4:
  ; X32-NEXT:   successors: %bb.5(0x80000000)
  ; X32-NEXT: {{  $}}
  ; X32-NEXT: bb.5:
  ; X32-NEXT:   $eax = COPY [[COPY]]
  ; X32-NEXT:   RET 0, implicit $eax
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.4(0x40000000)
    liveins: $edi

    %0:gpr(s32) = COPY $edi
    %4:gpr(s32) = G_CONSTANT i32 4
    %1:gpr(s32) = G_CONSTANT i32 0
    %2:gpr(s32) = G_SUB %0, %1
    %8:gpr(s8) = G_ICMP intpred(ugt), %2(s32), %4
    %5:gpr(s1) = G_TRUNC %8(s8)
    G_BRCOND %5(s1), %bb.4

  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)

    %6:gpr(p0) = G_JUMP_TABLE %jump-table.0
    G_BRJT %6(p0), %jump-table.0, %2(s32)

  bb.2:
    successors: %bb.5(0x80000000)

    G_BR %bb.5

  bb.3:
    successors: %bb.5(0x80000000)

    G_BR %bb.5

  bb.4:
    successors: %bb.5(0x80000000)

  bb.5:
    $eax = COPY %0(s32)
    RET 0, implicit $eax

...

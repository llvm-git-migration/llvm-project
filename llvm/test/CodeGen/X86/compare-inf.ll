; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-- | FileCheck %s

declare void @f() nounwind

define void @oeq_inff(float %x) nounwind {
; CHECK-LABEL: oeq_inff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ucomiss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    jb .LBB0_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB0_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp oeq float %x, 0x7FF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @oeq_inf(double %x) nounwind {
; CHECK-LABEL: oeq_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    jb .LBB1_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB1_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp oeq double %x, 0x7FF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @une_inff(float %x) nounwind {
; CHECK-LABEL: une_inff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ucomiss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    jae .LBB2_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB2_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp une float %x, 0x7FF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @une_inf(double %x) nounwind {
; CHECK-LABEL: une_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ucomisd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    jae .LBB3_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB3_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp une double %x, 0x7FF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @oeq_neg_inff(float %x) nounwind {
; CHECK-LABEL: oeq_neg_inff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movss {{.*#+}} xmm1 = [-Inf,0.0E+0,0.0E+0,0.0E+0]
; CHECK-NEXT:    ucomiss %xmm0, %xmm1
; CHECK-NEXT:    jb .LBB4_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB4_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp oeq float %x, 0xFFF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @oeq_neg_inf(double %x) nounwind {
; CHECK-LABEL: oeq_neg_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movsd {{.*#+}} xmm1 = [-Inf,0.0E+0]
; CHECK-NEXT:    ucomisd %xmm0, %xmm1
; CHECK-NEXT:    jb .LBB5_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB5_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp oeq double %x, 0xFFF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @une_neg_inff(float %x) nounwind {
; CHECK-LABEL: une_neg_inff:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movss {{.*#+}} xmm1 = [-Inf,0.0E+0,0.0E+0,0.0E+0]
; CHECK-NEXT:    ucomiss %xmm0, %xmm1
; CHECK-NEXT:    jae .LBB6_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB6_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp une float %x, 0xFFF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

define void @une_neg_inf(double %x) nounwind {
; CHECK-LABEL: une_neg_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movsd {{.*#+}} xmm1 = [-Inf,0.0E+0]
; CHECK-NEXT:    ucomisd %xmm0, %xmm1
; CHECK-NEXT:    jae .LBB7_2
; CHECK-NEXT:  # %bb.1: # %true
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    addq $8, %rsp
; CHECK-NEXT:  .LBB7_2: # %false
; CHECK-NEXT:    retq
  %t0 = fcmp une double %x, 0xFFF0000000000000
  br i1 %t0, label %true, label %false

true:
  call void @f() nounwind
  br label %false

false:
  ret void
}

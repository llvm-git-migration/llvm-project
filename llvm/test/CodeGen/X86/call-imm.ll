; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=i386-apple-darwin -relocation-model=static | FileCheck -check-prefix X86STA %s
; RUN: llc < %s -mtriple=i386-apple-darwin -relocation-model=pic | FileCheck -check-prefix X86PIC %s
; RUN: llc < %s -mtriple=i386-pc-linux -relocation-model=dynamic-no-pic | FileCheck -check-prefix X86DYN %s
; RUN: llc < %s -mtriple=i386-pc-win32 -relocation-model=static | FileCheck -check-prefix X86WINSTA %s

; Call to immediate is not safe on x86-64 unless we *know* that the
; call will be within 32-bits pcrel from the dest immediate.

; RUN: llc < %s -mtriple=x86_64-- | FileCheck -check-prefix X64 %s

; PR3666
; PR3773
; rdar://6904453

define i32 @main() nounwind {
; X86STA-LABEL: main:
; X86STA:       ## %bb.0: ## %entry
; X86STA-NEXT:    subl $12, %esp
; X86STA-NEXT:    movl $0, (%esp)
; X86STA-NEXT:    calll 12345678
; X86STA-NEXT:    addl $12, %esp
; X86STA-NEXT:    retl
;
; X86PIC-LABEL: main:
; X86PIC:       ## %bb.0: ## %entry
; X86PIC-NEXT:    subl $12, %esp
; X86PIC-NEXT:    movl $0, (%esp)
; X86PIC-NEXT:    movl $12345678, %eax ## imm = 0xBC614E
; X86PIC-NEXT:    calll *%eax
; X86PIC-NEXT:    addl $12, %esp
; X86PIC-NEXT:    retl
;
; X86DYN-LABEL: main:
; X86DYN:       # %bb.0: # %entry
; X86DYN-NEXT:    subl $12, %esp
; X86DYN-NEXT:    movl $0, (%esp)
; X86DYN-NEXT:    calll 12345678
; X86DYN-NEXT:    addl $12, %esp
; X86DYN-NEXT:    retl
;
; X86WINSTA-LABEL: main:
; X86WINSTA:       # %bb.0: # %entry
; X86WINSTA-NEXT:    pushl $0
; X86WINSTA-NEXT:    calll 12345678
; X86WINSTA-NEXT:    addl $4, %esp
; X86WINSTA-NEXT:    retl
;
; X64-LABEL: main:
; X64:       # %bb.0: # %entry
; X64-NEXT:    pushq %rax
; X64-NEXT:    movl $12345678, %eax # imm = 0xBC614E
; X64-NEXT:    xorl %edi, %edi
; X64-NEXT:    callq *%rax
; X64-NEXT:    popq %rcx
; X64-NEXT:    retq
entry:
	%0 = call i32 inttoptr (i32 12345678 to ptr)(i32 0) nounwind		; <i32> [#uses=1]
	ret i32 %0
}

; X86STA: {{call.*12345678}}
; X86PIC-NOT: {{call.*12345678}}
; X86DYN: {{call.*12345678}}
; X86WINSTA: {{call.*[*]%eax}}
; X64: {{call.*[*]%rax}}

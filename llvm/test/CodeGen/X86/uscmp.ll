; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -show-mc-encoding | FileCheck %s --check-prefixes=CHECK,NO-NDD

define i8 @ucmp(i32 %x, i32 %y) {
; CHECK-LABEL: ucmp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx # encoding: [0x31,0xc9]
; CHECK-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; CHECK-NEXT:    seta %cl # encoding: [0x0f,0x97,0xc1]
; CHECK-NEXT:    movl $255, %eax # encoding: [0xb8,0xff,0x00,0x00,0x00]
; CHECK-NEXT:    cmovael %ecx, %eax # encoding: [0x0f,0x43,0xc1]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: ucmp:
; NDD:       # %bb.0:
; NDD-NEXT:    xorl %eax, %eax # encoding: [0x31,0xc0]
; NDD-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; NDD-NEXT:    seta %al # encoding: [0x0f,0x97,0xc0]
; NDD-NEXT:    movl $255, %ecx # encoding: [0xb9,0xff,0x00,0x00,0x00]
; NDD-NEXT:    cmovbl %ecx, %eax # EVEX TO LEGACY Compression encoding: [0x0f,0x42,0xc1]
; NDD-NEXT:    # kill: def $al killed $al killed $eax
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i8 @llvm.ucmp(i32 %x, i32 %y)
  ret i8 %1
}

define i8 @scmp(i32 %x, i32 %y) {
; CHECK-LABEL: scmp:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx # encoding: [0x31,0xc9]
; CHECK-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; CHECK-NEXT:    seta %cl # encoding: [0x0f,0x97,0xc1]
; CHECK-NEXT:    movl $255, %eax # encoding: [0xb8,0xff,0x00,0x00,0x00]
; CHECK-NEXT:    cmovael %ecx, %eax # encoding: [0x0f,0x43,0xc1]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: scmp:
; NDD:       # %bb.0:
; NDD-NEXT:    xorl %eax, %eax # encoding: [0x31,0xc0]
; NDD-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; NDD-NEXT:    seta %al # encoding: [0x0f,0x97,0xc0]
; NDD-NEXT:    movl $255, %ecx # encoding: [0xb9,0xff,0x00,0x00,0x00]
; NDD-NEXT:    cmovbl %ecx, %eax # EVEX TO LEGACY Compression encoding: [0x0f,0x42,0xc1]
; NDD-NEXT:    # kill: def $al killed $al killed $eax
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i8 @llvm.ucmp(i32 %x, i32 %y)
  ret i8 %1
}

define i4 @ucmp_narrow_result(i32 %x, i32 %y) {
; CHECK-LABEL: ucmp_narrow_result:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %ecx, %ecx # encoding: [0x31,0xc9]
; CHECK-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; CHECK-NEXT:    seta %cl # encoding: [0x0f,0x97,0xc1]
; CHECK-NEXT:    movl $255, %eax # encoding: [0xb8,0xff,0x00,0x00,0x00]
; CHECK-NEXT:    cmovael %ecx, %eax # encoding: [0x0f,0x43,0xc1]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: ucmp_narrow_result:
; NDD:       # %bb.0:
; NDD-NEXT:    xorl %eax, %eax # encoding: [0x31,0xc0]
; NDD-NEXT:    cmpl %esi, %edi # encoding: [0x39,0xf7]
; NDD-NEXT:    seta %al # encoding: [0x0f,0x97,0xc0]
; NDD-NEXT:    movl $255, %ecx # encoding: [0xb9,0xff,0x00,0x00,0x00]
; NDD-NEXT:    cmovbl %ecx, %eax # EVEX TO LEGACY Compression encoding: [0x0f,0x42,0xc1]
; NDD-NEXT:    # kill: def $al killed $al killed $eax
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i4 @llvm.ucmp(i32 %x, i32 %y)
  ret i4 %1
}

define i8 @scmp_narrow_op(i5 %x, i5 %y) {
; CHECK-LABEL: scmp_narrow_op:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andb $31, %sil # encoding: [0x40,0x80,0xe6,0x1f]
; CHECK-NEXT:    andb $31, %dil # encoding: [0x40,0x80,0xe7,0x1f]
; CHECK-NEXT:    xorl %ecx, %ecx # encoding: [0x31,0xc9]
; CHECK-NEXT:    cmpb %sil, %dil # encoding: [0x40,0x38,0xf7]
; CHECK-NEXT:    seta %cl # encoding: [0x0f,0x97,0xc1]
; CHECK-NEXT:    movl $255, %eax # encoding: [0xb8,0xff,0x00,0x00,0x00]
; CHECK-NEXT:    cmovael %ecx, %eax # encoding: [0x0f,0x43,0xc1]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: scmp_narrow_op:
; NDD:       # %bb.0:
; NDD-NEXT:    andb $31, %sil, %al # encoding: [0x62,0xf4,0x7c,0x18,0x80,0xe6,0x1f]
; NDD-NEXT:    andb $31, %dil, %cl # encoding: [0x62,0xf4,0x74,0x18,0x80,0xe7,0x1f]
; NDD-NEXT:    xorl %edx, %edx # encoding: [0x31,0xd2]
; NDD-NEXT:    cmpb %al, %cl # encoding: [0x38,0xc1]
; NDD-NEXT:    seta %dl # encoding: [0x0f,0x97,0xc2]
; NDD-NEXT:    movl $255, %eax # encoding: [0xb8,0xff,0x00,0x00,0x00]
; NDD-NEXT:    cmovael %edx, %eax # EVEX TO LEGACY Compression encoding: [0x0f,0x43,0xc2]
; NDD-NEXT:    # kill: def $al killed $al killed $eax
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i8 @llvm.ucmp(i5 %x, i5 %y)
  ret i8 %1
}

define i41 @ucmp_uncommon_types(i7 %x, i7 %y) {
; CHECK-LABEL: ucmp_uncommon_types:
; CHECK:       # %bb.0:
; CHECK-NEXT:    andb $127, %sil # encoding: [0x40,0x80,0xe6,0x7f]
; CHECK-NEXT:    andb $127, %dil # encoding: [0x40,0x80,0xe7,0x7f]
; CHECK-NEXT:    xorl %ecx, %ecx # encoding: [0x31,0xc9]
; CHECK-NEXT:    cmpb %sil, %dil # encoding: [0x40,0x38,0xf7]
; CHECK-NEXT:    seta %cl # encoding: [0x0f,0x97,0xc1]
; CHECK-NEXT:    movq $-1, %rax # encoding: [0x48,0xc7,0xc0,0xff,0xff,0xff,0xff]
; CHECK-NEXT:    cmovaeq %rcx, %rax # encoding: [0x48,0x0f,0x43,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: ucmp_uncommon_types:
; NDD:       # %bb.0:
; NDD-NEXT:    andb $127, %sil, %al # encoding: [0x62,0xf4,0x7c,0x18,0x80,0xe6,0x7f]
; NDD-NEXT:    andb $127, %dil, %cl # encoding: [0x62,0xf4,0x74,0x18,0x80,0xe7,0x7f]
; NDD-NEXT:    xorl %edx, %edx # encoding: [0x31,0xd2]
; NDD-NEXT:    cmpb %al, %cl # encoding: [0x38,0xc1]
; NDD-NEXT:    seta %dl # encoding: [0x0f,0x97,0xc2]
; NDD-NEXT:    movq $-1, %rax # encoding: [0x48,0xc7,0xc0,0xff,0xff,0xff,0xff]
; NDD-NEXT:    cmovaeq %rdx, %rax # EVEX TO LEGACY Compression encoding: [0x48,0x0f,0x43,0xc2]
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i41 @llvm.ucmp(i7 %x, i7 %y)
  ret i41 %1
}

define i13 @scmp_uncommon_types(i11 %x, i11 %y) {
; CHECK-LABEL: scmp_uncommon_types:
; CHECK:       # %bb.0:
; CHECK-NEXT:    shll $5, %esi # encoding: [0xc1,0xe6,0x05]
; CHECK-NEXT:    movswl %si, %eax # encoding: [0x0f,0xbf,0xc6]
; CHECK-NEXT:    shrl $5, %eax # encoding: [0xc1,0xe8,0x05]
; CHECK-NEXT:    shll $5, %edi # encoding: [0xc1,0xe7,0x05]
; CHECK-NEXT:    movswl %di, %ecx # encoding: [0x0f,0xbf,0xcf]
; CHECK-NEXT:    shrl $5, %ecx # encoding: [0xc1,0xe9,0x05]
; CHECK-NEXT:    xorl %edx, %edx # encoding: [0x31,0xd2]
; CHECK-NEXT:    cmpw %ax, %cx # encoding: [0x66,0x39,0xc1]
; CHECK-NEXT:    setg %dl # encoding: [0x0f,0x9f,0xc2]
; CHECK-NEXT:    movl $65535, %eax # encoding: [0xb8,0xff,0xff,0x00,0x00]
; CHECK-NEXT:    # imm = 0xFFFF
; CHECK-NEXT:    cmovgel %edx, %eax # encoding: [0x0f,0x4d,0xc2]
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
; NDD-LABEL: scmp_uncommon_types:
; NDD:       # %bb.0:
; NDD-NEXT:    shll $5, %esi, %eax # encoding: [0x62,0xf4,0x7c,0x18,0xc1,0xe6,0x05]
; NDD-NEXT:    cwtl # encoding: [0x98]
; NDD-NEXT:    shrl $5, %eax # EVEX TO LEGACY Compression encoding: [0xc1,0xe8,0x05]
; NDD-NEXT:    shll $5, %edi, %ecx # encoding: [0x62,0xf4,0x74,0x18,0xc1,0xe7,0x05]
; NDD-NEXT:    movswl %cx, %ecx # encoding: [0x0f,0xbf,0xc9]
; NDD-NEXT:    shrl $5, %ecx # EVEX TO LEGACY Compression encoding: [0xc1,0xe9,0x05]
; NDD-NEXT:    xorl %edx, %edx # encoding: [0x31,0xd2]
; NDD-NEXT:    cmpw %ax, %cx # encoding: [0x66,0x39,0xc1]
; NDD-NEXT:    setg %dl # encoding: [0x0f,0x9f,0xc2]
; NDD-NEXT:    movl $65535, %eax # encoding: [0xb8,0xff,0xff,0x00,0x00]
; NDD-NEXT:    # imm = 0xFFFF
; NDD-NEXT:    cmovgel %edx, %eax # EVEX TO LEGACY Compression encoding: [0x0f,0x4d,0xc2]
; NDD-NEXT:    # kill: def $ax killed $ax killed $eax
; NDD-NEXT:    retq # encoding: [0xc3]
  %1 = call i13 @llvm.scmp(i11 %x, i11 %y)
  ret i13 %1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; NO-NDD: {{.*}}

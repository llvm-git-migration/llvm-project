; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse2     | FileCheck %s --check-prefixes=SSE2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx      | FileCheck %s --check-prefixes=AVX
; RUN: llc < %s -mtriple=i686-unknown-unknown                    | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx        | FileCheck %s --check-prefixes=X86AVX

declare float @llvm.maximumnum.f32(float, float)
declare double @llvm.maximumnum.f64(double, double)
declare float @llvm.minimumnum.f32(float, float)
declare double @llvm.minimumnum.f64(double, double)

define dso_local float @maxf_nzero(float nofpclass(nzero snan) noundef %a, float nofpclass(nzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxf_nzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    cmpltss %xmm2, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxf_nzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxf_nzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB0_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB0_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB0_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB0_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB0_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB0_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxf_nzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.maximumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local float @maxf_pzero(float nofpclass(pzero snan) noundef %a, float nofpclass(pzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxf_pzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    cmpltss %xmm2, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxf_pzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxf_pzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB1_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB1_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB1_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB1_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB1_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB1_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxf_pzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.maximumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local float @maxf_zero(float nofpclass(zero snan) noundef %a, float nofpclass(zero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxf_zero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    cmpltss %xmm2, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxf_zero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxf_zero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB2_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB2_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB2_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB2_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB2_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB2_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxf_zero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.maximumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local double @maxd_nzero(double nofpclass(nzero snan) noundef %a, double nofpclass(nzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxd_nzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    cmpltsd %xmm2, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxd_nzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxd_nzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB3_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB3_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB3_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB3_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB3_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB3_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxd_nzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.maximumnum.f64(double %a, double %b)
  ret double %cond
}

define dso_local double @maxd_pzero(double nofpclass(pzero snan) noundef %a, double nofpclass(pzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxd_pzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    cmpltsd %xmm2, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxd_pzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxd_pzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB4_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB4_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB4_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB4_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB4_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB4_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxd_pzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.maximumnum.f64(double %a, double %b)
  ret double %cond
}

define dso_local double @maxd_zero(double nofpclass(zero snan) noundef %a, double nofpclass(zero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: maxd_zero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    cmpltsd %xmm2, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: maxd_zero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: maxd_zero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB5_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB5_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB5_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB5_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    ja .LBB5_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB5_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: maxd_zero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.maximumnum.f64(double %a, double %b)
  ret double %cond
}

define dso_local float @minf_nzero(float nofpclass(nzero snan) noundef %a, float nofpclass(nzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: minf_nzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm2, %xmm0
; SSE2-NEXT:    cmpltss %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: minf_nzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: minf_nzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB6_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB6_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB6_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB6_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB6_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB6_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: minf_nzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.minimumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local float @minf_pzero(float nofpclass(pzero snan) noundef %a, float nofpclass(pzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: minf_pzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm2, %xmm0
; SSE2-NEXT:    cmpltss %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: minf_pzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: minf_pzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB7_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB7_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB7_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB7_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB7_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB7_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: minf_pzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.minimumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local float @minf_zero(float nofpclass(zero snan) noundef %a, float nofpclass(zero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: minf_zero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpunordss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm1, %xmm3
; SSE2-NEXT:    andnps %xmm0, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    cmpunordss %xmm1, %xmm3
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm3
; SSE2-NEXT:    orps %xmm0, %xmm3
; SSE2-NEXT:    movaps %xmm2, %xmm0
; SSE2-NEXT:    cmpltss %xmm3, %xmm0
; SSE2-NEXT:    andps %xmm0, %xmm2
; SSE2-NEXT:    andnps %xmm3, %xmm0
; SSE2-NEXT:    orps %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: minf_zero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: minf_zero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB8_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB8_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB8_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB8_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB8_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB8_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: minf_zero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovss %xmm0, (%esp)
; X86AVX-NEXT:    flds (%esp)
; X86AVX-NEXT:    popl %eax
; X86AVX-NEXT:    .cfi_def_cfa_offset 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call float @llvm.minimumnum.f32(float %a, float %b)
  ret float %cond
}

define dso_local double @mind_nzero(double nofpclass(nzero snan) noundef %a, double nofpclass(nzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: mind_nzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm2, %xmm0
; SSE2-NEXT:    cmpltsd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: mind_nzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: mind_nzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB9_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB9_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB9_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB9_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB9_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB9_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: mind_nzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.minimumnum.f64(double %a, double %b)
  ret double %cond
}

define dso_local double @mind_pzero(double nofpclass(pzero snan) noundef %a, double nofpclass(pzero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: mind_pzero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm2, %xmm0
; SSE2-NEXT:    cmpltsd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: mind_pzero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: mind_pzero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB10_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB10_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB10_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB10_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB10_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB10_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: mind_pzero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.minimumnum.f64(double %a, double %b)
  ret double %cond
}

define dso_local double @mind_zero(double nofpclass(zero snan) noundef %a, double nofpclass(zero snan) noundef %b) local_unnamed_addr #0 {
; SSE2-LABEL: mind_zero:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpunordsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm1, %xmm3
; SSE2-NEXT:    andnpd %xmm0, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm3
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm3
; SSE2-NEXT:    orpd %xmm0, %xmm3
; SSE2-NEXT:    movapd %xmm2, %xmm0
; SSE2-NEXT:    cmpltsd %xmm3, %xmm0
; SSE2-NEXT:    andpd %xmm0, %xmm2
; SSE2-NEXT:    andnpd %xmm3, %xmm0
; SSE2-NEXT:    orpd %xmm2, %xmm0
; SSE2-NEXT:    retq
;
; AVX-LABEL: mind_zero:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    retq
;
; X86-LABEL: mind_zero:
; X86:       # %bb.0: # %entry
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB11_2
; X86-NEXT:  # %bb.1: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB11_2: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(0)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    fld %st(1)
; X86-NEXT:    jp .LBB11_4
; X86-NEXT:  # %bb.3: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB11_4: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fucom %st(1)
; X86-NEXT:    fnstsw %ax
; X86-NEXT:    # kill: def $ah killed $ah killed $ax
; X86-NEXT:    sahf
; X86-NEXT:    jb .LBB11_6
; X86-NEXT:  # %bb.5: # %entry
; X86-NEXT:    fstp %st(0)
; X86-NEXT:    fldz
; X86-NEXT:    fxch %st(1)
; X86-NEXT:  .LBB11_6: # %entry
; X86-NEXT:    fstp %st(1)
; X86-NEXT:    retl
;
; X86AVX-LABEL: mind_zero:
; X86AVX:       # %bb.0: # %entry
; X86AVX-NEXT:    pushl %ebp
; X86AVX-NEXT:    .cfi_def_cfa_offset 8
; X86AVX-NEXT:    .cfi_offset %ebp, -8
; X86AVX-NEXT:    movl %esp, %ebp
; X86AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86AVX-NEXT:    andl $-8, %esp
; X86AVX-NEXT:    subl $8, %esp
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; X86AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; X86AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; X86AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; X86AVX-NEXT:    vmovlpd %xmm0, (%esp)
; X86AVX-NEXT:    fldl (%esp)
; X86AVX-NEXT:    movl %ebp, %esp
; X86AVX-NEXT:    popl %ebp
; X86AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86AVX-NEXT:    retl
entry:
  %cond = tail call double @llvm.minimumnum.f64(double %a, double %b)
  ret double %cond
}

; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -mtriple=x86_64 %s -start-before=x86-isel -o - -stop-after=x86-isel | FileCheck %s

define void @add_shl_or_disjoint(i32 %x, ptr addrspace(1) %o) {
  ; CHECK-LABEL: name: add_shl_or_disjoint
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $edi, $rsi
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gr64 = COPY $rsi
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gr32 = COPY $edi
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:gr64 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:gr64_nosp = INSERT_SUBREG [[DEF]], [[COPY1]], %subreg.sub_32bit
  ; CHECK-NEXT:   [[LEA64_32r:%[0-9]+]]:gr32 = LEA64_32r $noreg, 4, killed [[INSERT_SUBREG]], 165036822, $noreg
  ; CHECK-NEXT:   MOV32mr [[COPY]], 1, $noreg, 0, $noreg, killed [[LEA64_32r]] :: (store (s32) into %ir.o, addrspace 1)
  ; CHECK-NEXT:   RET 0
  %or = or disjoint i32 %x, 4027584529
  %shl = shl i32 %or, 2
  %add = add i32 %shl, 1234567890
  store i32 %add, ptr addrspace(1) %o
  ret void
}


; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --extra_scrub --x86_scrub_rip --version 5
; RUN: llc -mtriple=i386 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32
; RUN: llc -mtriple=i386 -mattr +fma < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32-FMA
; RUN: llc -mtriple=i386 -mattr +fma4 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-32-FMA4
; RUN: llc -mtriple=x86_64 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64
; RUN: llc -mtriple=x86_64 -mattr +fma < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64-FMA
; RUN: llc -mtriple=x86_64 -mattr +fma4 < %s | FileCheck %s -check-prefix=SOFT-FLOAT-64-FMA4

define float @fma_f32(float %a, float %b, float %c) "use-soft-float"="true" {
; SOFT-FLOAT-32-LABEL: fma_f32:
; SOFT-FLOAT-32:       # %bb.0:
; SOFT-FLOAT-32-NEXT:    pushl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-NEXT:    .cfi_offset %esi, -8
; SOFT-FLOAT-32-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    calll __mulsf3
; SOFT-FLOAT-32-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-NEXT:    pushl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl %eax
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    calll __addsf3
; SOFT-FLOAT-32-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-NEXT:    popl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    retl
;
; SOFT-FLOAT-32-FMA-LABEL: fma_f32:
; SOFT-FLOAT-32-FMA:       # %bb.0:
; SOFT-FLOAT-32-FMA-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_offset %esi, -8
; SOFT-FLOAT-32-FMA-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    calll __mulsf3
; SOFT-FLOAT-32-FMA-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-FMA-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl %eax
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    calll __addsf3
; SOFT-FLOAT-32-FMA-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-FMA-NEXT:    popl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    retl
;
; SOFT-FLOAT-32-FMA4-LABEL: fma_f32:
; SOFT-FLOAT-32-FMA4:       # %bb.0:
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_offset %esi, -8
; SOFT-FLOAT-32-FMA4-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    calll __mulsf3
; SOFT-FLOAT-32-FMA4-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %eax
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    calll __addsf3
; SOFT-FLOAT-32-FMA4-NEXT:    addl $8, %esp
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset -8
; SOFT-FLOAT-32-FMA4-NEXT:    popl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    retl
;
; SOFT-FLOAT-64-LABEL: fma_f32:
; SOFT-FLOAT-64:       # %bb.0:
; SOFT-FLOAT-64-NEXT:    pushq %rbx
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-NEXT:    movl %edx, %ebx
; SOFT-FLOAT-64-NEXT:    callq __mulsf3@PLT
; SOFT-FLOAT-64-NEXT:    movl %eax, %edi
; SOFT-FLOAT-64-NEXT:    movl %ebx, %esi
; SOFT-FLOAT-64-NEXT:    callq __addsf3@PLT
; SOFT-FLOAT-64-NEXT:    popq %rbx
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-NEXT:    retq
;
; SOFT-FLOAT-64-FMA-LABEL: fma_f32:
; SOFT-FLOAT-64-FMA:       # %bb.0:
; SOFT-FLOAT-64-FMA-NEXT:    pushq %rbx
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-FMA-NEXT:    movl %edx, %ebx
; SOFT-FLOAT-64-FMA-NEXT:    callq __mulsf3@PLT
; SOFT-FLOAT-64-FMA-NEXT:    movl %eax, %edi
; SOFT-FLOAT-64-FMA-NEXT:    movl %ebx, %esi
; SOFT-FLOAT-64-FMA-NEXT:    callq __addsf3@PLT
; SOFT-FLOAT-64-FMA-NEXT:    popq %rbx
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-FMA-NEXT:    retq
;
; SOFT-FLOAT-64-FMA4-LABEL: fma_f32:
; SOFT-FLOAT-64-FMA4:       # %bb.0:
; SOFT-FLOAT-64-FMA4-NEXT:    pushq %rbx
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-FMA4-NEXT:    movl %edx, %ebx
; SOFT-FLOAT-64-FMA4-NEXT:    callq __mulsf3@PLT
; SOFT-FLOAT-64-FMA4-NEXT:    movl %eax, %edi
; SOFT-FLOAT-64-FMA4-NEXT:    movl %ebx, %esi
; SOFT-FLOAT-64-FMA4-NEXT:    callq __addsf3@PLT
; SOFT-FLOAT-64-FMA4-NEXT:    popq %rbx
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-FMA4-NEXT:    retq
    %1 = call float @llvm.fmuladd.f32(float %a, float %b, float %c)
	ret float %1
}

define double @fma_f64(double %a, double %b, double %c) "use-soft-float"="true" {
; SOFT-FLOAT-32-LABEL: fma_f64:
; SOFT-FLOAT-32:       # %bb.0:
; SOFT-FLOAT-32-NEXT:    pushl %edi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-NEXT:    pushl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 12
; SOFT-FLOAT-32-NEXT:    .cfi_offset %esi, -12
; SOFT-FLOAT-32-NEXT:    .cfi_offset %edi, -8
; SOFT-FLOAT-32-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-NEXT:    movl {{[0-9]+}}(%esp), %edi
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    calll __muldf3
; SOFT-FLOAT-32-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-NEXT:    pushl %edi
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl %edx
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    pushl %eax
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    calll __adddf3
; SOFT-FLOAT-32-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-NEXT:    popl %esi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-NEXT:    popl %edi
; SOFT-FLOAT-32-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-NEXT:    retl
;
; SOFT-FLOAT-32-FMA-LABEL: fma_f64:
; SOFT-FLOAT-32-FMA:       # %bb.0:
; SOFT-FLOAT-32-FMA-NEXT:    pushl %edi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 12
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_offset %esi, -12
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_offset %edi, -8
; SOFT-FLOAT-32-FMA-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-FMA-NEXT:    movl {{[0-9]+}}(%esp), %edi
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    calll __muldf3
; SOFT-FLOAT-32-FMA-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-FMA-NEXT:    pushl %edi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl %edx
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    pushl %eax
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    calll __adddf3
; SOFT-FLOAT-32-FMA-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-FMA-NEXT:    popl %esi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA-NEXT:    popl %edi
; SOFT-FLOAT-32-FMA-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-FMA-NEXT:    retl
;
; SOFT-FLOAT-32-FMA4-LABEL: fma_f64:
; SOFT-FLOAT-32-FMA4:       # %bb.0:
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %edi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 12
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_offset %esi, -12
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_offset %edi, -8
; SOFT-FLOAT-32-FMA4-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SOFT-FLOAT-32-FMA4-NEXT:    movl {{[0-9]+}}(%esp), %edi
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl {{[0-9]+}}(%esp)
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    calll __muldf3
; SOFT-FLOAT-32-FMA4-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %edi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %edx
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    pushl %eax
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    calll __adddf3
; SOFT-FLOAT-32-FMA4-NEXT:    addl $16, %esp
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_adjust_cfa_offset -16
; SOFT-FLOAT-32-FMA4-NEXT:    popl %esi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-32-FMA4-NEXT:    popl %edi
; SOFT-FLOAT-32-FMA4-NEXT:    .cfi_def_cfa_offset 4
; SOFT-FLOAT-32-FMA4-NEXT:    retl
;
; SOFT-FLOAT-64-LABEL: fma_f64:
; SOFT-FLOAT-64:       # %bb.0:
; SOFT-FLOAT-64-NEXT:    pushq %rbx
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-NEXT:    movq %rdx, %rbx
; SOFT-FLOAT-64-NEXT:    callq __muldf3@PLT
; SOFT-FLOAT-64-NEXT:    movq %rax, %rdi
; SOFT-FLOAT-64-NEXT:    movq %rbx, %rsi
; SOFT-FLOAT-64-NEXT:    callq __adddf3@PLT
; SOFT-FLOAT-64-NEXT:    popq %rbx
; SOFT-FLOAT-64-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-NEXT:    retq
;
; SOFT-FLOAT-64-FMA-LABEL: fma_f64:
; SOFT-FLOAT-64-FMA:       # %bb.0:
; SOFT-FLOAT-64-FMA-NEXT:    pushq %rbx
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-FMA-NEXT:    movq %rdx, %rbx
; SOFT-FLOAT-64-FMA-NEXT:    callq __muldf3@PLT
; SOFT-FLOAT-64-FMA-NEXT:    movq %rax, %rdi
; SOFT-FLOAT-64-FMA-NEXT:    movq %rbx, %rsi
; SOFT-FLOAT-64-FMA-NEXT:    callq __adddf3@PLT
; SOFT-FLOAT-64-FMA-NEXT:    popq %rbx
; SOFT-FLOAT-64-FMA-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-FMA-NEXT:    retq
;
; SOFT-FLOAT-64-FMA4-LABEL: fma_f64:
; SOFT-FLOAT-64-FMA4:       # %bb.0:
; SOFT-FLOAT-64-FMA4-NEXT:    pushq %rbx
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_def_cfa_offset 16
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_offset %rbx, -16
; SOFT-FLOAT-64-FMA4-NEXT:    movq %rdx, %rbx
; SOFT-FLOAT-64-FMA4-NEXT:    callq __muldf3@PLT
; SOFT-FLOAT-64-FMA4-NEXT:    movq %rax, %rdi
; SOFT-FLOAT-64-FMA4-NEXT:    movq %rbx, %rsi
; SOFT-FLOAT-64-FMA4-NEXT:    callq __adddf3@PLT
; SOFT-FLOAT-64-FMA4-NEXT:    popq %rbx
; SOFT-FLOAT-64-FMA4-NEXT:    .cfi_def_cfa_offset 8
; SOFT-FLOAT-64-FMA4-NEXT:    retq
    %1 = call double @llvm.fmuladd.f64(double %a, double %b, double %c)
	ret double %1
}

declare float @llvm.fmuladd.f32(float %a, float %b, float %c)
declare double @llvm.fmuladd.f64(double %a, double %b, double %c)

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

define i1 @test_is_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %xmm0, %rax
; CHECK-NEXT:    movabsq $9223372036854775807, %rcx # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq %rax, %rcx
; CHECK-NEXT:    movabsq $9218868437227405311, %rax # imm = 0x7FEFFFFFFFFFFFFF
; CHECK-NEXT:    cmpq %rax, %rcx
; CHECK-NEXT:    setg %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp ueq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf_or_nan(double %arg) {
; CHECK-LABEL: test_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %xmm0, %rax
; CHECK-NEXT:    movabsq $9223372036854775807, %rcx # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq %rax, %rcx
; CHECK-NEXT:    movabsq $9218868437227405312, %rax # imm = 0x7FF0000000000000
; CHECK-NEXT:    cmpq %rax, %rcx
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp one double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_inf(double %arg) {
; CHECK-LABEL: test_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %xmm0, %rax
; CHECK-NEXT:    movabsq $9223372036854775807, %rcx # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq %rax, %rcx
; CHECK-NEXT:    movabsq $9218868437227405312, %rax # imm = 0x7FF0000000000000
; CHECK-NEXT:    cmpq %rax, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp oeq double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_is_not_inf(double %arg) {
; CHECK-LABEL: test_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %xmm0, %rax
; CHECK-NEXT:    movabsq $9223372036854775807, %rcx # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq %rax, %rcx
; CHECK-NEXT:    movabsq $9218868437227405312, %rax # imm = 0x7FF0000000000000
; CHECK-NEXT:    cmpq %rax, %rcx
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %abs = tail call double @llvm.fabs.f64(double %arg)
  %ret = fcmp une double %abs, 0x7FF0000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movaps %xmm0, -{{[0-9]+}}(%rsp)
; CHECK-NEXT:    movabsq $9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq -{{[0-9]+}}(%rsp), %rax
; CHECK-NEXT:    movabsq $9223090561878065151, %rcx # imm = 0x7FFEFFFFFFFFFFFF
; CHECK-NEXT:    cmpq %rcx, %rax
; CHECK-NEXT:    setg %al
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp ueq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf_or_nan(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movaps %xmm0, -{{[0-9]+}}(%rsp)
; CHECK-NEXT:    movabsq $9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
; CHECK-NEXT:    andq -{{[0-9]+}}(%rsp), %rax
; CHECK-NEXT:    movabsq $9223090561878065152, %rcx # imm = 0x7FFF000000000000
; CHECK-NEXT:    cmpq %rcx, %rax
; CHECK-NEXT:    setl %al
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp one fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    movaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __eqtf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp oeq fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_fp128_is_not_inf(fp128 %arg) {
; CHECK-LABEL: test_fp128_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; CHECK-NEXT:    movaps {{.*#+}} xmm1 = [+Inf]
; CHECK-NEXT:    callq __netf2@PLT
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %abs = tail call fp128 @llvm.fabs.f128(fp128 %arg)
  %ret = fcmp une fp128 %abs, 0xL00000000000000007FFF000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_inf_or_nan(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; CHECK-NEXT:    btq $63, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %cl
; CHECK-NEXT:    andl $32767, %eax # imm = 0x7FFF
; CHECK-NEXT:    leal -1(%rax), %edx
; CHECK-NEXT:    movzwl %dx, %edx
; CHECK-NEXT:    cmpl $32766, %edx # imm = 0x7FFE
; CHECK-NEXT:    setae %dl
; CHECK-NEXT:    orb %cl, %dl
; CHECK-NEXT:    testq %rax, %rax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andb %dl, %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp ueq x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_not_inf_or_nan(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_not_inf_or_nan:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl {{[0-9]+}}(%rsp), %eax
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %rcx
; CHECK-NEXT:    shrq $63, %rcx
; CHECK-NEXT:    andl $32767, %eax # imm = 0x7FFF
; CHECK-NEXT:    leal -1(%rax), %edx
; CHECK-NEXT:    movzwl %dx, %edx
; CHECK-NEXT:    cmpl $32766, %edx # imm = 0x7FFE
; CHECK-NEXT:    setb %dl
; CHECK-NEXT:    andb %cl, %dl
; CHECK-NEXT:    testq %rax, %rax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    orb %dl, %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp one x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_inf(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl {{[0-9]+}}(%rsp), %eax
; CHECK-NEXT:    notl %eax
; CHECK-NEXT:    movabsq $-9223372036854775808, %rcx # imm = 0x8000000000000000
; CHECK-NEXT:    xorq {{[0-9]+}}(%rsp), %rcx
; CHECK-NEXT:    andl $32767, %eax # imm = 0x7FFF
; CHECK-NEXT:    orq %rcx, %rax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp oeq x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

define i1 @test_x86_fp80_is_not_inf(x86_fp80 %arg) {
; CHECK-LABEL: test_x86_fp80_is_not_inf:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl {{[0-9]+}}(%rsp), %eax
; CHECK-NEXT:    notl %eax
; CHECK-NEXT:    movabsq $-9223372036854775808, %rcx # imm = 0x8000000000000000
; CHECK-NEXT:    xorq {{[0-9]+}}(%rsp), %rcx
; CHECK-NEXT:    andl $32767, %eax # imm = 0x7FFF
; CHECK-NEXT:    orq %rcx, %rax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %abs = tail call x86_fp80 @llvm.fabs.f80(x86_fp80 %arg)
  %ret = fcmp une x86_fp80 %abs, 0xK7FFF8000000000000000
  ret i1 %ret
}

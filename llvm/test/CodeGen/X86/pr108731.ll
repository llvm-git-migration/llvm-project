; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-gnu-unknown -mcpu=znver3 | FileCheck %s

define dso_local i64 @foo(i64 %0, i64 %1, i64 %2, i64 %3) local_unnamed_addr {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %Entry
; CHECK-NEXT:    andq %rdx, %rsi
; CHECK-NEXT:    andnq %rcx, %rdx, %rcx
; CHECK-NEXT:    andnq %rdi, %rsi, %rax
; CHECK-NEXT:    andnq %rax, %rcx, %rax
; CHECK-NEXT:    retq
Entry:
  %4 = and i64 %2, %1
  %5 = xor i64 %4, -1
  %6 = and i64 %5, %0
  %.not = xor i64 %3, -1
  %7 = or i64 %.not, %2
  %8 = and i64 %6, %7
  ret i64 %8
}

declare void @llvm.dbg.value(metadata, metadata, metadata) #1

define dso_local <16 x i8> @fooVec(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2, <16 x i8> %3) local_unnamed_addr {
; CHECK-LABEL: fooVec:
; CHECK:       # %bb.0: # %Entry
; CHECK-NEXT:    vandps %xmm1, %xmm2, %xmm1
; CHECK-NEXT:    vandnps %xmm3, %xmm2, %xmm2
; CHECK-NEXT:    vandnps %xmm0, %xmm1, %xmm0
; CHECK-NEXT:    vandnps %xmm0, %xmm2, %xmm0
; CHECK-NEXT:    retq
Entry:
  %4 = and <16 x i8> %2, %1
  %5 = xor <16 x i8> %4, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %6 = and <16 x i8> %5, %0
  %.not = xor <16 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %7 = or <16 x i8> %.not, %2
  %8 = and <16 x i8> %6, %7
  ret <16 x i8> %8
}

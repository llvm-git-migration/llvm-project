; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=x86_64 < %s | FileCheck %s --check-prefix=X86-64
; RUN: llc --mtriple=i386 < %s | FileCheck %s --check-prefix=I386
; RUN: llc --mtriple=i386 -mattr=+sse2 < %s | FileCheck %s --check-prefix=SSE2
; RUN: llc --mtriple=i386 -mattr=+avx < %s | FileCheck %s --check-prefix=AVX

declare float @llvm.maximumnum.f32(float, float)
declare double @llvm.maximumnum.f64(double, double)
declare float @llvm.minimumnum.f32(float, float)
declare double @llvm.minimumnum.f64(double, double)

define float @maximumnum_float(float %x, float %y) {
;
; X86-64-LABEL: maximumnum_float:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movaps %xmm0, %xmm2
; X86-64-NEXT:    cmpunordss %xmm0, %xmm2
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:    andps %xmm1, %xmm3
; X86-64-NEXT:    andnps %xmm0, %xmm2
; X86-64-NEXT:    orps %xmm3, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm3
; X86-64-NEXT:    cmpunordss %xmm1, %xmm3
; X86-64-NEXT:    movaps %xmm3, %xmm0
; X86-64-NEXT:    andps %xmm2, %xmm0
; X86-64-NEXT:    andnps %xmm1, %xmm3
; X86-64-NEXT:    orps %xmm0, %xmm3
; X86-64-NEXT:    movaps %xmm3, %xmm0
; X86-64-NEXT:    cmpltss %xmm2, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm1
; X86-64-NEXT:    andps %xmm2, %xmm1
; X86-64-NEXT:    andnps %xmm3, %xmm0
; X86-64-NEXT:    orps %xmm1, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm1
; X86-64-NEXT:    addss %xmm0, %xmm1
; X86-64-NEXT:    movaps %xmm0, %xmm4
; X86-64-NEXT:    cmpunordss %xmm0, %xmm4
; X86-64-NEXT:    andps %xmm4, %xmm1
; X86-64-NEXT:    andnps %xmm0, %xmm4
; X86-64-NEXT:    orps %xmm1, %xmm4
; X86-64-NEXT:    xorps %xmm1, %xmm1
; X86-64-NEXT:    cmpeqss %xmm4, %xmm1
; X86-64-NEXT:    movd %xmm2, %eax
; X86-64-NEXT:    testl %eax, %eax
; X86-64-NEXT:    je .LBB0_2
; X86-64-NEXT:  # %bb.1:
; X86-64-NEXT:    movaps %xmm4, %xmm2
; X86-64-NEXT:  .LBB0_2:
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    andnps %xmm4, %xmm0
; X86-64-NEXT:    movd %xmm3, %eax
; X86-64-NEXT:    testl %eax, %eax
; X86-64-NEXT:    je .LBB0_4
; X86-64-NEXT:  # %bb.3:
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:  .LBB0_4:
; X86-64-NEXT:    andps %xmm3, %xmm1
; X86-64-NEXT:    orps %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_float:
; I386:       # %bb.0:
; I386-NEXT:    subl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 12
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB0_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB0_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB0_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB0_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    ja .LBB0_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB0_6:
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB0_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB0_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB0_10
; I386-NEXT:  # %bb.9:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB0_10:
; I386-NEXT:    cmpl $0, (%esp)
; I386-NEXT:    je .LBB0_12
; I386-NEXT:  # %bb.11:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB0_12:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB0_14
; I386-NEXT:  # %bb.13:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB0_14:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: maximumnum_float:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE2-NEXT:    movss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:    cmpunordss %xmm1, %xmm0
; SSE2-NEXT:    movaps %xmm0, %xmm3
; SSE2-NEXT:    andps %xmm2, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm0
; SSE2-NEXT:    orps %xmm3, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm3, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm2
; SSE2-NEXT:    cmpltss %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm4
; SSE2-NEXT:    addss %xmm2, %xmm4
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    cmpunordss %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm3, %xmm4
; SSE2-NEXT:    andnps %xmm2, %xmm3
; SSE2-NEXT:    orps %xmm4, %xmm3
; SSE2-NEXT:    xorps %xmm2, %xmm2
; SSE2-NEXT:    cmpeqss %xmm3, %xmm2
; SSE2-NEXT:    movd %xmm0, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    je .LBB0_2
; SSE2-NEXT:  # %bb.1:
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:  .LBB0_2:
; SSE2-NEXT:    movaps %xmm2, %xmm4
; SSE2-NEXT:    andnps %xmm3, %xmm4
; SSE2-NEXT:    movd %xmm1, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    je .LBB0_4
; SSE2-NEXT:  # %bb.3:
; SSE2-NEXT:    movaps %xmm0, %xmm1
; SSE2-NEXT:  .LBB0_4:
; SSE2-NEXT:    andps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm2, %xmm4
; SSE2-NEXT:    movss %xmm4, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_float:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vblendvps %xmm1, %xmm2, %xmm0, %xmm1
; AVX-NEXT:    vcmpunordss %xmm2, %xmm2, %xmm0
; AVX-NEXT:    vblendvps %xmm0, %xmm1, %xmm2, %xmm0
; AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vcmpunordss %xmm2, %xmm2, %xmm3
; AVX-NEXT:    vaddss %xmm2, %xmm2, %xmm4
; AVX-NEXT:    vblendvps %xmm3, %xmm4, %xmm2, %xmm2
; AVX-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; AVX-NEXT:    vmovd %xmm1, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    je .LBB0_2
; AVX-NEXT:  # %bb.1:
; AVX-NEXT:    vmovaps %xmm2, %xmm1
; AVX-NEXT:  .LBB0_2:
; AVX-NEXT:    vcmpeqss %xmm3, %xmm2, %xmm3
; AVX-NEXT:    vmovd %xmm0, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    je .LBB0_4
; AVX-NEXT:  # %bb.3:
; AVX-NEXT:    vmovaps %xmm1, %xmm0
; AVX-NEXT:  .LBB0_4:
; AVX-NEXT:    vblendvps %xmm3, %xmm0, %xmm2, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call float @llvm.maximumnum.f32(float %x, float %y)
  ret float %z
}

define float @maximumnum_float_nsz(float %x, float %y) {
;
; X86-64-LABEL: maximumnum_float_nsz:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movaps %xmm0, %xmm2
; X86-64-NEXT:    cmpunordss %xmm0, %xmm2
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:    andps %xmm1, %xmm3
; X86-64-NEXT:    andnps %xmm0, %xmm2
; X86-64-NEXT:    orps %xmm3, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    cmpunordss %xmm1, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm3
; X86-64-NEXT:    andps %xmm2, %xmm3
; X86-64-NEXT:    andnps %xmm1, %xmm0
; X86-64-NEXT:    orps %xmm3, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm1
; X86-64-NEXT:    cmpltss %xmm2, %xmm1
; X86-64-NEXT:    andps %xmm1, %xmm2
; X86-64-NEXT:    andnps %xmm0, %xmm1
; X86-64-NEXT:    orps %xmm2, %xmm1
; X86-64-NEXT:    movaps %xmm1, %xmm2
; X86-64-NEXT:    addss %xmm1, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    cmpunordss %xmm1, %xmm0
; X86-64-NEXT:    andps %xmm0, %xmm2
; X86-64-NEXT:    andnps %xmm1, %xmm0
; X86-64-NEXT:    orps %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_float_nsz:
; I386:       # %bb.0:
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB1_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB1_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB1_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB1_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    ja .LBB1_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB1_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB1_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB1_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    retl
;
; SSE2-LABEL: maximumnum_float_nsz:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE2-NEXT:    movss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:    cmpunordss %xmm1, %xmm0
; SSE2-NEXT:    movaps %xmm0, %xmm3
; SSE2-NEXT:    andps %xmm2, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm0
; SSE2-NEXT:    orps %xmm3, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm3, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm2
; SSE2-NEXT:    cmpltss %xmm0, %xmm2
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm0
; SSE2-NEXT:    addss %xmm2, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    andps %xmm1, %xmm0
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm0, %xmm1
; SSE2-NEXT:    movss %xmm1, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_float_nsz:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vaddss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm1, %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call nsz float @llvm.maximumnum.f32(float %x, float %y)
  ret float %z
}

define float @maximumnum_float_nnan(float %x, float %y) {
;
; X86-64-LABEL: maximumnum_float_nnan:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movd %xmm0, %eax
; X86-64-NEXT:    testl %eax, %eax
; X86-64-NEXT:    js .LBB2_1
; X86-64-NEXT:  # %bb.2:
; X86-64-NEXT:    movdqa %xmm0, %xmm2
; X86-64-NEXT:    jmp .LBB2_3
; X86-64-NEXT:  .LBB2_1:
; X86-64-NEXT:    movdqa %xmm1, %xmm2
; X86-64-NEXT:    movdqa %xmm0, %xmm1
; X86-64-NEXT:  .LBB2_3:
; X86-64-NEXT:    maxss %xmm2, %xmm1
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_float_nnan:
; I386:       # %bb.0:
; I386-NEXT:    subl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 12
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jbe .LBB2_1
; I386-NEXT:  # %bb.2:
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    jne .LBB2_3
; I386-NEXT:  .LBB2_4:
; I386-NEXT:    cmpl $0, (%esp)
; I386-NEXT:    je .LBB2_6
; I386-NEXT:  .LBB2_5:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB2_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB2_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB2_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
; I386-NEXT:  .LBB2_1:
; I386-NEXT:    .cfi_def_cfa_offset 12
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB2_4
; I386-NEXT:  .LBB2_3:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    cmpl $0, (%esp)
; I386-NEXT:    jne .LBB2_5
; I386-NEXT:    jmp .LBB2_6
;
; SSE2-LABEL: maximumnum_float_nnan:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; SSE2-NEXT:    movd {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movd %xmm2, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    js .LBB2_1
; SSE2-NEXT:  # %bb.2:
; SSE2-NEXT:    movdqa %xmm2, %xmm1
; SSE2-NEXT:    jmp .LBB2_3
; SSE2-NEXT:  .LBB2_1:
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    movdqa %xmm2, %xmm0
; SSE2-NEXT:  .LBB2_3:
; SSE2-NEXT:    maxss %xmm1, %xmm0
; SSE2-NEXT:    movss %xmm0, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_float_nnan:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovd {{.*#+}} xmm2 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovd %xmm2, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    js .LBB2_1
; AVX-NEXT:  # %bb.2:
; AVX-NEXT:    vmovdqa %xmm2, %xmm1
; AVX-NEXT:    jmp .LBB2_3
; AVX-NEXT:  .LBB2_1:
; AVX-NEXT:    vmovdqa %xmm0, %xmm1
; AVX-NEXT:    vmovdqa %xmm2, %xmm0
; AVX-NEXT:  .LBB2_3:
; AVX-NEXT:    vmaxss %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call nnan float @llvm.maximumnum.f32(float %x, float %y)
  ret float %z
}


define double @maximumnum_double(double %x, double %y) {
;
; X86-64-LABEL: maximumnum_double:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movapd %xmm0, %xmm2
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm2
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:    andpd %xmm1, %xmm3
; X86-64-NEXT:    andnpd %xmm0, %xmm2
; X86-64-NEXT:    orpd %xmm3, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm3
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm3
; X86-64-NEXT:    movapd %xmm3, %xmm0
; X86-64-NEXT:    andpd %xmm2, %xmm0
; X86-64-NEXT:    andnpd %xmm1, %xmm3
; X86-64-NEXT:    orpd %xmm0, %xmm3
; X86-64-NEXT:    movapd %xmm3, %xmm0
; X86-64-NEXT:    cmpltsd %xmm2, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm1
; X86-64-NEXT:    andpd %xmm2, %xmm1
; X86-64-NEXT:    andnpd %xmm3, %xmm0
; X86-64-NEXT:    orpd %xmm1, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm1
; X86-64-NEXT:    addsd %xmm0, %xmm1
; X86-64-NEXT:    movapd %xmm0, %xmm4
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm4
; X86-64-NEXT:    andpd %xmm4, %xmm1
; X86-64-NEXT:    andnpd %xmm0, %xmm4
; X86-64-NEXT:    orpd %xmm1, %xmm4
; X86-64-NEXT:    xorpd %xmm1, %xmm1
; X86-64-NEXT:    cmpeqsd %xmm4, %xmm1
; X86-64-NEXT:    movq %xmm2, %rax
; X86-64-NEXT:    testq %rax, %rax
; X86-64-NEXT:    je .LBB3_2
; X86-64-NEXT:  # %bb.1:
; X86-64-NEXT:    movapd %xmm4, %xmm2
; X86-64-NEXT:  .LBB3_2:
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    andnpd %xmm4, %xmm0
; X86-64-NEXT:    movq %xmm3, %rax
; X86-64-NEXT:    testq %rax, %rax
; X86-64-NEXT:    je .LBB3_4
; X86-64-NEXT:  # %bb.3:
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:  .LBB3_4:
; X86-64-NEXT:    andpd %xmm3, %xmm1
; X86-64-NEXT:    orpd %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_double:
; I386:       # %bb.0:
; I386-NEXT:    subl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 20
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB3_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB3_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB3_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB3_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    flds (%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    ja .LBB3_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB3_6:
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB3_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB3_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB3_10
; I386-NEXT:  # %bb.9:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB3_10:
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB3_12
; I386-NEXT:  # %bb.11:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB3_12:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB3_14
; I386-NEXT:  # %bb.13:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB3_14:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: maximumnum_double:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; SSE2-NEXT:    movapd %xmm1, %xmm0
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm0
; SSE2-NEXT:    movapd %xmm0, %xmm3
; SSE2-NEXT:    andpd %xmm2, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm0
; SSE2-NEXT:    orpd %xmm3, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm3, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm2
; SSE2-NEXT:    cmpltsd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm4
; SSE2-NEXT:    addsd %xmm2, %xmm4
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm3, %xmm4
; SSE2-NEXT:    andnpd %xmm2, %xmm3
; SSE2-NEXT:    orpd %xmm4, %xmm3
; SSE2-NEXT:    xorpd %xmm2, %xmm2
; SSE2-NEXT:    cmpeqsd %xmm3, %xmm2
; SSE2-NEXT:    xorps %xmm4, %xmm4
; SSE2-NEXT:    cvtsd2ss %xmm0, %xmm4
; SSE2-NEXT:    movd %xmm4, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    je .LBB3_2
; SSE2-NEXT:  # %bb.1:
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:  .LBB3_2:
; SSE2-NEXT:    movapd %xmm2, %xmm4
; SSE2-NEXT:    andnpd %xmm3, %xmm4
; SSE2-NEXT:    xorps %xmm3, %xmm3
; SSE2-NEXT:    cvtsd2ss %xmm1, %xmm3
; SSE2-NEXT:    movd %xmm3, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    je .LBB3_4
; SSE2-NEXT:  # %bb.3:
; SSE2-NEXT:    movaps %xmm0, %xmm1
; SSE2-NEXT:  .LBB3_4:
; SSE2-NEXT:    andpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm2, %xmm4
; SSE2-NEXT:    movlpd %xmm4, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_double:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm2 = mem[0],zero
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vblendvpd %xmm1, %xmm2, %xmm0, %xmm1
; AVX-NEXT:    vcmpunordsd %xmm2, %xmm2, %xmm0
; AVX-NEXT:    vblendvpd %xmm0, %xmm1, %xmm2, %xmm0
; AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vcmpunordsd %xmm2, %xmm2, %xmm3
; AVX-NEXT:    vaddsd %xmm2, %xmm2, %xmm4
; AVX-NEXT:    vblendvpd %xmm3, %xmm4, %xmm2, %xmm2
; AVX-NEXT:    vxorpd %xmm3, %xmm3, %xmm3
; AVX-NEXT:    vcvtsd2ss %xmm1, %xmm1, %xmm4
; AVX-NEXT:    vmovd %xmm4, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    je .LBB3_2
; AVX-NEXT:  # %bb.1:
; AVX-NEXT:    vmovapd %xmm2, %xmm1
; AVX-NEXT:  .LBB3_2:
; AVX-NEXT:    vcmpeqsd %xmm3, %xmm2, %xmm3
; AVX-NEXT:    vcvtsd2ss %xmm0, %xmm0, %xmm4
; AVX-NEXT:    vmovd %xmm4, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    je .LBB3_4
; AVX-NEXT:  # %bb.3:
; AVX-NEXT:    vmovaps %xmm1, %xmm0
; AVX-NEXT:  .LBB3_4:
; AVX-NEXT:    vblendvpd %xmm3, %xmm0, %xmm2, %xmm0
; AVX-NEXT:    vmovlpd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call double @llvm.maximumnum.f64(double %x, double %y)
  ret double %z
}

define double @maximumnum_double_nsz(double %x, double %y) {
;
; X86-64-LABEL: maximumnum_double_nsz:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movapd %xmm0, %xmm2
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm2
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:    andpd %xmm1, %xmm3
; X86-64-NEXT:    andnpd %xmm0, %xmm2
; X86-64-NEXT:    orpd %xmm3, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm3
; X86-64-NEXT:    andpd %xmm2, %xmm3
; X86-64-NEXT:    andnpd %xmm1, %xmm0
; X86-64-NEXT:    orpd %xmm3, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm1
; X86-64-NEXT:    cmpltsd %xmm2, %xmm1
; X86-64-NEXT:    andpd %xmm1, %xmm2
; X86-64-NEXT:    andnpd %xmm0, %xmm1
; X86-64-NEXT:    orpd %xmm2, %xmm1
; X86-64-NEXT:    movapd %xmm1, %xmm2
; X86-64-NEXT:    addsd %xmm1, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm0
; X86-64-NEXT:    andpd %xmm0, %xmm2
; X86-64-NEXT:    andnpd %xmm1, %xmm0
; X86-64-NEXT:    orpd %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_double_nsz:
; I386:       # %bb.0:
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB4_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB4_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB4_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB4_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    ja .LBB4_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB4_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB4_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB4_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    retl
;
; SSE2-LABEL: maximumnum_double_nsz:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; SSE2-NEXT:    movapd %xmm1, %xmm0
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm0
; SSE2-NEXT:    movapd %xmm0, %xmm3
; SSE2-NEXT:    andpd %xmm2, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm0
; SSE2-NEXT:    orpd %xmm3, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm3, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm2
; SSE2-NEXT:    cmpltsd %xmm0, %xmm2
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm0
; SSE2-NEXT:    addsd %xmm2, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    andpd %xmm1, %xmm0
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm0, %xmm1
; SSE2-NEXT:    movlpd %xmm1, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_double_nsz:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vaddsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm1, %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovlpd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call nsz double @llvm.maximumnum.f64(double %x, double %y)
  ret double %z
}

define double @maximumnum_double_nnan(double %x, double %y) {
;
; X86-64-LABEL: maximumnum_double_nnan:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movq %xmm0, %rax
; X86-64-NEXT:    testq %rax, %rax
; X86-64-NEXT:    js .LBB5_1
; X86-64-NEXT:  # %bb.2:
; X86-64-NEXT:    movdqa %xmm0, %xmm2
; X86-64-NEXT:    jmp .LBB5_3
; X86-64-NEXT:  .LBB5_1:
; X86-64-NEXT:    movdqa %xmm1, %xmm2
; X86-64-NEXT:    movdqa %xmm0, %xmm1
; X86-64-NEXT:  .LBB5_3:
; X86-64-NEXT:    maxsd %xmm2, %xmm1
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: maximumnum_double_nnan:
; I386:       # %bb.0:
; I386-NEXT:    subl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 20
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    flds (%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jbe .LBB5_1
; I386-NEXT:  # %bb.2:
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    jne .LBB5_3
; I386-NEXT:  .LBB5_4:
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB5_6
; I386-NEXT:  .LBB5_5:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB5_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB5_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB5_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
; I386-NEXT:  .LBB5_1:
; I386-NEXT:    .cfi_def_cfa_offset 20
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    je .LBB5_4
; I386-NEXT:  .LBB5_3:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I386-NEXT:    jne .LBB5_5
; I386-NEXT:    jmp .LBB5_6
;
; SSE2-LABEL: maximumnum_double_nnan:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movaps %xmm1, %xmm2
; SSE2-NEXT:    shufps {{.*#+}} xmm2 = xmm2[1,1],xmm1[1,1]
; SSE2-NEXT:    movd %xmm2, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    js .LBB5_1
; SSE2-NEXT:  # %bb.2:
; SSE2-NEXT:    movaps %xmm1, %xmm2
; SSE2-NEXT:    jmp .LBB5_3
; SSE2-NEXT:  .LBB5_1:
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:  .LBB5_3:
; SSE2-NEXT:    maxsd %xmm2, %xmm0
; SSE2-NEXT:    movsd %xmm0, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: maximumnum_double_nnan:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm2 = mem[0],zero
; AVX-NEXT:    vextractps $1, %xmm2, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    js .LBB5_1
; AVX-NEXT:  # %bb.2:
; AVX-NEXT:    vmovapd %xmm2, %xmm1
; AVX-NEXT:    jmp .LBB5_3
; AVX-NEXT:  .LBB5_1:
; AVX-NEXT:    vmovapd %xmm0, %xmm1
; AVX-NEXT:    vmovapd %xmm2, %xmm0
; AVX-NEXT:  .LBB5_3:
; AVX-NEXT:    vmaxsd %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vmovsd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call nnan double @llvm.maximumnum.f64(double %x, double %y)
  ret double %z
}

define float @minimumnum_float(float %x, float %y) {
;
; X86-64-LABEL: minimumnum_float:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movaps %xmm0, %xmm2
; X86-64-NEXT:    cmpunordss %xmm0, %xmm2
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:    andps %xmm1, %xmm3
; X86-64-NEXT:    andnps %xmm0, %xmm2
; X86-64-NEXT:    orps %xmm3, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm3
; X86-64-NEXT:    cmpunordss %xmm1, %xmm3
; X86-64-NEXT:    movaps %xmm3, %xmm0
; X86-64-NEXT:    andps %xmm2, %xmm0
; X86-64-NEXT:    andnps %xmm1, %xmm3
; X86-64-NEXT:    orps %xmm0, %xmm3
; X86-64-NEXT:    movaps %xmm2, %xmm0
; X86-64-NEXT:    cmpltss %xmm3, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm1
; X86-64-NEXT:    andps %xmm2, %xmm1
; X86-64-NEXT:    andnps %xmm3, %xmm0
; X86-64-NEXT:    orps %xmm1, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm1
; X86-64-NEXT:    addss %xmm0, %xmm1
; X86-64-NEXT:    movaps %xmm0, %xmm4
; X86-64-NEXT:    cmpunordss %xmm0, %xmm4
; X86-64-NEXT:    andps %xmm4, %xmm1
; X86-64-NEXT:    andnps %xmm0, %xmm4
; X86-64-NEXT:    orps %xmm1, %xmm4
; X86-64-NEXT:    xorps %xmm1, %xmm1
; X86-64-NEXT:    cmpeqss %xmm4, %xmm1
; X86-64-NEXT:    movd %xmm2, %eax
; X86-64-NEXT:    negl %eax
; X86-64-NEXT:    jo .LBB6_2
; X86-64-NEXT:  # %bb.1:
; X86-64-NEXT:    movaps %xmm4, %xmm2
; X86-64-NEXT:  .LBB6_2:
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    andnps %xmm4, %xmm0
; X86-64-NEXT:    movd %xmm3, %eax
; X86-64-NEXT:    negl %eax
; X86-64-NEXT:    jo .LBB6_4
; X86-64-NEXT:  # %bb.3:
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:  .LBB6_4:
; X86-64-NEXT:    andps %xmm3, %xmm1
; X86-64-NEXT:    orps %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_float:
; I386:       # %bb.0:
; I386-NEXT:    subl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 12
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB6_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB6_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB6_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB6_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jb .LBB6_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB6_6:
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB6_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB6_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    xorl %eax, %eax
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB6_10
; I386-NEXT:  # %bb.9:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB6_10:
; I386-NEXT:    cmpl (%esp), %eax
; I386-NEXT:    jo .LBB6_12
; I386-NEXT:  # %bb.11:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB6_12:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB6_14
; I386-NEXT:  # %bb.13:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB6_14:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_float:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE2-NEXT:    movss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:    cmpunordss %xmm1, %xmm0
; SSE2-NEXT:    movaps %xmm0, %xmm3
; SSE2-NEXT:    andps %xmm2, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm0
; SSE2-NEXT:    orps %xmm3, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm3, %xmm1
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpltss %xmm1, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm3, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm4
; SSE2-NEXT:    addss %xmm2, %xmm4
; SSE2-NEXT:    movaps %xmm2, %xmm3
; SSE2-NEXT:    cmpunordss %xmm2, %xmm3
; SSE2-NEXT:    andps %xmm3, %xmm4
; SSE2-NEXT:    andnps %xmm2, %xmm3
; SSE2-NEXT:    orps %xmm4, %xmm3
; SSE2-NEXT:    xorps %xmm2, %xmm2
; SSE2-NEXT:    cmpeqss %xmm3, %xmm2
; SSE2-NEXT:    movd %xmm0, %eax
; SSE2-NEXT:    negl %eax
; SSE2-NEXT:    jo .LBB6_2
; SSE2-NEXT:  # %bb.1:
; SSE2-NEXT:    movaps %xmm3, %xmm0
; SSE2-NEXT:  .LBB6_2:
; SSE2-NEXT:    movaps %xmm2, %xmm4
; SSE2-NEXT:    andnps %xmm3, %xmm4
; SSE2-NEXT:    movd %xmm1, %eax
; SSE2-NEXT:    negl %eax
; SSE2-NEXT:    jo .LBB6_4
; SSE2-NEXT:  # %bb.3:
; SSE2-NEXT:    movaps %xmm0, %xmm1
; SSE2-NEXT:  .LBB6_4:
; SSE2-NEXT:    andps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm2, %xmm4
; SSE2-NEXT:    movss %xmm4, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_float:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vblendvps %xmm1, %xmm2, %xmm0, %xmm1
; AVX-NEXT:    vcmpunordss %xmm2, %xmm2, %xmm0
; AVX-NEXT:    vblendvps %xmm0, %xmm1, %xmm2, %xmm0
; AVX-NEXT:    vcmpltss %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vcmpunordss %xmm2, %xmm2, %xmm3
; AVX-NEXT:    vaddss %xmm2, %xmm2, %xmm4
; AVX-NEXT:    vblendvps %xmm3, %xmm4, %xmm2, %xmm2
; AVX-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; AVX-NEXT:    vmovd %xmm1, %eax
; AVX-NEXT:    negl %eax
; AVX-NEXT:    jo .LBB6_2
; AVX-NEXT:  # %bb.1:
; AVX-NEXT:    vmovaps %xmm2, %xmm1
; AVX-NEXT:  .LBB6_2:
; AVX-NEXT:    vcmpeqss %xmm3, %xmm2, %xmm3
; AVX-NEXT:    vmovd %xmm0, %eax
; AVX-NEXT:    negl %eax
; AVX-NEXT:    jo .LBB6_4
; AVX-NEXT:  # %bb.3:
; AVX-NEXT:    vmovaps %xmm1, %xmm0
; AVX-NEXT:  .LBB6_4:
; AVX-NEXT:    vblendvps %xmm3, %xmm0, %xmm2, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call float @llvm.minimumnum.f32(float %x, float %y)
  ret float %z
}

define float @minimumnum_float_nsz(float %x, float %y) {
;
; X86-64-LABEL: minimumnum_float_nsz:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movaps %xmm0, %xmm2
; X86-64-NEXT:    cmpunordss %xmm0, %xmm2
; X86-64-NEXT:    movaps %xmm2, %xmm3
; X86-64-NEXT:    andps %xmm1, %xmm3
; X86-64-NEXT:    andnps %xmm0, %xmm2
; X86-64-NEXT:    orps %xmm3, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    cmpunordss %xmm1, %xmm0
; X86-64-NEXT:    movaps %xmm0, %xmm3
; X86-64-NEXT:    andps %xmm2, %xmm3
; X86-64-NEXT:    andnps %xmm1, %xmm0
; X86-64-NEXT:    orps %xmm3, %xmm0
; X86-64-NEXT:    movaps %xmm2, %xmm1
; X86-64-NEXT:    cmpltss %xmm0, %xmm1
; X86-64-NEXT:    andps %xmm1, %xmm2
; X86-64-NEXT:    andnps %xmm0, %xmm1
; X86-64-NEXT:    orps %xmm2, %xmm1
; X86-64-NEXT:    movaps %xmm1, %xmm2
; X86-64-NEXT:    addss %xmm1, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    cmpunordss %xmm1, %xmm0
; X86-64-NEXT:    andps %xmm0, %xmm2
; X86-64-NEXT:    andnps %xmm1, %xmm0
; X86-64-NEXT:    orps %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_float_nsz:
; I386:       # %bb.0:
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB7_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB7_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB7_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB7_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jb .LBB7_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB7_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB7_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB7_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_float_nsz:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE2-NEXT:    movss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:    cmpunordss %xmm1, %xmm0
; SSE2-NEXT:    movaps %xmm0, %xmm3
; SSE2-NEXT:    andps %xmm2, %xmm3
; SSE2-NEXT:    andnps %xmm1, %xmm0
; SSE2-NEXT:    orps %xmm3, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    movaps %xmm1, %xmm3
; SSE2-NEXT:    andps %xmm0, %xmm3
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm3, %xmm1
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    cmpltss %xmm1, %xmm2
; SSE2-NEXT:    andps %xmm2, %xmm0
; SSE2-NEXT:    andnps %xmm1, %xmm2
; SSE2-NEXT:    orps %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm2, %xmm0
; SSE2-NEXT:    addss %xmm2, %xmm0
; SSE2-NEXT:    movaps %xmm2, %xmm1
; SSE2-NEXT:    cmpunordss %xmm2, %xmm1
; SSE2-NEXT:    andps %xmm1, %xmm0
; SSE2-NEXT:    andnps %xmm2, %xmm1
; SSE2-NEXT:    orps %xmm0, %xmm1
; SSE2-NEXT:    movss %xmm1, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_float_nsz:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordss %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltss %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    vcmpunordss %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vaddss %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvps %xmm1, %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call nsz float @llvm.minimumnum.f32(float %x, float %y)
  ret float %z
}

define float @minimumnum_float_nnan(float %x, float %y) {
;
; X86-64-LABEL: minimumnum_float_nnan:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movd %xmm0, %eax
; X86-64-NEXT:    testl %eax, %eax
; X86-64-NEXT:    js .LBB8_1
; X86-64-NEXT:  # %bb.2:
; X86-64-NEXT:    minss %xmm1, %xmm0
; X86-64-NEXT:    retq
; X86-64-NEXT:  .LBB8_1:
; X86-64-NEXT:    movdqa %xmm0, %xmm2
; X86-64-NEXT:    movaps %xmm1, %xmm0
; X86-64-NEXT:    minss %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_float_nnan:
; I386:       # %bb.0:
; I386-NEXT:    subl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 12
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jb .LBB8_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB8_2:
; I386-NEXT:    xorl %eax, %eax
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB8_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB8_4:
; I386-NEXT:    cmpl (%esp), %eax
; I386-NEXT:    jo .LBB8_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB8_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB8_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB8_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $8, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_float_nnan:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    movd {{.*#+}} xmm2 = mem[0],zero,zero,zero
; SSE2-NEXT:    movd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; SSE2-NEXT:    movd %xmm0, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    js .LBB8_1
; SSE2-NEXT:  # %bb.2:
; SSE2-NEXT:    movdqa %xmm2, %xmm1
; SSE2-NEXT:    jmp .LBB8_3
; SSE2-NEXT:  .LBB8_1:
; SSE2-NEXT:    movdqa %xmm0, %xmm1
; SSE2-NEXT:    movdqa %xmm2, %xmm0
; SSE2-NEXT:  .LBB8_3:
; SSE2-NEXT:    minss %xmm1, %xmm0
; SSE2-NEXT:    movss %xmm0, (%esp)
; SSE2-NEXT:    flds (%esp)
; SSE2-NEXT:    popl %eax
; SSE2-NEXT:    .cfi_def_cfa_offset 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_float_nnan:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    vmovd {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX-NEXT:    vmovd %xmm0, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    js .LBB8_1
; AVX-NEXT:  # %bb.2:
; AVX-NEXT:    vmovdqa %xmm1, %xmm2
; AVX-NEXT:    jmp .LBB8_3
; AVX-NEXT:  .LBB8_1:
; AVX-NEXT:    vmovdqa %xmm0, %xmm2
; AVX-NEXT:    vmovdqa %xmm1, %xmm0
; AVX-NEXT:  .LBB8_3:
; AVX-NEXT:    vminss %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovss %xmm0, (%esp)
; AVX-NEXT:    flds (%esp)
; AVX-NEXT:    popl %eax
; AVX-NEXT:    .cfi_def_cfa_offset 4
; AVX-NEXT:    retl
  %z = call nnan float @llvm.minimumnum.f32(float %x, float %y)
  ret float %z
}

define double @minimumnum_double(double %x, double %y) {
;
; X86-64-LABEL: minimumnum_double:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movapd %xmm0, %xmm2
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm2
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:    andpd %xmm1, %xmm3
; X86-64-NEXT:    andnpd %xmm0, %xmm2
; X86-64-NEXT:    orpd %xmm3, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm3
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm3
; X86-64-NEXT:    movapd %xmm3, %xmm0
; X86-64-NEXT:    andpd %xmm2, %xmm0
; X86-64-NEXT:    andnpd %xmm1, %xmm3
; X86-64-NEXT:    orpd %xmm0, %xmm3
; X86-64-NEXT:    movapd %xmm2, %xmm0
; X86-64-NEXT:    cmpltsd %xmm3, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm1
; X86-64-NEXT:    andpd %xmm2, %xmm1
; X86-64-NEXT:    andnpd %xmm3, %xmm0
; X86-64-NEXT:    orpd %xmm1, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm1
; X86-64-NEXT:    addsd %xmm0, %xmm1
; X86-64-NEXT:    movapd %xmm0, %xmm4
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm4
; X86-64-NEXT:    andpd %xmm4, %xmm1
; X86-64-NEXT:    andnpd %xmm0, %xmm4
; X86-64-NEXT:    orpd %xmm1, %xmm4
; X86-64-NEXT:    xorpd %xmm1, %xmm1
; X86-64-NEXT:    cmpeqsd %xmm4, %xmm1
; X86-64-NEXT:    movq %xmm2, %rax
; X86-64-NEXT:    negq %rax
; X86-64-NEXT:    jo .LBB9_2
; X86-64-NEXT:  # %bb.1:
; X86-64-NEXT:    movapd %xmm4, %xmm2
; X86-64-NEXT:  .LBB9_2:
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    andnpd %xmm4, %xmm0
; X86-64-NEXT:    movq %xmm3, %rax
; X86-64-NEXT:    negq %rax
; X86-64-NEXT:    jo .LBB9_4
; X86-64-NEXT:  # %bb.3:
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:  .LBB9_4:
; X86-64-NEXT:    andpd %xmm3, %xmm1
; X86-64-NEXT:    orpd %xmm1, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_double:
; I386:       # %bb.0:
; I386-NEXT:    subl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 20
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB9_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB9_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB9_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB9_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    flds (%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jb .LBB9_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB9_6:
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB9_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB9_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    xorl %eax, %eax
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB9_10
; I386-NEXT:  # %bb.9:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB9_10:
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB9_12
; I386-NEXT:  # %bb.11:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB9_12:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB9_14
; I386-NEXT:  # %bb.13:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB9_14:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_double:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; SSE2-NEXT:    movapd %xmm1, %xmm0
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm0
; SSE2-NEXT:    movapd %xmm0, %xmm3
; SSE2-NEXT:    andpd %xmm2, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm0
; SSE2-NEXT:    orpd %xmm3, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm3, %xmm1
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpltsd %xmm1, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm3, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm4
; SSE2-NEXT:    addsd %xmm2, %xmm4
; SSE2-NEXT:    movapd %xmm2, %xmm3
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm3
; SSE2-NEXT:    andpd %xmm3, %xmm4
; SSE2-NEXT:    andnpd %xmm2, %xmm3
; SSE2-NEXT:    orpd %xmm4, %xmm3
; SSE2-NEXT:    xorpd %xmm2, %xmm2
; SSE2-NEXT:    cmpeqsd %xmm3, %xmm2
; SSE2-NEXT:    xorps %xmm4, %xmm4
; SSE2-NEXT:    cvtsd2ss %xmm0, %xmm4
; SSE2-NEXT:    movd %xmm4, %eax
; SSE2-NEXT:    negl %eax
; SSE2-NEXT:    jo .LBB9_2
; SSE2-NEXT:  # %bb.1:
; SSE2-NEXT:    movapd %xmm3, %xmm0
; SSE2-NEXT:  .LBB9_2:
; SSE2-NEXT:    movapd %xmm2, %xmm4
; SSE2-NEXT:    andnpd %xmm3, %xmm4
; SSE2-NEXT:    xorps %xmm3, %xmm3
; SSE2-NEXT:    cvtsd2ss %xmm1, %xmm3
; SSE2-NEXT:    movd %xmm3, %eax
; SSE2-NEXT:    negl %eax
; SSE2-NEXT:    jo .LBB9_4
; SSE2-NEXT:  # %bb.3:
; SSE2-NEXT:    movaps %xmm0, %xmm1
; SSE2-NEXT:  .LBB9_4:
; SSE2-NEXT:    andpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm2, %xmm4
; SSE2-NEXT:    movlpd %xmm4, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_double:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm2 = mem[0],zero
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vblendvpd %xmm1, %xmm2, %xmm0, %xmm1
; AVX-NEXT:    vcmpunordsd %xmm2, %xmm2, %xmm0
; AVX-NEXT:    vblendvpd %xmm0, %xmm1, %xmm2, %xmm0
; AVX-NEXT:    vcmpltsd %xmm0, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vcmpunordsd %xmm2, %xmm2, %xmm3
; AVX-NEXT:    vaddsd %xmm2, %xmm2, %xmm4
; AVX-NEXT:    vblendvpd %xmm3, %xmm4, %xmm2, %xmm2
; AVX-NEXT:    vxorpd %xmm3, %xmm3, %xmm3
; AVX-NEXT:    vcvtsd2ss %xmm1, %xmm1, %xmm4
; AVX-NEXT:    vmovd %xmm4, %eax
; AVX-NEXT:    negl %eax
; AVX-NEXT:    jo .LBB9_2
; AVX-NEXT:  # %bb.1:
; AVX-NEXT:    vmovapd %xmm2, %xmm1
; AVX-NEXT:  .LBB9_2:
; AVX-NEXT:    vcmpeqsd %xmm3, %xmm2, %xmm3
; AVX-NEXT:    vcvtsd2ss %xmm0, %xmm0, %xmm4
; AVX-NEXT:    vmovd %xmm4, %eax
; AVX-NEXT:    negl %eax
; AVX-NEXT:    jo .LBB9_4
; AVX-NEXT:  # %bb.3:
; AVX-NEXT:    vmovaps %xmm1, %xmm0
; AVX-NEXT:  .LBB9_4:
; AVX-NEXT:    vblendvpd %xmm3, %xmm0, %xmm2, %xmm0
; AVX-NEXT:    vmovlpd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call double @llvm.minimumnum.f64(double %x, double %y)
  ret double %z
}

define double @minimumnum_double_nsz(double %x, double %y) {
;
; X86-64-LABEL: minimumnum_double_nsz:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movapd %xmm0, %xmm2
; X86-64-NEXT:    cmpunordsd %xmm0, %xmm2
; X86-64-NEXT:    movapd %xmm2, %xmm3
; X86-64-NEXT:    andpd %xmm1, %xmm3
; X86-64-NEXT:    andnpd %xmm0, %xmm2
; X86-64-NEXT:    orpd %xmm3, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm0
; X86-64-NEXT:    movapd %xmm0, %xmm3
; X86-64-NEXT:    andpd %xmm2, %xmm3
; X86-64-NEXT:    andnpd %xmm1, %xmm0
; X86-64-NEXT:    orpd %xmm3, %xmm0
; X86-64-NEXT:    movapd %xmm2, %xmm1
; X86-64-NEXT:    cmpltsd %xmm0, %xmm1
; X86-64-NEXT:    andpd %xmm1, %xmm2
; X86-64-NEXT:    andnpd %xmm0, %xmm1
; X86-64-NEXT:    orpd %xmm2, %xmm1
; X86-64-NEXT:    movapd %xmm1, %xmm2
; X86-64-NEXT:    addsd %xmm1, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    cmpunordsd %xmm1, %xmm0
; X86-64-NEXT:    andpd %xmm0, %xmm2
; X86-64-NEXT:    andnpd %xmm1, %xmm0
; X86-64-NEXT:    orpd %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_double_nsz:
; I386:       # %bb.0:
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB10_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB10_2:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(1)
; I386-NEXT:    jp .LBB10_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB10_4:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jb .LBB10_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB10_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fadd %st(1), %st
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(0)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    jp .LBB10_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB10_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_double_nsz:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; SSE2-NEXT:    movapd %xmm1, %xmm0
; SSE2-NEXT:    cmpunordsd %xmm1, %xmm0
; SSE2-NEXT:    movapd %xmm0, %xmm3
; SSE2-NEXT:    andpd %xmm2, %xmm3
; SSE2-NEXT:    andnpd %xmm1, %xmm0
; SSE2-NEXT:    orpd %xmm3, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    movapd %xmm1, %xmm3
; SSE2-NEXT:    andpd %xmm0, %xmm3
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm3, %xmm1
; SSE2-NEXT:    movapd %xmm0, %xmm2
; SSE2-NEXT:    cmpltsd %xmm1, %xmm2
; SSE2-NEXT:    andpd %xmm2, %xmm0
; SSE2-NEXT:    andnpd %xmm1, %xmm2
; SSE2-NEXT:    orpd %xmm0, %xmm2
; SSE2-NEXT:    movapd %xmm2, %xmm0
; SSE2-NEXT:    addsd %xmm2, %xmm0
; SSE2-NEXT:    movapd %xmm2, %xmm1
; SSE2-NEXT:    cmpunordsd %xmm2, %xmm1
; SSE2-NEXT:    andpd %xmm1, %xmm0
; SSE2-NEXT:    andnpd %xmm2, %xmm1
; SSE2-NEXT:    orpd %xmm0, %xmm1
; SSE2-NEXT:    movlpd %xmm1, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_double_nsz:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm1, %xmm0, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm1, %xmm1, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm1
; AVX-NEXT:    vcmpltsd %xmm1, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm2, %xmm0, %xmm1, %xmm0
; AVX-NEXT:    vcmpunordsd %xmm0, %xmm0, %xmm1
; AVX-NEXT:    vaddsd %xmm0, %xmm0, %xmm2
; AVX-NEXT:    vblendvpd %xmm1, %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovlpd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call nsz double @llvm.minimumnum.f64(double %x, double %y)
  ret double %z
}

define double @minimumnum_double_nnan(double %x, double %y) {
;
; X86-64-LABEL: minimumnum_double_nnan:
; X86-64:       # %bb.0:
; X86-64-NEXT:    movq %xmm0, %rax
; X86-64-NEXT:    testq %rax, %rax
; X86-64-NEXT:    js .LBB11_1
; X86-64-NEXT:  # %bb.2:
; X86-64-NEXT:    minsd %xmm1, %xmm0
; X86-64-NEXT:    retq
; X86-64-NEXT:  .LBB11_1:
; X86-64-NEXT:    movdqa %xmm0, %xmm2
; X86-64-NEXT:    movapd %xmm1, %xmm0
; X86-64-NEXT:    minsd %xmm2, %xmm0
; X86-64-NEXT:    retq
;
; I386-LABEL: minimumnum_double_nnan:
; I386:       # %bb.0:
; I386-NEXT:    subl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 20
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fldl {{[0-9]+}}(%esp)
; I386-NEXT:    fsts {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fsts (%esp)
; I386-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    flds (%esp)
; I386-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    fld %st(0)
; I386-NEXT:    jb .LBB11_2
; I386-NEXT:  # %bb.1:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    fld %st(1)
; I386-NEXT:  .LBB11_2:
; I386-NEXT:    xorl %eax, %eax
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB11_4
; I386-NEXT:  # %bb.3:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fld %st(0)
; I386-NEXT:    fxch %st(1)
; I386-NEXT:  .LBB11_4:
; I386-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I386-NEXT:    jo .LBB11_6
; I386-NEXT:  # %bb.5:
; I386-NEXT:    fstp %st(2)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fxch %st(2)
; I386-NEXT:  .LBB11_6:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:    fxch %st(1)
; I386-NEXT:    fucom %st(1)
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fnstsw %ax
; I386-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NEXT:    sahf
; I386-NEXT:    je .LBB11_8
; I386-NEXT:  # %bb.7:
; I386-NEXT:    fstp %st(1)
; I386-NEXT:    fldz
; I386-NEXT:  .LBB11_8:
; I386-NEXT:    fstp %st(0)
; I386-NEXT:    addl $16, %esp
; I386-NEXT:    .cfi_def_cfa_offset 4
; I386-NEXT:    retl
;
; SSE2-LABEL: minimumnum_double_nnan:
; SSE2:       # %bb.0:
; SSE2-NEXT:    pushl %ebp
; SSE2-NEXT:    .cfi_def_cfa_offset 8
; SSE2-NEXT:    .cfi_offset %ebp, -8
; SSE2-NEXT:    movl %esp, %ebp
; SSE2-NEXT:    .cfi_def_cfa_register %ebp
; SSE2-NEXT:    andl $-8, %esp
; SSE2-NEXT:    subl $8, %esp
; SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    shufps {{.*#+}} xmm2 = xmm2[1,1],xmm0[1,1]
; SSE2-NEXT:    movd %xmm2, %eax
; SSE2-NEXT:    testl %eax, %eax
; SSE2-NEXT:    js .LBB11_1
; SSE2-NEXT:  # %bb.2:
; SSE2-NEXT:    movaps %xmm1, %xmm2
; SSE2-NEXT:    jmp .LBB11_3
; SSE2-NEXT:  .LBB11_1:
; SSE2-NEXT:    movaps %xmm0, %xmm2
; SSE2-NEXT:    movaps %xmm1, %xmm0
; SSE2-NEXT:  .LBB11_3:
; SSE2-NEXT:    minsd %xmm2, %xmm0
; SSE2-NEXT:    movsd %xmm0, (%esp)
; SSE2-NEXT:    fldl (%esp)
; SSE2-NEXT:    movl %ebp, %esp
; SSE2-NEXT:    popl %ebp
; SSE2-NEXT:    .cfi_def_cfa %esp, 4
; SSE2-NEXT:    retl
;
; AVX-LABEL: minimumnum_double_nnan:
; AVX:       # %bb.0:
; AVX-NEXT:    pushl %ebp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    .cfi_offset %ebp, -8
; AVX-NEXT:    movl %esp, %ebp
; AVX-NEXT:    .cfi_def_cfa_register %ebp
; AVX-NEXT:    andl $-8, %esp
; AVX-NEXT:    subl $8, %esp
; AVX-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-NEXT:    vextractps $1, %xmm0, %eax
; AVX-NEXT:    testl %eax, %eax
; AVX-NEXT:    js .LBB11_1
; AVX-NEXT:  # %bb.2:
; AVX-NEXT:    vmovapd %xmm1, %xmm2
; AVX-NEXT:    jmp .LBB11_3
; AVX-NEXT:  .LBB11_1:
; AVX-NEXT:    vmovapd %xmm0, %xmm2
; AVX-NEXT:    vmovapd %xmm1, %xmm0
; AVX-NEXT:  .LBB11_3:
; AVX-NEXT:    vminsd %xmm2, %xmm0, %xmm0
; AVX-NEXT:    vmovsd %xmm0, (%esp)
; AVX-NEXT:    fldl (%esp)
; AVX-NEXT:    movl %ebp, %esp
; AVX-NEXT:    popl %ebp
; AVX-NEXT:    .cfi_def_cfa %esp, 4
; AVX-NEXT:    retl
  %z = call nnan double @llvm.minimumnum.f64(double %x, double %y)
  ret double %z
}

; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-- | FileCheck %s --check-prefix=X86
; RUN: llc < %s -mtriple=x86_64-- | FileCheck %s --check-prefix=X64

; Make sure none of these crash, and that the power-of-two transformations
; trigger correctly.

define i128 @test1(i128 %x) nounwind {
; X86-LABEL: test1:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    shrdl $2, %edx, %ecx
; X86-NEXT:    shrl $2, %edx
; X86-NEXT:    movl %edx, 4(%eax)
; X86-NEXT:    movl %ecx, (%eax)
; X86-NEXT:    movl $0, 12(%eax)
; X86-NEXT:    movl $0, 8(%eax)
; X86-NEXT:    retl $4
;
; X64-LABEL: test1:
; X64:       # %bb.0:
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    shrq $2, %rax
; X64-NEXT:    xorl %edx, %edx
; X64-NEXT:    retq
  %tmp = udiv i128 %x, 73786976294838206464
  ret i128 %tmp
}

define i128 @test2(i128 %x) nounwind {
; X86-LABEL: test2:
; X86:       # %bb.0: # %_udiv-special-cases
; X86-NEXT:    pushl %ebp
; X86-NEXT:    pushl %ebx
; X86-NEXT:    pushl %edi
; X86-NEXT:    pushl %esi
; X86-NEXT:    subl $128, %esp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl %ebp, %eax
; X86-NEXT:    orl %esi, %eax
; X86-NEXT:    movl %edi, %ecx
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    orl %eax, %ecx
; X86-NEXT:    sete {{[-0-9]+}}(%e{{[sb]}}p) # 1-byte Folded Spill
; X86-NEXT:    testl %esi, %esi
; X86-NEXT:    jne .LBB1_1
; X86-NEXT:  # %bb.2: # %_udiv-special-cases
; X86-NEXT:    bsrl %edx, %ebx
; X86-NEXT:    xorl $31, %ebx
; X86-NEXT:    addl $32, %ebx
; X86-NEXT:    testl %ebp, %ebp
; X86-NEXT:    je .LBB1_5
; X86-NEXT:  .LBB1_4:
; X86-NEXT:    bsrl %ebp, %ecx
; X86-NEXT:    xorl $31, %ecx
; X86-NEXT:    jmp .LBB1_6
; X86-NEXT:  .LBB1_1:
; X86-NEXT:    bsrl %esi, %ebx
; X86-NEXT:    xorl $31, %ebx
; X86-NEXT:    testl %ebp, %ebp
; X86-NEXT:    jne .LBB1_4
; X86-NEXT:  .LBB1_5: # %_udiv-special-cases
; X86-NEXT:    bsrl %edi, %ecx
; X86-NEXT:    xorl $31, %ecx
; X86-NEXT:    addl $32, %ecx
; X86-NEXT:  .LBB1_6: # %_udiv-special-cases
; X86-NEXT:    xorl %ebp, %ebp
; X86-NEXT:    orl %esi, %edx
; X86-NEXT:    jne .LBB1_8
; X86-NEXT:  # %bb.7: # %_udiv-special-cases
; X86-NEXT:    addl $64, %ecx
; X86-NEXT:    movl %ecx, %ebx
; X86-NEXT:  .LBB1_8: # %_udiv-special-cases
; X86-NEXT:    negl %ebx
; X86-NEXT:    movl $0, %edx
; X86-NEXT:    sbbl %edx, %edx
; X86-NEXT:    movl $0, %esi
; X86-NEXT:    sbbl %esi, %esi
; X86-NEXT:    movl $0, %edi
; X86-NEXT:    sbbl %edi, %edi
; X86-NEXT:    movl $127, %ecx
; X86-NEXT:    cmpl %ebx, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %edx, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %esi, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %edi, %ecx
; X86-NEXT:    setb %cl
; X86-NEXT:    movzbl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 1-byte Folded Reload
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    movl %ebx, (%esp) # 4-byte Spill
; X86-NEXT:    xorl $127, %ebx
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %esi, %ebx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %edi, %edx
; X86-NEXT:    orl %ebx, %edx
; X86-NEXT:    sete %cl
; X86-NEXT:    movl $0, %edi
; X86-NEXT:    movl $0, %edx
; X86-NEXT:    movl $0, %esi
; X86-NEXT:    testb %al, %al
; X86-NEXT:    jne .LBB1_10
; X86-NEXT:  # %bb.9: # %_udiv-special-cases
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:  .LBB1_10: # %_udiv-special-cases
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    jne .LBB1_17
; X86-NEXT:  # %bb.11: # %udiv-bb1
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl %ebp, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    xorb $127, %cl
; X86-NEXT:    movb %cl, %ch
; X86-NEXT:    andb $7, %ch
; X86-NEXT:    shrb $3, %cl
; X86-NEXT:    andb $15, %cl
; X86-NEXT:    negb %cl
; X86-NEXT:    movsbl %cl, %edx
; X86-NEXT:    movl 120(%esp,%edx), %esi
; X86-NEXT:    movl 124(%esp,%edx), %edi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shldl %cl, %esi, %edi
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shll %cl, %esi
; X86-NEXT:    notb %cl
; X86-NEXT:    movl 112(%esp,%edx), %ebx
; X86-NEXT:    movl 116(%esp,%edx), %edx
; X86-NEXT:    movl %edx, %edi
; X86-NEXT:    shrl %edi
; X86-NEXT:    shrl %cl, %edi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shldl %cl, %ebx, %edx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shll %cl, %ebx
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %esi, %edi
; X86-NEXT:    addl $1, %eax
; X86-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    adcl $0, %esi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    adcl $0, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    adcl $0, %edx
; X86-NEXT:    jae .LBB1_12
; X86-NEXT:  # %bb.15:
; X86-NEXT:    xorl %eax, %eax
; X86-NEXT:    xorl %ecx, %ecx
; X86-NEXT:    jmp .LBB1_16
; X86-NEXT:  .LBB1_12: # %udiv-preheader
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ebp, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-NEXT:    movb %al, %ch
; X86-NEXT:    andb $7, %ch
; X86-NEXT:    # kill: def $al killed $al killed $eax
; X86-NEXT:    shrb $3, %al
; X86-NEXT:    andb $15, %al
; X86-NEXT:    movzbl %al, %ebx
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl 76(%esp,%ebx), %ebp
; X86-NEXT:    movl 72(%esp,%ebx), %esi
; X86-NEXT:    movl %edx, %eax
; X86-NEXT:    movl %esi, %edx
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shrdl %cl, %ebp, %edx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl 64(%esp,%ebx), %edx
; X86-NEXT:    movl 68(%esp,%ebx), %edi
; X86-NEXT:    movl %edi, %ebx
; X86-NEXT:    shrl %cl, %ebx
; X86-NEXT:    notb %cl
; X86-NEXT:    addl %esi, %esi
; X86-NEXT:    shll %cl, %esi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shrl %cl, %ebp
; X86-NEXT:    movl %ebp, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shrdl %cl, %edi, %edx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %ebx, %esi
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-4, %ecx
; X86-NEXT:    addl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-1, %ecx
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    xorl %ecx, %ecx
; X86-NEXT:    movl $0, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Reload
; X86-NEXT:    .p2align 4, 0x90
; X86-NEXT:  .LBB1_13: # %udiv-do-while
; X86-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    shldl $1, %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    shldl $1, %ebp, %esi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    shldl $1, %edi, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shldl $1, %ecx, %edi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shldl $1, %eax, %ecx
; X86-NEXT:    orl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Folded Reload
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shldl $1, %edx, %eax
; X86-NEXT:    shldl $1, %ebx, %edx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %ecx, %edx
; X86-NEXT:    addl %ebx, %ebx
; X86-NEXT:    orl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Folded Reload
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-1, %eax
; X86-NEXT:    cmpl %edi, %eax
; X86-NEXT:    movl $-1, %ecx
; X86-NEXT:    movl %ebp, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    sbbl %ebp, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    sbbl %esi, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    sbbl %edi, %ecx
; X86-NEXT:    sarl $31, %ecx
; X86-NEXT:    movl %ecx, %eax
; X86-NEXT:    andl $1, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %ecx, %ebp
; X86-NEXT:    movl $-1, %eax
; X86-NEXT:    andl %eax, %ebp
; X86-NEXT:    movl $-4, %eax
; X86-NEXT:    andl %eax, %ecx
; X86-NEXT:    subl %ecx, %esi
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    sbbl %ebp, %edi
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    movl (%esp), %ebp # 4-byte Reload
; X86-NEXT:    addl $-1, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    adcl $-1, %esi
; X86-NEXT:    adcl $-1, %eax
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %eax, %ecx
; X86-NEXT:    movl %ebp, (%esp) # 4-byte Spill
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %esi, %ebp
; X86-NEXT:    orl %ecx, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    jne .LBB1_13
; X86-NEXT:  # %bb.14:
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:  .LBB1_16: # %udiv-loop-exit
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    shldl $1, %edi, %ebp
; X86-NEXT:    orl %ecx, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    shldl $1, %edx, %edi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    shldl $1, %esi, %edx
; X86-NEXT:    orl %ecx, %edi
; X86-NEXT:    orl %ecx, %edx
; X86-NEXT:    addl %esi, %esi
; X86-NEXT:    orl %eax, %esi
; X86-NEXT:  .LBB1_17: # %udiv-end
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %esi, (%eax)
; X86-NEXT:    movl %edx, 4(%eax)
; X86-NEXT:    movl %edi, 8(%eax)
; X86-NEXT:    movl %ebp, 12(%eax)
; X86-NEXT:    addl $128, %esp
; X86-NEXT:    popl %esi
; X86-NEXT:    popl %edi
; X86-NEXT:    popl %ebx
; X86-NEXT:    popl %ebp
; X86-NEXT:    retl $4
;
; X64-LABEL: test2:
; X64:       # %bb.0:
; X64-NEXT:    pushq %rax
; X64-NEXT:    xorl %edx, %edx
; X64-NEXT:    movq $-4, %rcx
; X64-NEXT:    callq __udivti3@PLT
; X64-NEXT:    popq %rcx
; X64-NEXT:    retq
; X86 doesn't have __divti3, so the urem is expanded into a loop.
  %tmp = udiv i128 %x, -73786976294838206464
  ret i128 %tmp
}

define i128 @test3(i128 %x) nounwind {
; X86-LABEL: test3:
; X86:       # %bb.0: # %_udiv-special-cases
; X86-NEXT:    pushl %ebp
; X86-NEXT:    pushl %ebx
; X86-NEXT:    pushl %edi
; X86-NEXT:    pushl %esi
; X86-NEXT:    subl $132, %esp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl %ebp, %eax
; X86-NEXT:    orl %esi, %eax
; X86-NEXT:    movl %edi, %ecx
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    orl %eax, %ecx
; X86-NEXT:    sete (%esp) # 1-byte Folded Spill
; X86-NEXT:    testl %esi, %esi
; X86-NEXT:    jne .LBB2_1
; X86-NEXT:  # %bb.2: # %_udiv-special-cases
; X86-NEXT:    bsrl %edx, %ebx
; X86-NEXT:    xorl $31, %ebx
; X86-NEXT:    addl $32, %ebx
; X86-NEXT:    testl %ebp, %ebp
; X86-NEXT:    je .LBB2_5
; X86-NEXT:  .LBB2_4:
; X86-NEXT:    bsrl %ebp, %ecx
; X86-NEXT:    xorl $31, %ecx
; X86-NEXT:    orl %esi, %edx
; X86-NEXT:    je .LBB2_7
; X86-NEXT:    jmp .LBB2_8
; X86-NEXT:  .LBB2_1:
; X86-NEXT:    bsrl %esi, %ebx
; X86-NEXT:    xorl $31, %ebx
; X86-NEXT:    testl %ebp, %ebp
; X86-NEXT:    jne .LBB2_4
; X86-NEXT:  .LBB2_5: # %_udiv-special-cases
; X86-NEXT:    bsrl %edi, %ecx
; X86-NEXT:    xorl $31, %ecx
; X86-NEXT:    addl $32, %ecx
; X86-NEXT:    orl %esi, %edx
; X86-NEXT:    jne .LBB2_8
; X86-NEXT:  .LBB2_7: # %_udiv-special-cases
; X86-NEXT:    addl $64, %ecx
; X86-NEXT:    movl %ecx, %ebx
; X86-NEXT:  .LBB2_8: # %_udiv-special-cases
; X86-NEXT:    xorl %ebp, %ebp
; X86-NEXT:    negl %ebx
; X86-NEXT:    movl $0, %edx
; X86-NEXT:    sbbl %edx, %edx
; X86-NEXT:    movl $0, %esi
; X86-NEXT:    sbbl %esi, %esi
; X86-NEXT:    movl $0, %edi
; X86-NEXT:    sbbl %edi, %edi
; X86-NEXT:    movl $127, %ecx
; X86-NEXT:    cmpl %ebx, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %edx, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %esi, %ecx
; X86-NEXT:    movl $0, %ecx
; X86-NEXT:    sbbl %edi, %ecx
; X86-NEXT:    setb %cl
; X86-NEXT:    movzbl (%esp), %eax # 1-byte Folded Reload
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    xorl $127, %ebx
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %esi, %ebx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %edi, %edx
; X86-NEXT:    orl %ebx, %edx
; X86-NEXT:    sete %cl
; X86-NEXT:    movl $0, %edi
; X86-NEXT:    movl $0, %edx
; X86-NEXT:    movl $0, %esi
; X86-NEXT:    testb %al, %al
; X86-NEXT:    jne .LBB2_10
; X86-NEXT:  # %bb.9: # %_udiv-special-cases
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:  .LBB2_10: # %_udiv-special-cases
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    jne .LBB2_17
; X86-NEXT:  # %bb.11: # %udiv-bb1
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl %ebp, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    xorb $127, %cl
; X86-NEXT:    movb %cl, %ch
; X86-NEXT:    andb $7, %ch
; X86-NEXT:    shrb $3, %cl
; X86-NEXT:    andb $15, %cl
; X86-NEXT:    negb %cl
; X86-NEXT:    movsbl %cl, %edx
; X86-NEXT:    movl 124(%esp,%edx), %esi
; X86-NEXT:    movl 128(%esp,%edx), %edi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shldl %cl, %esi, %edi
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shll %cl, %esi
; X86-NEXT:    notb %cl
; X86-NEXT:    movl 116(%esp,%edx), %ebx
; X86-NEXT:    movl 120(%esp,%edx), %edx
; X86-NEXT:    movl %edx, %edi
; X86-NEXT:    shrl %edi
; X86-NEXT:    shrl %cl, %edi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shldl %cl, %ebx, %edx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shll %cl, %ebx
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %esi, %edi
; X86-NEXT:    addl $1, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    adcl $0, %esi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    adcl $0, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    adcl $0, %edx
; X86-NEXT:    jae .LBB2_12
; X86-NEXT:  # %bb.15:
; X86-NEXT:    xorl %eax, %eax
; X86-NEXT:    xorl %ecx, %ecx
; X86-NEXT:    jmp .LBB2_16
; X86-NEXT:  .LBB2_12: # %udiv-preheader
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ebp, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl $0, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    movb %al, %ch
; X86-NEXT:    andb $7, %ch
; X86-NEXT:    # kill: def $al killed $al killed $eax
; X86-NEXT:    shrb $3, %al
; X86-NEXT:    andb $15, %al
; X86-NEXT:    movzbl %al, %ebx
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl 80(%esp,%ebx), %eax
; X86-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-NEXT:    movl 76(%esp,%ebx), %ebp
; X86-NEXT:    movl %ebp, %edi
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shrdl %cl, %eax, %edi
; X86-NEXT:    movl %edi, %eax
; X86-NEXT:    movl 68(%esp,%ebx), %esi
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl 72(%esp,%ebx), %esi
; X86-NEXT:    movl %esi, %ebx
; X86-NEXT:    shrl %cl, %ebx
; X86-NEXT:    notb %cl
; X86-NEXT:    addl %ebp, %ebp
; X86-NEXT:    shll %cl, %ebp
; X86-NEXT:    movb %ch, %cl
; X86-NEXT:    shrl %cl, (%esp) # 4-byte Folded Spill
; X86-NEXT:    shrdl %cl, %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; X86-NEXT:    orl %ebx, %ebp
; X86-NEXT:    movl %ebp, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-3, %ecx
; X86-NEXT:    addl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-1, %ecx
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-5, %ecx
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $-1, %ecx
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl $0, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; X86-NEXT:    movl $0, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    .p2align 4, 0x90
; X86-NEXT:  .LBB2_13: # %udiv-do-while
; X86-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    shldl $1, %eax, (%esp) # 4-byte Folded Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shldl $1, %eax, %edx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    shldl $1, %esi, %eax
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Reload
; X86-NEXT:    shldl $1, %ebx, %esi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shldl $1, %ecx, %ebx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    orl %ebp, %ebx
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    shldl $1, %edi, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Reload
; X86-NEXT:    shldl $1, %ebx, %edi
; X86-NEXT:    orl %ebp, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %ebp, %edi
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    addl %ebx, %ebx
; X86-NEXT:    orl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Folded Reload
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    cmpl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    sbbl %eax, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    sbbl %edx, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    sbbl (%esp), %ecx # 4-byte Folded Reload
; X86-NEXT:    sarl $31, %ecx
; X86-NEXT:    movl %ecx, %edi
; X86-NEXT:    andl $1, %edi
; X86-NEXT:    movl %edi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %ecx, %ebx
; X86-NEXT:    movl $-1, %ebp
; X86-NEXT:    andl %ebp, %ebx
; X86-NEXT:    movl %ecx, %ebp
; X86-NEXT:    movl $-5, %edi
; X86-NEXT:    andl %edi, %ebp
; X86-NEXT:    movl $-3, %edi
; X86-NEXT:    andl %edi, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    subl %ecx, %esi
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    sbbl %ebx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    sbbl %ebp, %edx
; X86-NEXT:    movl %edx, %eax
; X86-NEXT:    sbbl %ebx, (%esp) # 4-byte Folded Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Reload
; X86-NEXT:    addl $-1, %ebx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    adcl $-1, %ecx
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    adcl $-1, %ebp
; X86-NEXT:    adcl $-1, %edx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    movl %ebx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %ebp, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    orl %ebp, %ebx
; X86-NEXT:    orl %ecx, %ebx
; X86-NEXT:    jne .LBB2_13
; X86-NEXT:  # %bb.14:
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edi # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:  .LBB2_16: # %udiv-loop-exit
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    shldl $1, %edi, %ebp
; X86-NEXT:    orl %ecx, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %edx # 4-byte Reload
; X86-NEXT:    shldl $1, %edx, %edi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NEXT:    shldl $1, %esi, %edx
; X86-NEXT:    orl %ecx, %edi
; X86-NEXT:    orl %ecx, %edx
; X86-NEXT:    addl %esi, %esi
; X86-NEXT:    orl %eax, %esi
; X86-NEXT:  .LBB2_17: # %udiv-end
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %esi, (%eax)
; X86-NEXT:    movl %edx, 4(%eax)
; X86-NEXT:    movl %edi, 8(%eax)
; X86-NEXT:    movl %ebp, 12(%eax)
; X86-NEXT:    addl $132, %esp
; X86-NEXT:    popl %esi
; X86-NEXT:    popl %edi
; X86-NEXT:    popl %ebx
; X86-NEXT:    popl %ebp
; X86-NEXT:    retl $4
;
; X64-LABEL: test3:
; X64:       # %bb.0:
; X64-NEXT:    pushq %rax
; X64-NEXT:    movq $-3, %rdx
; X64-NEXT:    movq $-5, %rcx
; X64-NEXT:    callq __udivti3@PLT
; X64-NEXT:    popq %rcx
; X64-NEXT:    retq
; X86 doesn't have __divti3, so the urem is expanded into a loop.
  %tmp = udiv i128 %x, -73786976294838206467
  ret i128 %tmp
}

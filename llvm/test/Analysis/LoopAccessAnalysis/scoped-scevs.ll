; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes='print<access-info>,print<scalar-evolution>' -disable-output %s 2>&1 | FileCheck --check-prefixes=LAA,AFTER %s
; RUN: opt -passes='print<scalar-evolution>,print<access-info>,print<scalar-evolution>' -disable-output %s 2>&1 | FileCheck --check-prefixes=BEFORE,LAA,AFTER %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

declare void @use(ptr)

; Check that scoped expressions created by LAA do not interfere with non-scoped
; SCEVs with the same operands. The tests first run print<scalar-evolution> to
; populate the SCEV cache. They contain a GEP computing A+405, which is the end
; of the accessed range, before and/or after the loop. No nuw flags should be
; added to them in the second print<scalar-evolution> output.

define ptr @test_ptr_range_end_computed_before_and_after_loop(ptr %A) {
; BEFORE-LABEL: 'test_ptr_range_end_computed_before_and_after_loop'
; BEFORE-NEXT:  Classifying expressions for: @test_ptr_range_end_computed_before_and_after_loop
; BEFORE:        %x = getelementptr inbounds i8, ptr %A, i64 405
; BEFORE-NEXT:    --> (405 + %A) U: full-set S: full-set
; BEFORE:        %y = getelementptr inbounds i8, ptr %A, i64 405
; BEFORE-NEXT:    --> (405 + %A) U: full-set S: full-set
;
; LAA-LABEL: 'test_ptr_range_end_computed_before_and_after_loop'
; LAA-NEXT:    loop:
; LAA-NEXT:      Report: cannot check memory dependencies at runtime
; LAA-NEXT:      Dependences:
; LAA-NEXT:      Run-time memory checks:
; LAA-NEXT:      Grouped accesses:
; LAA-EMPTY:
; LAA-NEXT:      Non vectorizable stores to invariant address were not found in loop.
; LAA-NEXT:      SCEV assumptions:
; LAA-EMPTY:
; LAA-NEXT:      Expressions re-written:
;
; AFTER-LABEL: 'test_ptr_range_end_computed_before_and_after_loop'
; AFTER-NEXT:  Classifying expressions for: @test_ptr_range_end_computed_before_and_after_loop
; AFTER:        %x = getelementptr inbounds i8, ptr %A, i64 405
; AFTER-NEXT:    --> (405 + %A) U: full-set S: full-set
; AFTER:        %y = getelementptr inbounds i8, ptr %A, i64 405
; AFTER-NEXT:    --> (405 + %A) U: full-set S: full-set
entry:
  %A.1 = getelementptr inbounds i8, ptr %A, i64 1
  %x = getelementptr inbounds i8, ptr %A, i64 405
  call void @use(ptr %x)
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep.A.400 = getelementptr inbounds i32, ptr %A.1, i64 %iv
  %gep.A = getelementptr inbounds i8, ptr %A, i64 %iv
  %l = load i8, ptr %gep.A, align 1
  %ext = zext i8 %l to i32
  store i32 %ext, ptr %gep.A.400, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %ec = icmp eq i64 %iv, 100
  br i1 %ec, label %exit, label %loop

exit:
  %y = getelementptr inbounds i8, ptr %A, i64 405
  ret ptr %y
}

define void @test_ptr_range_end_computed_before_loop(ptr %A) {
; BEFORE-LABEL: 'test_ptr_range_end_computed_before_loop'
; BEFORE-NEXT:  Classifying expressions for: @test_ptr_range_end_computed_before_loop
; BEFORE-NEXT:    %A.1 = getelementptr inbounds i8, ptr %A, i64 1
; BEFORE-NEXT:    --> (1 + %A) U: full-set S: full-set
; BEFORE-NEXT:    %x = getelementptr inbounds i8, ptr %A, i64 405
;
; LAA-LABEL: 'test_ptr_range_end_computed_before_loop'
; LAA-NEXT:    loop:
; LAA-NEXT:      Report: cannot check memory dependencies at runtime
; LAA-NEXT:      Dependences:
; LAA-NEXT:      Run-time memory checks:
; LAA-NEXT:      Grouped accesses:
; LAA-EMPTY:
; LAA-NEXT:      Non vectorizable stores to invariant address were not found in loop.
; LAA-NEXT:      SCEV assumptions:
; LAA-EMPTY:
; LAA-NEXT:      Expressions re-written:
;
; AFTER-LABEL:  Classifying expressions for: @test_ptr_range_end_computed_before_loop
; AFTER-NEXT:    %A.1 = getelementptr inbounds i8, ptr %A, i64 1
; AFTER-NEXT:    --> (1 + %A) U: full-set S: full-set
; AFTER-NEXT:    %x = getelementptr inbounds i8, ptr %A, i64 405
;
entry:
  %A.1 = getelementptr inbounds i8, ptr %A, i64 1
  %x = getelementptr inbounds i8, ptr %A, i64 405
  call void @use(ptr %x)
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep.A.400 = getelementptr inbounds i32, ptr %A.1, i64 %iv
  %gep.A = getelementptr inbounds i8, ptr %A, i64 %iv
  %l = load i8, ptr %gep.A, align 1
  %ext = zext i8 %l to i32
  store i32 %ext, ptr %gep.A.400, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %ec = icmp eq i64 %iv, 100
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}

define ptr @test_ptr_range_end_computed_after_loop(ptr %A) {
; BEFORE-LABEL: 'test_ptr_range_end_computed_after_loop'
; BEFORE-NEXT:  Classifying expressions for: @test_ptr_range_end_computed_after_loop
; BEFORE:         %y = getelementptr inbounds i8, ptr %A, i64 405
; BEFORE-NEXT:    --> (405 + %A) U: full-set S: full-set
;
; LAA-LABEL: 'test_ptr_range_end_computed_after_loop'
; LAA-NEXT:    loop:
; LAA-NEXT:      Report: cannot check memory dependencies at runtime
; LAA-NEXT:      Dependences:
; LAA-NEXT:      Run-time memory checks:
; LAA-NEXT:      Grouped accesses:
; LAA-EMPTY:
; LAA-NEXT:      Non vectorizable stores to invariant address were not found in loop.
; LAA-NEXT:      SCEV assumptions:
; LAA-EMPTY:
; LAA-NEXT:      Expressions re-written:
;
; AFTER-LABEL: 'test_ptr_range_end_computed_after_loop'
; AFTER-NEXT:  Classifying expressions for: @test_ptr_range_end_computed_after_loop
; AFTER:         %y = getelementptr inbounds i8, ptr %A, i64 405
; AFTER-NEXT:    --> (405 + %A) U: full-set S: full-set
;
entry:
  %A.1 = getelementptr inbounds i8, ptr %A, i64 1
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep.A.400 = getelementptr inbounds i32, ptr %A.1, i64 %iv
  %gep.A = getelementptr inbounds i8, ptr %A, i64 %iv
  %l = load i8, ptr %gep.A, align 1
  %ext = zext i8 %l to i32
  store i32 %ext, ptr %gep.A.400, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %ec = icmp eq i64 %iv, 100
  br i1 %ec, label %exit, label %loop

exit:
  %y = getelementptr inbounds i8, ptr %A, i64 405
  ret ptr %y
}

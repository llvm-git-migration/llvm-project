; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes='print<access-info>' -disable-output %s 2>&1 | FileCheck %s

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

declare void @llvm.assume(i1)

; FIXME: Currently we check all accesses to the same underlying objects, but
; it is sufficient to check the accesses to %A.
define void @test_dependence_with_non_constant_offset_and_other_accesses_to_noalias_pointers(ptr %A, ptr noalias %B, i64 %off) {
; CHECK-LABEL: 'test_dependence_with_non_constant_offset_and_other_accesses_to_noalias_pointers'
; CHECK-NEXT:    loop:
; CHECK-NEXT:      Report: cannot check memory dependencies at runtime
; CHECK-NEXT:      Dependences:
; CHECK-NEXT:      Run-time memory checks:
; CHECK-NEXT:      Grouped accesses:
; CHECK-EMPTY:
; CHECK-NEXT:      Non vectorizable stores to invariant address were not found in loop.
; CHECK-NEXT:      SCEV assumptions:
; CHECK-EMPTY:
; CHECK-NEXT:      Expressions re-written:
;
entry:
  %c = icmp sgt i64 %off, 0
  call void @llvm.assume(i1 %c)
  %A.off = getelementptr inbounds i8, ptr %A, i64 %off
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep.A.400 = getelementptr inbounds i32, ptr %A.off, i64 %iv
  %gep.A = getelementptr inbounds i8, ptr %A, i64 %iv
  %l = load i8, ptr %gep.A, align 1
  %ext = zext i8 %l to i32
  store i32 %ext, ptr %gep.A.400, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %gep.B.1 = getelementptr inbounds i8, ptr %B, i64 %iv.next
  %l.2 = load i8, ptr %gep.B.1
  %gep.B = getelementptr inbounds i8, ptr %B, i64 %iv
  store i8 %l.2, ptr %gep.B
  %ec = icmp eq i64 %iv, 100
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}

define void @test_dependence_with_non_constant_offset_and_other_accesses_to_mayalias_pointers(ptr %A, ptr %B, i64 %off) {
; CHECK-LABEL: 'test_dependence_with_non_constant_offset_and_other_accesses_to_mayalias_pointers'
; CHECK-NEXT:    loop:
; CHECK-NEXT:      Report: cannot check memory dependencies at runtime
; CHECK-NEXT:      Dependences:
; CHECK-NEXT:      Run-time memory checks:
; CHECK-NEXT:      Grouped accesses:
; CHECK-EMPTY:
; CHECK-NEXT:      Non vectorizable stores to invariant address were not found in loop.
; CHECK-NEXT:      SCEV assumptions:
; CHECK-EMPTY:
; CHECK-NEXT:      Expressions re-written:
;
entry:
  %c = icmp sgt i64 %off, 0
  call void @llvm.assume(i1 %c)
  %A.off = getelementptr inbounds i8, ptr %A, i64 %off
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep.A.400 = getelementptr inbounds i32, ptr %A.off, i64 %iv
  %gep.A = getelementptr inbounds i8, ptr %A, i64 %iv
  %l = load i8, ptr %gep.A, align 1
  %ext = zext i8 %l to i32
  store i32 %ext, ptr %gep.A.400, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %gep.B.1 = getelementptr inbounds i8, ptr %B, i64 %iv.next
  %l.2 = load i8, ptr %gep.B.1
  %gep.B = getelementptr inbounds i8, ptr %B, i64 %iv
  store i8 %l.2, ptr %gep.B
  %ec = icmp eq i64 %iv, 100
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}

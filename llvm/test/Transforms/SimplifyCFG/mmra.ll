; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S %s | FileCheck %s

; TODO: Should this work?
define i32 @test1(i1 zeroext %flag, i32 %x, ptr %y) {
; CHECK-LABEL: define i32 @test1(
; CHECK-SAME: i1 zeroext [[FLAG:%.*]], i32 [[X:%.*]], ptr [[Y:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 [[FLAG]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[Z:%.*]] = load volatile i32, ptr [[Y]], align 4
; CHECK-NEXT:    [[A:%.*]] = add i32 [[Z]], 5
; CHECK-NEXT:    store volatile i32 [[A]], ptr [[Y]], align 4, !mmra [[META0:![0-9]+]]
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    [[W:%.*]] = load volatile i32, ptr [[Y]], align 4
; CHECK-NEXT:    [[B:%.*]] = add i32 [[W]], 7
; CHECK-NEXT:    store volatile i32 [[B]], ptr [[Y]], align 4, !mmra [[META3:![0-9]+]]
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret i32 1
;
entry:
  br i1 %flag, label %if.then, label %if.else

if.then:
  %z = load volatile i32, ptr %y
  %a = add i32 %z, 5
  store volatile i32 %a, ptr %y, !mmra !3
  br label %if.end

if.else:
  %w = load volatile i32, ptr %y
  %b = add i32 %w, 7
  store volatile i32 %b, ptr %y, !mmra !4
  br label %if.end

if.end:
  ret i32 1
}

!0 = !{!"foo", !"bar"}
!1 = !{!"foo", !"bux"}
!2 = !{!"bar", !"baz"}
!3 = !{!0, !1}
!4 = !{!1, !2}
;.
; CHECK: [[META0]] = !{[[META1:![0-9]+]], [[META2:![0-9]+]]}
; CHECK: [[META1]] = !{!"foo", !"bar"}
; CHECK: [[META2]] = !{!"foo", !"bux"}
; CHECK: [[META3]] = !{[[META2]], [[META4:![0-9]+]]}
; CHECK: [[META4]] = !{!"bar", !"baz"}
;.

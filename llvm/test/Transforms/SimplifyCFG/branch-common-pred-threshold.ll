; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=simplifycfg -simplifycfg-uncondbr-max-num-preds-threshold=3 -S | FileCheck %s

; This test checks that we don't optimize the edge from Pred -> BB to Pred -> Succ when
; the number of predecessors of Succ is greater than the threshold.

define i8 @succ_has_3_preds(i8 noundef %arg, i1 %c1, i1 %c2) {
; CHECK-LABEL: @succ_has_3_preds(
; CHECK-NEXT:  Pred:
; CHECK-NEXT:    call void @dummy()
; CHECK-NEXT:    br i1 [[C1:%.*]], label [[COMMONPRED:%.*]], label [[EXTRA_BB:%.*]]
; CHECK:       extra_bb:
; CHECK-NEXT:    br label [[SUCC:%.*]]
; CHECK:       CommonPred:
; CHECK-NEXT:    call void @dummy()
; CHECK-NEXT:    br i1 [[C2:%.*]], label [[SUCC]], label [[BB:%.*]]
; CHECK:       BB:
; CHECK-NEXT:    [[PHI1:%.*]] = phi i8 [ 1, [[COMMONPRED]] ]
; CHECK-NEXT:    br label [[SUCC]]
; CHECK:       Succ:
; CHECK-NEXT:    [[PHI2:%.*]] = phi i8 [ [[PHI1]], [[BB]] ], [ 4, [[COMMONPRED]] ], [ 0, [[EXTRA_BB]] ]
; CHECK-NEXT:    ret i8 [[PHI2]]
;
Pred:
call void @dummy()
  br i1 %c1, label %CommonPred, label %extra_bb

extra_bb:
  br i1 %c1, label %CommonPred, label %Succ

CommonPred:
call void @dummy()
  br i1 %c2, label %Succ, label %BB

BB:
  %phi1 = phi i8 [1, %CommonPred]
  br label %Succ

Succ:
  %phi2 = phi i8 [ %phi1, %BB ], [ 4, %CommonPred ], [0, %extra_bb]
  ret i8 %phi2
}

declare void @dummy()

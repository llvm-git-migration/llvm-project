; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals
; RUN: opt < %s -passes=simplifycfg -switch-to-lookup=true -keep-loops=false -S -mtriple=x86_64-unknown-linux-gnu | FileCheck %s
; RUN: opt < %s -passes='simplifycfg<no-keep-loops;switch-to-lookup>' -S -mtriple=x86_64-unknown-linux-gnu | FileCheck %s
target datalayout = "e-p:64:64:64-i1:8:8-i32:8:8-i16:16:16-i32:32:32-i32:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

;.
; CHECK: @switch.table.reachable_default_dense_0to63 = private unnamed_addr constant [64 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1], align 8
; CHECK: @switch.table.unreachable_default_dense_0to63 = private unnamed_addr constant [64 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1], align 8
; CHECK: @switch.table.reachable_default_holes_0to63 = private unnamed_addr constant [64 x i32] [i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 1], align 8
; CHECK: @switch.table.unreachable_default_holes_0to63 = private unnamed_addr constant [64 x i32] [i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 1], align 8
; CHECK: @switch.table.reachable_default_dense_0to64 = private unnamed_addr constant [65 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 8
; CHECK: @switch.table.unreachable_default_dense_0to64 = private unnamed_addr constant [65 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 8
; CHECK: @switch.table.unreachable_default_holes_0to64 = private unnamed_addr constant [65 x i32] [i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0], align 8
; CHECK: @switch.table.reachable_default_dense_0to130 = private unnamed_addr constant [131 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6], align 8
; CHECK: @switch.table.unreachable_default_dense_0to130 = private unnamed_addr constant [131 x i32] [i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6], align 8
; CHECK: @switch.table.unreachable_default_holes_0to130 = private unnamed_addr constant [131 x i32] [i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6, i32 0, i32 4, i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 0, i32 2, i32 1, i32 0, i32 7, i32 0, i32 5, i32 4, i32 3, i32 2, i32 0, i32 0, i32 7, i32 6, i32 5, i32 0, i32 3, i32 2, i32 1, i32 0, i32 0, i32 6, i32 5, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0, i32 6, i32 0, i32 4, i32 3, i32 0, i32 1, i32 0, i32 7, i32 6], align 8
;.

; A dense switch with a reachable default case should be optimized into a lookup table with a bounds check
define i32 @reachable_default_dense_0to63(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_dense_0to63(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %0 = icmp ult i32 %x, 64
; CHECK-NEXT:    br i1 %0, label %switch.lookup, label %return
; CHECK:       switch.lookup:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [64 x i32], ptr @switch.table.reachable_default_dense_0to63, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ %switch.load, %switch.lookup ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A dense switch with an unreachable default case should be optimized into a lookup table without bounds checks
define i32 @unreachable_default_dense_0to63(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_dense_0to63(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [64 x i32], ptr @switch.table.unreachable_default_dense_0to63, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with a reachable default case should be optimized into a lookup table with a bounds check and a mask
define i32 @reachable_default_holes_0to63(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_holes_0to63(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %0 = icmp ult i32 %x, 64
; CHECK-NEXT:    br i1 %0, label %switch.hole_check, label %return
; CHECK:       switch.hole_check:
; CHECK-NEXT:    %switch.maskindex = zext i32 %x to i64
; CHECK-NEXT:    %switch.shifted = lshr i64 -297528130221121801, %switch.maskindex
; CHECK-NEXT:    %switch.lobit = trunc i64 %switch.shifted to i1
; CHECK-NEXT:    br i1 %switch.lobit, label %switch.lookup, label %return
; CHECK:       switch.lookup:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [64 x i32], ptr @switch.table.reachable_default_holes_0to63, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ %switch.load, %switch.lookup ], [ %y, %switch.hole_check ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with an unreachable default case should be optimized into a lookup table without bounds checks
define i32 @unreachable_default_holes_0to63(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_holes_0to63(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [64 x i32], ptr @switch.table.unreachable_default_holes_0to63, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A dense switch with a reachable default case should be optimized into a lookup table with a bounds check
define i32 @reachable_default_dense_0to64(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_dense_0to64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %0 = icmp ult i32 %x, 65
; CHECK-NEXT:    br i1 %0, label %switch.lookup, label %return
; CHECK:       switch.lookup:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [65 x i32], ptr @switch.table.reachable_default_dense_0to64, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ %switch.load, %switch.lookup ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  i32 64, label %bb0
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A dense switch with an unreachable default case should be optimized into a lookup table without bounds checks
define i32 @unreachable_default_dense_0to64(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_dense_0to64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [65 x i32], ptr @switch.table.unreachable_default_dense_0to64, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  i32 64, label %bb0
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with a reachable default case which would be optimized into a lookup table with a bounds check and a mask, but doesn't because
; it would require a 65-bit mask
define i32 @reachable_default_holes_0to64(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_holes_0to64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    switch i32 %x, label %return [
; CHECK-NEXT:      i32 0, label %bb0
; CHECK-NEXT:      i32 1, label %bb7
; CHECK-NEXT:      i32 2, label %bb6
; CHECK-NEXT:      i32 4, label %bb4
; CHECK-NEXT:      i32 5, label %bb3
; CHECK-NEXT:      i32 6, label %bb2
; CHECK-NEXT:      i32 7, label %bb1
; CHECK-NEXT:      i32 9, label %bb7
; CHECK-NEXT:      i32 10, label %bb6
; CHECK-NEXT:      i32 11, label %bb5
; CHECK-NEXT:      i32 12, label %bb4
; CHECK-NEXT:      i32 14, label %bb2
; CHECK-NEXT:      i32 15, label %bb1
; CHECK-NEXT:      i32 16, label %bb0
; CHECK-NEXT:      i32 17, label %bb7
; CHECK-NEXT:      i32 19, label %bb5
; CHECK-NEXT:      i32 20, label %bb4
; CHECK-NEXT:      i32 21, label %bb3
; CHECK-NEXT:      i32 22, label %bb2
; CHECK-NEXT:      i32 24, label %bb0
; CHECK-NEXT:      i32 25, label %bb7
; CHECK-NEXT:      i32 26, label %bb6
; CHECK-NEXT:      i32 27, label %bb5
; CHECK-NEXT:      i32 29, label %bb3
; CHECK-NEXT:      i32 30, label %bb2
; CHECK-NEXT:      i32 31, label %bb1
; CHECK-NEXT:      i32 32, label %bb0
; CHECK-NEXT:      i32 34, label %bb6
; CHECK-NEXT:      i32 35, label %bb5
; CHECK-NEXT:      i32 36, label %bb4
; CHECK-NEXT:      i32 37, label %bb3
; CHECK-NEXT:      i32 39, label %bb1
; CHECK-NEXT:      i32 40, label %bb0
; CHECK-NEXT:      i32 41, label %bb7
; CHECK-NEXT:      i32 42, label %bb6
; CHECK-NEXT:      i32 44, label %bb4
; CHECK-NEXT:      i32 45, label %bb3
; CHECK-NEXT:      i32 46, label %bb2
; CHECK-NEXT:      i32 47, label %bb1
; CHECK-NEXT:      i32 49, label %bb7
; CHECK-NEXT:      i32 50, label %bb6
; CHECK-NEXT:      i32 51, label %bb5
; CHECK-NEXT:      i32 52, label %bb4
; CHECK-NEXT:      i32 54, label %bb2
; CHECK-NEXT:      i32 55, label %bb1
; CHECK-NEXT:      i32 56, label %bb0
; CHECK-NEXT:      i32 57, label %bb7
; CHECK-NEXT:      i32 59, label %bb5
; CHECK-NEXT:      i32 60, label %bb4
; CHECK-NEXT:      i32 61, label %bb3
; CHECK-NEXT:      i32 62, label %bb2
; CHECK-NEXT:      i32 64, label %bb0
; CHECK-NEXT:    ]
; CHECK:       bb0:
; CHECK-NEXT:    br label %return
; CHECK:       bb1:
; CHECK-NEXT:    br label %return
; CHECK:       bb2:
; CHECK-NEXT:    br label %return
; CHECK:       bb3:
; CHECK-NEXT:    br label %return
; CHECK:       bb4:
; CHECK-NEXT:    br label %return
; CHECK:       bb5:
; CHECK-NEXT:    br label %return
; CHECK:       bb6:
; CHECK-NEXT:    br label %return
; CHECK:       bb7:
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 64, label %bb0
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with an unreachable default case which can be optimized into a lookup table without bounds checks. Because the default case is
; unreachable, the fact that a 65-bit mask would be required doesn't prevent lookup table optimization.
define i32 @unreachable_default_holes_0to64(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_holes_0to64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [65 x i32], ptr @switch.table.unreachable_default_holes_0to64, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 64, label %bb0
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A dense switch with a reachable default case should be optimized into a lookup table with a bounds check
define i32 @reachable_default_dense_0to130(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_dense_0to130(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %0 = icmp ult i32 %x, 131
; CHECK-NEXT:    br i1 %0, label %switch.lookup, label %return
; CHECK:       switch.lookup:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [131 x i32], ptr @switch.table.reachable_default_dense_0to130, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ %switch.load, %switch.lookup ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  i32 64, label %bb0
  i32 65, label %bb7
  i32 66, label %bb6
  i32 67, label %bb5
  i32 68, label %bb4
  i32 69, label %bb3
  i32 70, label %bb2
  i32 71, label %bb1
  i32 72, label %bb0
  i32 73, label %bb7
  i32 74, label %bb6
  i32 75, label %bb5
  i32 76, label %bb4
  i32 77, label %bb3
  i32 78, label %bb2
  i32 79, label %bb1
  i32 80, label %bb0
  i32 81, label %bb7
  i32 82, label %bb6
  i32 83, label %bb5
  i32 84, label %bb4
  i32 85, label %bb3
  i32 86, label %bb2
  i32 87, label %bb1
  i32 88, label %bb0
  i32 89, label %bb7
  i32 90, label %bb6
  i32 91, label %bb5
  i32 92, label %bb4
  i32 93, label %bb3
  i32 94, label %bb2
  i32 95, label %bb1
  i32 96, label %bb0
  i32 97, label %bb7
  i32 98, label %bb6
  i32 99, label %bb5
  i32 100, label %bb4
  i32 101, label %bb3
  i32 102, label %bb2
  i32 103, label %bb1
  i32 104, label %bb0
  i32 105, label %bb7
  i32 106, label %bb6
  i32 107, label %bb5
  i32 108, label %bb4
  i32 109, label %bb3
  i32 110, label %bb2
  i32 111, label %bb1
  i32 112, label %bb0
  i32 113, label %bb7
  i32 114, label %bb6
  i32 115, label %bb5
  i32 116, label %bb4
  i32 117, label %bb3
  i32 118, label %bb2
  i32 119, label %bb1
  i32 120, label %bb0
  i32 121, label %bb7
  i32 122, label %bb6
  i32 123, label %bb5
  i32 124, label %bb4
  i32 125, label %bb3
  i32 126, label %bb2
  i32 127, label %bb1
  i32 128, label %bb0
  i32 129, label %bb7
  i32 130, label %bb6
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A dense switch with an unreachable default case should be optimized into a lookup table without bounds checks
define i32 @unreachable_default_dense_0to130(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_dense_0to130(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [131 x i32], ptr @switch.table.unreachable_default_dense_0to130, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 3, label %bb5
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 8, label %bb0
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 13, label %bb3
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 18, label %bb6
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 23, label %bb1
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 28, label %bb4
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 33, label %bb7
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 38, label %bb2
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 43, label %bb5
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 48, label %bb0
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 53, label %bb3
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 58, label %bb6
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 63, label %bb1
  i32 64, label %bb0
  i32 65, label %bb7
  i32 66, label %bb6
  i32 67, label %bb5
  i32 68, label %bb4
  i32 69, label %bb3
  i32 70, label %bb2
  i32 71, label %bb1
  i32 72, label %bb0
  i32 73, label %bb7
  i32 74, label %bb6
  i32 75, label %bb5
  i32 76, label %bb4
  i32 77, label %bb3
  i32 78, label %bb2
  i32 79, label %bb1
  i32 80, label %bb0
  i32 81, label %bb7
  i32 82, label %bb6
  i32 83, label %bb5
  i32 84, label %bb4
  i32 85, label %bb3
  i32 86, label %bb2
  i32 87, label %bb1
  i32 88, label %bb0
  i32 89, label %bb7
  i32 90, label %bb6
  i32 91, label %bb5
  i32 92, label %bb4
  i32 93, label %bb3
  i32 94, label %bb2
  i32 95, label %bb1
  i32 96, label %bb0
  i32 97, label %bb7
  i32 98, label %bb6
  i32 99, label %bb5
  i32 100, label %bb4
  i32 101, label %bb3
  i32 102, label %bb2
  i32 103, label %bb1
  i32 104, label %bb0
  i32 105, label %bb7
  i32 106, label %bb6
  i32 107, label %bb5
  i32 108, label %bb4
  i32 109, label %bb3
  i32 110, label %bb2
  i32 111, label %bb1
  i32 112, label %bb0
  i32 113, label %bb7
  i32 114, label %bb6
  i32 115, label %bb5
  i32 116, label %bb4
  i32 117, label %bb3
  i32 118, label %bb2
  i32 119, label %bb1
  i32 120, label %bb0
  i32 121, label %bb7
  i32 122, label %bb6
  i32 123, label %bb5
  i32 124, label %bb4
  i32 125, label %bb3
  i32 126, label %bb2
  i32 127, label %bb1
  i32 128, label %bb0
  i32 129, label %bb7
  i32 130, label %bb6
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with a reachable default case which would be optimized into a lookup table with a bounds check and a mask, but doesn't because
; it would require a 131-bit mask
define i32 @reachable_default_holes_0to130(i32 %x, i32 %y) {
; CHECK-LABEL: @reachable_default_holes_0to130(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    switch i32 %x, label %return [
; CHECK-NEXT:      i32 0, label %bb0
; CHECK-NEXT:      i32 1, label %bb7
; CHECK-NEXT:      i32 2, label %bb6
; CHECK-NEXT:      i32 4, label %bb4
; CHECK-NEXT:      i32 5, label %bb3
; CHECK-NEXT:      i32 6, label %bb2
; CHECK-NEXT:      i32 7, label %bb1
; CHECK-NEXT:      i32 9, label %bb7
; CHECK-NEXT:      i32 10, label %bb6
; CHECK-NEXT:      i32 11, label %bb5
; CHECK-NEXT:      i32 12, label %bb4
; CHECK-NEXT:      i32 14, label %bb2
; CHECK-NEXT:      i32 15, label %bb1
; CHECK-NEXT:      i32 16, label %bb0
; CHECK-NEXT:      i32 17, label %bb7
; CHECK-NEXT:      i32 19, label %bb5
; CHECK-NEXT:      i32 20, label %bb4
; CHECK-NEXT:      i32 21, label %bb3
; CHECK-NEXT:      i32 22, label %bb2
; CHECK-NEXT:      i32 24, label %bb0
; CHECK-NEXT:      i32 25, label %bb7
; CHECK-NEXT:      i32 26, label %bb6
; CHECK-NEXT:      i32 27, label %bb5
; CHECK-NEXT:      i32 29, label %bb3
; CHECK-NEXT:      i32 30, label %bb2
; CHECK-NEXT:      i32 31, label %bb1
; CHECK-NEXT:      i32 32, label %bb0
; CHECK-NEXT:      i32 34, label %bb6
; CHECK-NEXT:      i32 35, label %bb5
; CHECK-NEXT:      i32 36, label %bb4
; CHECK-NEXT:      i32 37, label %bb3
; CHECK-NEXT:      i32 39, label %bb1
; CHECK-NEXT:      i32 40, label %bb0
; CHECK-NEXT:      i32 41, label %bb7
; CHECK-NEXT:      i32 42, label %bb6
; CHECK-NEXT:      i32 44, label %bb4
; CHECK-NEXT:      i32 45, label %bb3
; CHECK-NEXT:      i32 46, label %bb2
; CHECK-NEXT:      i32 47, label %bb1
; CHECK-NEXT:      i32 49, label %bb7
; CHECK-NEXT:      i32 50, label %bb6
; CHECK-NEXT:      i32 51, label %bb5
; CHECK-NEXT:      i32 52, label %bb4
; CHECK-NEXT:      i32 54, label %bb2
; CHECK-NEXT:      i32 55, label %bb1
; CHECK-NEXT:      i32 56, label %bb0
; CHECK-NEXT:      i32 57, label %bb7
; CHECK-NEXT:      i32 59, label %bb5
; CHECK-NEXT:      i32 60, label %bb4
; CHECK-NEXT:      i32 61, label %bb3
; CHECK-NEXT:      i32 62, label %bb2
; CHECK-NEXT:      i32 64, label %bb0
; CHECK-NEXT:      i32 65, label %bb7
; CHECK-NEXT:      i32 66, label %bb6
; CHECK-NEXT:      i32 67, label %bb5
; CHECK-NEXT:      i32 69, label %bb3
; CHECK-NEXT:      i32 70, label %bb2
; CHECK-NEXT:      i32 71, label %bb1
; CHECK-NEXT:      i32 72, label %bb0
; CHECK-NEXT:      i32 74, label %bb6
; CHECK-NEXT:      i32 75, label %bb5
; CHECK-NEXT:      i32 76, label %bb4
; CHECK-NEXT:      i32 77, label %bb3
; CHECK-NEXT:      i32 79, label %bb1
; CHECK-NEXT:      i32 80, label %bb0
; CHECK-NEXT:      i32 81, label %bb7
; CHECK-NEXT:      i32 82, label %bb6
; CHECK-NEXT:      i32 84, label %bb4
; CHECK-NEXT:      i32 85, label %bb3
; CHECK-NEXT:      i32 86, label %bb2
; CHECK-NEXT:      i32 87, label %bb1
; CHECK-NEXT:      i32 89, label %bb7
; CHECK-NEXT:      i32 90, label %bb6
; CHECK-NEXT:      i32 91, label %bb5
; CHECK-NEXT:      i32 92, label %bb4
; CHECK-NEXT:      i32 94, label %bb2
; CHECK-NEXT:      i32 95, label %bb1
; CHECK-NEXT:      i32 97, label %bb7
; CHECK-NEXT:      i32 99, label %bb5
; CHECK-NEXT:      i32 100, label %bb4
; CHECK-NEXT:      i32 101, label %bb3
; CHECK-NEXT:      i32 102, label %bb2
; CHECK-NEXT:      i32 104, label %bb0
; CHECK-NEXT:      i32 105, label %bb7
; CHECK-NEXT:      i32 106, label %bb6
; CHECK-NEXT:      i32 107, label %bb5
; CHECK-NEXT:      i32 109, label %bb3
; CHECK-NEXT:      i32 110, label %bb2
; CHECK-NEXT:      i32 111, label %bb1
; CHECK-NEXT:      i32 112, label %bb0
; CHECK-NEXT:      i32 114, label %bb6
; CHECK-NEXT:      i32 115, label %bb5
; CHECK-NEXT:      i32 117, label %bb3
; CHECK-NEXT:      i32 119, label %bb1
; CHECK-NEXT:      i32 120, label %bb0
; CHECK-NEXT:      i32 122, label %bb6
; CHECK-NEXT:      i32 124, label %bb4
; CHECK-NEXT:      i32 125, label %bb3
; CHECK-NEXT:      i32 127, label %bb1
; CHECK-NEXT:      i32 129, label %bb7
; CHECK-NEXT:      i32 130, label %bb6
; CHECK-NEXT:    ]
; CHECK:       bb0:
; CHECK-NEXT:    br label %return
; CHECK:       bb1:
; CHECK-NEXT:    br label %return
; CHECK:       bb2:
; CHECK-NEXT:    br label %return
; CHECK:       bb3:
; CHECK-NEXT:    br label %return
; CHECK:       bb4:
; CHECK-NEXT:    br label %return
; CHECK:       bb5:
; CHECK-NEXT:    br label %return
; CHECK:       bb6:
; CHECK-NEXT:    br label %return
; CHECK:       bb7:
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ], [ %y, %entry ]
; CHECK-NEXT:    ret i32 %res
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 64, label %bb0
  i32 65, label %bb7
  i32 66, label %bb6
  i32 67, label %bb5
  i32 69, label %bb3
  i32 70, label %bb2
  i32 71, label %bb1
  i32 72, label %bb0
  i32 74, label %bb6
  i32 75, label %bb5
  i32 76, label %bb4
  i32 77, label %bb3
  i32 79, label %bb1
  i32 80, label %bb0
  i32 81, label %bb7
  i32 82, label %bb6
  i32 84, label %bb4
  i32 85, label %bb3
  i32 86, label %bb2
  i32 87, label %bb1
  i32 89, label %bb7
  i32 90, label %bb6
  i32 91, label %bb5
  i32 92, label %bb4
  i32 94, label %bb2
  i32 95, label %bb1
  i32 97, label %bb7
  i32 99, label %bb5
  i32 100, label %bb4
  i32 101, label %bb3
  i32 102, label %bb2
  i32 104, label %bb0
  i32 105, label %bb7
  i32 106, label %bb6
  i32 107, label %bb5
  i32 109, label %bb3
  i32 110, label %bb2
  i32 111, label %bb1
  i32 112, label %bb0
  i32 114, label %bb6
  i32 115, label %bb5
  i32 117, label %bb3
  i32 119, label %bb1
  i32 120, label %bb0
  i32 122, label %bb6
  i32 124, label %bb4
  i32 125, label %bb3
  i32 127, label %bb1
  i32 129, label %bb7
  i32 130, label %bb6
  ]

sw.default: br label %return
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ %y, %sw.default ], [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

; A sparse switch with an unreachable default case which can be optimized into a lookup table without bounds checks. Because the default case is
; unreachable, the fact that a 131-bit mask would be required doesn't prevent lookup table optimization.
define i32 @unreachable_default_holes_0to130(i32 %x, i32 %y) {
; CHECK-LABEL: @unreachable_default_holes_0to130(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %switch.gep = getelementptr inbounds [131 x i32], ptr @switch.table.unreachable_default_holes_0to130, i32 0, i32 %x
; CHECK-NEXT:    %switch.load = load i32, ptr %switch.gep, align 8
; CHECK-NEXT:    ret i32 %switch.load
;
entry:
  switch i32 %x, label %sw.default [
  i32 0, label %bb0
  i32 1, label %bb7
  i32 2, label %bb6
  i32 4, label %bb4
  i32 5, label %bb3
  i32 6, label %bb2
  i32 7, label %bb1
  i32 9, label %bb7
  i32 10, label %bb6
  i32 11, label %bb5
  i32 12, label %bb4
  i32 14, label %bb2
  i32 15, label %bb1
  i32 16, label %bb0
  i32 17, label %bb7
  i32 19, label %bb5
  i32 20, label %bb4
  i32 21, label %bb3
  i32 22, label %bb2
  i32 24, label %bb0
  i32 25, label %bb7
  i32 26, label %bb6
  i32 27, label %bb5
  i32 29, label %bb3
  i32 30, label %bb2
  i32 31, label %bb1
  i32 32, label %bb0
  i32 34, label %bb6
  i32 35, label %bb5
  i32 36, label %bb4
  i32 37, label %bb3
  i32 39, label %bb1
  i32 40, label %bb0
  i32 41, label %bb7
  i32 42, label %bb6
  i32 44, label %bb4
  i32 45, label %bb3
  i32 46, label %bb2
  i32 47, label %bb1
  i32 49, label %bb7
  i32 50, label %bb6
  i32 51, label %bb5
  i32 52, label %bb4
  i32 54, label %bb2
  i32 55, label %bb1
  i32 56, label %bb0
  i32 57, label %bb7
  i32 59, label %bb5
  i32 60, label %bb4
  i32 61, label %bb3
  i32 62, label %bb2
  i32 64, label %bb0
  i32 65, label %bb7
  i32 66, label %bb6
  i32 67, label %bb5
  i32 69, label %bb3
  i32 70, label %bb2
  i32 71, label %bb1
  i32 72, label %bb0
  i32 74, label %bb6
  i32 75, label %bb5
  i32 76, label %bb4
  i32 77, label %bb3
  i32 79, label %bb1
  i32 80, label %bb0
  i32 81, label %bb7
  i32 82, label %bb6
  i32 84, label %bb4
  i32 85, label %bb3
  i32 86, label %bb2
  i32 87, label %bb1
  i32 89, label %bb7
  i32 90, label %bb6
  i32 91, label %bb5
  i32 92, label %bb4
  i32 94, label %bb2
  i32 95, label %bb1
  i32 97, label %bb7
  i32 99, label %bb5
  i32 100, label %bb4
  i32 101, label %bb3
  i32 102, label %bb2
  i32 104, label %bb0
  i32 105, label %bb7
  i32 106, label %bb6
  i32 107, label %bb5
  i32 109, label %bb3
  i32 110, label %bb2
  i32 111, label %bb1
  i32 112, label %bb0
  i32 114, label %bb6
  i32 115, label %bb5
  i32 117, label %bb3
  i32 119, label %bb1
  i32 120, label %bb0
  i32 122, label %bb6
  i32 124, label %bb4
  i32 125, label %bb3
  i32 127, label %bb1
  i32 129, label %bb7
  i32 130, label %bb6
  ]

sw.default: unreachable
bb0: br label %return
bb1: br label %return
bb2: br label %return
bb3: br label %return
bb4: br label %return
bb5: br label %return
bb6: br label %return
bb7: br label %return

return:
  %res = phi i32 [ 0, %bb0 ], [ 1, %bb1 ], [ 2, %bb2 ], [ 3, %bb3 ], [ 4, %bb4 ], [ 5, %bb5 ], [ 6, %bb6 ], [ 7, %bb7 ]
  ret i32 %res

}

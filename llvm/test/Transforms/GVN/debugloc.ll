; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=gvn -S | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

@g = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind uwtable
define void @foo(i32 %x, i32 %y, i32 %z) local_unnamed_addr #0 !dbg !4 {
; CHECK-LABEL: define void @foo(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i32 [[Z:%.*]]) local_unnamed_addr !dbg [[DBG4:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[NOT_TOBOOL:%.*]] = icmp eq i32 [[X]], 0, !dbg [[DBG8:![0-9]+]]
; CHECK-NEXT:    [[DOTSINK:%.*]] = zext i1 [[NOT_TOBOOL]] to i32, !dbg [[DBG8]]
; CHECK-NEXT:    store i32 [[DOTSINK]], ptr @g, align 4, !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[Y]], 0, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    br i1 [[CMP8]], label %[[FOR_BODY_PREHEADER:.*]], label %[[FOR_END:.*]], !dbg [[DBG17:![0-9]+]]
; CHECK:       [[FOR_BODY_PREHEADER]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]], !dbg [[DBG19:![0-9]+]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[TMP1:%.*]], %[[FOR_INC:.*]] ], [ [[DOTSINK]], %[[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[I_09:%.*]] = phi i32 [ [[INC4:%.*]], %[[FOR_INC]] ], [ 0, %[[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[I_09]], [[Z]], !dbg [[DBG19]]
; CHECK-NEXT:    br i1 [[CMP1]], label %[[IF_THEN2:.*]], label %[[FOR_INC]], !dbg [[DBG21:![0-9]+]]
; CHECK:       [[IF_THEN2]]:
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP0]], 1, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    store i32 [[INC]], ptr @g, align 4, !dbg [[DBG22]], !tbaa [[TBAA9]]
; CHECK-NEXT:    br label %[[FOR_INC]], !dbg [[DBG23:![0-9]+]]
; CHECK:       [[FOR_INC]]:
; CHECK-NEXT:    [[TMP1]] = phi i32 [ [[INC]], %[[IF_THEN2]] ], [ [[TMP0]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC4]] = add nuw nsw i32 [[I_09]], 1, !dbg [[DBG24:![0-9]+]]
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[INC4]], [[Y]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY]], label %[[FOR_END_LOOPEXIT:.*]], !dbg [[DBG17]]
; CHECK:       [[FOR_END_LOOPEXIT]]:
; CHECK-NEXT:    br label %[[FOR_END]], !dbg [[DBG26:![0-9]+]]
; CHECK:       [[FOR_END]]:
; CHECK-NEXT:    ret void, !dbg [[DBG26]]
;
entry:
  %not.tobool = icmp eq i32 %x, 0, !dbg !8
  %.sink = zext i1 %not.tobool to i32, !dbg !8
  store i32 %.sink, ptr @g, align 4, !tbaa !9
  %cmp8 = icmp sgt i32 %y, 0, !dbg !13
  br i1 %cmp8, label %for.body.preheader, label %for.end, !dbg !17

for.body.preheader:                               ; preds = %entry
  br label %for.body, !dbg !19

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %i.09 = phi i32 [ %inc4, %for.inc ], [ 0, %for.body.preheader ]
  %cmp1 = icmp sgt i32 %i.09, %z, !dbg !19
  br i1 %cmp1, label %if.then2, label %for.inc, !dbg !21

if.then2:                                         ; preds = %for.body
  %0 = load i32, ptr @g, align 4, !dbg !22, !tbaa !9
  %inc = add nsw i32 %0, 1, !dbg !22
  store i32 %inc, ptr @g, align 4, !dbg !22, !tbaa !9
  br label %for.inc, !dbg !23

for.inc:                                          ; preds = %for.body, %if.then2
  %inc4 = add nuw nsw i32 %i.09, 1, !dbg !24
  %exitcond = icmp ne i32 %inc4, %y, !dbg !13
  br i1 %exitcond, label %for.body, label %for.end.loopexit, !dbg !17

for.end.loopexit:                                 ; preds = %for.inc
  br label %for.end, !dbg !26

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void, !dbg !26
}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1)
!1 = !DIFile(filename: "foo.c", directory: "b/")
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 3, type: !5, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: true, unit: !0)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !7}
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DILocation(line: 4, column: 7, scope: !4)
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
!13 = !DILocation(line: 10, column: 13, scope: !14)
!14 = !DILexicalBlockFile(scope: !15, file: !1, discriminator: 1)
!15 = distinct !DILexicalBlock(scope: !16, file: !1, line: 10, column: 3)
!16 = distinct !DILexicalBlock(scope: !4, file: !1, line: 10, column: 3)
!17 = !DILocation(line: 10, column: 3, scope: !18)
!18 = !DILexicalBlockFile(scope: !16, file: !1, discriminator: 1)
!19 = !DILocation(line: 11, column: 11, scope: !20)
!20 = distinct !DILexicalBlock(scope: !15, file: !1, line: 11, column: 9)
!21 = !DILocation(line: 11, column: 9, scope: !15)
!22 = !DILocation(line: 12, column: 8, scope: !20)
!23 = !DILocation(line: 12, column: 7, scope: !20)
!24 = !DILocation(line: 10, column: 20, scope: !25)
!25 = !DILexicalBlockFile(scope: !15, file: !1, discriminator: 2)
!26 = !DILocation(line: 13, column: 1, scope: !4)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C99, file: [[META1:![0-9]+]], isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug)
; CHECK: [[META1]] = !DIFile(filename: "foo.c", directory: {{.*}})
; CHECK: [[DBG4]] = distinct !DISubprogram(name: "foo", scope: [[META1]], file: [[META1]], line: 3, type: [[META5:![0-9]+]], scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]])
; CHECK: [[META5]] = !DISubroutineType(types: [[META6:![0-9]+]])
; CHECK: [[META6]] = !{null, [[META7:![0-9]+]], [[META7]], [[META7]]}
; CHECK: [[META7]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[DBG8]] = !DILocation(line: 4, column: 7, scope: [[DBG4]])
; CHECK: [[TBAA9]] = !{[[META10:![0-9]+]], [[META10]], i64 0}
; CHECK: [[META10]] = !{!"int", [[META11:![0-9]+]], i64 0}
; CHECK: [[META11]] = !{!"omnipotent char", [[META12:![0-9]+]], i64 0}
; CHECK: [[META12]] = !{!"Simple C/C++ TBAA"}
; CHECK: [[DBG13]] = !DILocation(line: 10, column: 13, scope: [[META14:![0-9]+]])
; CHECK: [[META14]] = !DILexicalBlockFile(scope: [[META15:![0-9]+]], file: [[META1]], discriminator: 1)
; CHECK: [[META15]] = distinct !DILexicalBlock(scope: [[META16:![0-9]+]], file: [[META1]], line: 10, column: 3)
; CHECK: [[META16]] = distinct !DILexicalBlock(scope: [[DBG4]], file: [[META1]], line: 10, column: 3)
; CHECK: [[DBG17]] = !DILocation(line: 10, column: 3, scope: [[META18:![0-9]+]])
; CHECK: [[META18]] = !DILexicalBlockFile(scope: [[META16]], file: [[META1]], discriminator: 1)
; CHECK: [[DBG19]] = !DILocation(line: 11, column: 11, scope: [[META20:![0-9]+]])
; CHECK: [[META20]] = distinct !DILexicalBlock(scope: [[META15]], file: [[META1]], line: 11, column: 9)
; CHECK: [[DBG21]] = !DILocation(line: 11, column: 9, scope: [[META15]])
; CHECK: [[DBG22]] = !DILocation(line: 12, column: 8, scope: [[META20]])
; CHECK: [[DBG23]] = !DILocation(line: 12, column: 7, scope: [[META20]])
; CHECK: [[DBG24]] = !DILocation(line: 10, column: 20, scope: [[META25:![0-9]+]])
; CHECK: [[META25]] = !DILexicalBlockFile(scope: [[META15]], file: [[META1]], discriminator: 2)
; CHECK: [[DBG26]] = !DILocation(line: 13, column: 1, scope: [[DBG4]])
;.

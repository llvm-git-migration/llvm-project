; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=lower-constant-intrinsics -S < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare i64 @llvm.objectsize.i64.p0(ptr, i1 immarg, i1 immarg, i1 immarg)
declare noalias ptr @malloc(i64 noundef) #0

; TODO: computeConstantRange is not able to see through this simple condition.
define i64 @phi_malloc_size(i1 %cond, i64 %size) {
; CHECK-LABEL: @phi_malloc_size(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHIFTED:%.*]] = add i64 [[SIZE:%.*]], -11
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[SHIFTED]], -8
; CHECK-NEXT:    br i1 [[CMP]], label [[RETURN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[MEM:%.*]] = tail call noalias ptr @malloc(i64 noundef [[SIZE]])
; CHECK-NEXT:    [[RES1:%.*]] = select i1 [[COND:%.*]], i64 -1, i64 0
; CHECK-NEXT:    br label [[RETURN]]
; CHECK:       return:
; CHECK-NEXT:    [[RES:%.*]] = phi i64 [ [[RES1]], [[IF_END]] ], [ -1, [[ENTRY:%.*]] ]
; CHECK-NEXT:    ret i64 [[RES]]
;
entry:
  %shifted = add i64 %size, -11
  %valid = icmp ult i64 %shifted, -8
  br i1 %valid, label %return, label %if.end

if.end:
  %ptr = tail call noalias ptr @malloc(i64 noundef %size)
  %objsize_max = call i64 @llvm.objectsize.i64.p0(ptr %ptr, i1 false, i1 false, i1 false)
  %objsize_min = call i64 @llvm.objectsize.i64.p0(ptr %ptr, i1 true, i1 false, i1 false)
  %res = select i1 %cond, i64 %objsize_max, i64 %objsize_min
  br label %return

return:
  %res.phi = phi i64 [%res, %if.end], [-1, %entry]
  ret i64 %res.phi
}

attributes #0 = { nounwind allocsize(0) }

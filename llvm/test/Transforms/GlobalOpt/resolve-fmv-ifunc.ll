; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --filter "call i32 @(test_single_bb_resolver|test_multi_bb_resolver)" --version 4
; RUN: opt --passes=globalopt -o - -S < %s | FileCheck %s

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

$test_single_bb_resolver.resolver = comdat any
$test_multi_bb_resolver.resolver = comdat any
$foo.resolver = comdat any
$bar.resolver = comdat any

@__aarch64_cpu_features = external local_unnamed_addr global { i64 }

@test_single_bb_resolver.ifunc = weak_odr alias i32 (), ptr @test_single_bb_resolver
@test_multi_bb_resolver.ifunc = weak_odr dso_local alias i32 (), ptr @test_multi_bb_resolver
@foo.ifunc = weak_odr alias i32 (), ptr @foo
@bar.ifunc = weak_odr dso_local alias i32 (), ptr @bar

@test_single_bb_resolver = weak_odr ifunc i32 (), ptr @test_single_bb_resolver.resolver
@test_multi_bb_resolver = weak_odr dso_local ifunc i32 (), ptr @test_multi_bb_resolver.resolver
@foo = weak_odr ifunc i32 (), ptr @foo.resolver
@bar = weak_odr dso_local ifunc i32 (), ptr @bar.resolver

declare void @__init_cpu_features_resolver() local_unnamed_addr

declare i32 @test_single_bb_resolver._Msve() #2

declare i32 @test_single_bb_resolver._Msve2() #3

define i32 @test_single_bb_resolver.default() #1 {
; CHECK-LABEL: define i32 @test_single_bb_resolver.default(
; CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
entry:
  ret i32 0
}

define weak_odr ptr @test_single_bb_resolver.resolver() #0 comdat {
; CHECK-LABEL: define weak_odr ptr @test_single_bb_resolver.resolver(
; CHECK-SAME: ) #[[ATTR3:[0-9]+]] comdat {
resolver_entry:
  tail call void @__init_cpu_features_resolver()
  %0 = load i64, ptr @__aarch64_cpu_features, align 8
  %1 = and i64 %0, 68719476736
  %.not = icmp eq i64 %1, 0
  %2 = and i64 %0, 1073741824
  %.not3 = icmp eq i64 %2, 0
  %test_single_bb_resolver._Msve.test_single_bb_resolver.default = select i1 %.not3, ptr @test_single_bb_resolver.default, ptr @test_single_bb_resolver._Msve
  %common.ret.op = select i1 %.not, ptr %test_single_bb_resolver._Msve.test_single_bb_resolver.default, ptr @test_single_bb_resolver._Msve2
  ret ptr %common.ret.op
}

define i32 @foo._Msve() #2 {
; CHECK-LABEL: define i32 @foo._Msve(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK:    [[CALL:%.*]] = tail call i32 @test_single_bb_resolver._Msve()
;
entry:
  %call = tail call i32 @test_single_bb_resolver()
  %add = add nsw i32 %call, 30
  ret i32 %add
}

define i32 @foo._Msve2() #3 {
; CHECK-LABEL: define i32 @foo._Msve2(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] {
; CHECK:    [[CALL1:%.*]] = tail call i32 @test_single_bb_resolver._Msve2()
; CHECK:    [[CALL2:%.*]] = tail call i32 @test_single_bb_resolver._Msve2()
;
entry:
  %call1 = tail call i32 @test_single_bb_resolver()
  %call2 = tail call i32 @test_single_bb_resolver()
  %added = add nsw i32 %call1, %call2
  %add = add nsw i32 %added, 20
  ret i32 %add
}

define i32 @foo.default() #1 {
; CHECK-LABEL: define i32 @foo.default(
; CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
; CHECK:    [[CALL:%.*]] = tail call i32 @test_single_bb_resolver.default()
;
entry:
  %call = tail call i32 @test_single_bb_resolver()
  %add = add nsw i32 %call, 10
  ret i32 %add
}

define weak_odr ptr @foo.resolver() #0 comdat {
; CHECK-LABEL: define weak_odr ptr @foo.resolver(
; CHECK-SAME: ) #[[ATTR3:[0-9]+]] comdat {
resolver_entry:
  tail call void @__init_cpu_features_resolver()
  %0 = load i64, ptr @__aarch64_cpu_features, align 8
  %1 = and i64 %0, 68719476736
  %.not = icmp eq i64 %1, 0
  %2 = and i64 %0, 1073741824
  %.not3 = icmp eq i64 %2, 0
  %foo._Msve.foo.default = select i1 %.not3, ptr @foo.default, ptr @foo._Msve
  %common.ret.op = select i1 %.not, ptr %foo._Msve.foo.default, ptr @foo._Msve2
  ret ptr %common.ret.op
}

define i32 @test_multi_bb_resolver._Mmops() #4 {
; CHECK-LABEL: define i32 @test_multi_bb_resolver._Mmops(
; CHECK-SAME: ) #[[ATTR4:[0-9]+]] {
entry:
  ret i32 3
}

define i32 @test_multi_bb_resolver._Msve2() #3 {
; CHECK-LABEL: define i32 @test_multi_bb_resolver._Msve2(
; CHECK-SAME: ) #[[ATTR1]] {
entry:
  ret i32 2
}

define i32 @test_multi_bb_resolver._Msve() #2 {
; CHECK-LABEL: define i32 @test_multi_bb_resolver._Msve(
; CHECK-SAME: ) #[[ATTR0]] {
entry:
  ret i32 1
}

define i32 @test_multi_bb_resolver.default() #1 {
; CHECK-LABEL: define i32 @test_multi_bb_resolver.default(
; CHECK-SAME: ) #[[ATTR2]] {
entry:
  ret i32 0
}

define weak_odr ptr @test_multi_bb_resolver.resolver() #0 comdat {
; CHECK-LABEL: define weak_odr ptr @test_multi_bb_resolver.resolver(
; CHECK-SAME: ) #[[ATTR3:[0-9]+]] comdat {
resolver_entry:
  tail call void @__init_cpu_features_resolver()
  %0 = load i64, ptr @__aarch64_cpu_features, align 8
  %1 = and i64 %0, 576460752303423488
  %.not = icmp eq i64 %1, 0
  br i1 %.not, label %resolver_else, label %common.ret

common.ret:                                       ; preds = %resolver_else2, %resolver_else, %resolver_entry
  %common.ret.op = phi ptr [ @test_multi_bb_resolver._Mmops, %resolver_entry ], [ @test_multi_bb_resolver._Msve2, %resolver_else ], [ %test_multi_bb_resolver._Msve.test_multi_bb_resolver.default, %resolver_else2 ]
  ret ptr %common.ret.op

resolver_else:                                    ; preds = %resolver_entry
  %2 = and i64 %0, 68719476736
  %.not5 = icmp eq i64 %2, 0
  br i1 %.not5, label %resolver_else2, label %common.ret

resolver_else2:                                   ; preds = %resolver_else
  %3 = and i64 %0, 1073741824
  %.not6 = icmp eq i64 %3, 0
  %test_multi_bb_resolver._Msve.test_multi_bb_resolver.default = select i1 %.not6, ptr @test_multi_bb_resolver.default, ptr @test_multi_bb_resolver._Msve
  br label %common.ret
}

define i32 @bar._MmopsMsve2() #5 {
; CHECK-LABEL: define i32 @bar._MmopsMsve2(
; CHECK-SAME: ) #[[ATTR5:[0-9]+]] {
; CHECK:    [[CALL:%.*]] = tail call i32 @test_multi_bb_resolver._Mmops()
;
entry:
  %call = tail call i32 @test_multi_bb_resolver()
  %add = add nsw i32 %call, 30
  ret i32 %add
}

define i32 @bar._Msve() #2 {
; CHECK-LABEL: define i32 @bar._Msve(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK:    [[CALL:%.*]] = tail call i32 @test_multi_bb_resolver()
;
entry:
  %call = tail call i32 @test_multi_bb_resolver()
  %add = add nsw i32 %call, 20
  ret i32 %add
}

define i32 @bar.default() #1 {
; CHECK-LABEL: define i32 @bar.default(
; CHECK-SAME: ) #[[ATTR2]] {
; CHECK:    [[CALL:%.*]] = tail call i32 @test_multi_bb_resolver()
;
entry:
  %call = tail call i32 @test_multi_bb_resolver()
  %add = add nsw i32 %call, 10
  ret i32 %add
}

define weak_odr ptr @bar.resolver() #0 comdat {
; CHECK-LABEL: define weak_odr ptr @bar.resolver(
; CHECK-SAME: ) #[[ATTR3:[0-9]+]] comdat {
resolver_entry:
  tail call void @__init_cpu_features_resolver()
  %0 = load i64, ptr @__aarch64_cpu_features, align 8
  %1 = and i64 %0, 576460821022900224
  %2 = icmp eq i64 %1, 576460821022900224
  %3 = and i64 %0, 1073741824
  %.not = icmp eq i64 %3, 0
  %bar._Msve.bar.default = select i1 %.not, ptr @bar.default, ptr @bar._Msve
  %common.ret.op = select i1 %2, ptr @bar._MmopsMsve2, ptr %bar._Msve.bar.default
  ret ptr %common.ret.op
}

attributes #0 = { "target-features"="+fmv" }
attributes #1 = { "target-features"="+fmv,+fp-armv8,+neon,+outline-atomics,+v8a" }
attributes #2 = { "target-features"="+fmv,+fp-armv8,+fullfp16,+neon,+outline-atomics,+sve,+v8a" }
attributes #3 = { "target-features"="+fmv,+fp-armv8,+fullfp16,+neon,+outline-atomics,+sve,+sve2,+v8a" }
attributes #4 = { "target-features"="+fmv,+fp-armv8,+mops,+neon,+outline-atomics,+v8a" }
attributes #5 = { "target-features"="+fmv,+fp-armv8,+fullfp16,+mops,+neon,+outline-atomics,+sve,+sve2,+v8a" }


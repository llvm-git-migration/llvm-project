; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=memcpyopt -S %s -verify-memoryssa | FileCheck %s

; Redundant memmove.
define i32 @test() {
; CHECK-LABEL: @test(
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [26 x i32], align 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], i8 0, i64 104, i1 false)
; CHECK-NEXT:    [[ARRAY_IDX:%.*]] = getelementptr inbounds i8, ptr [[ARRAY]], i64 4
; CHECK-NEXT:    call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], ptr noundef nonnull align 4 [[ARRAY_IDX]], i64 100, i1 false)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[ARRAY]], align 16
; CHECK-NEXT:    ret i32 [[VAL]]
;
  %array = alloca [26 x i32], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 %array, i8 0, i64 104, i1 false)
  %array.idx = getelementptr inbounds i8, ptr %array, i64 4
  call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 %array, ptr noundef nonnull align 4 %array.idx, i64 100, i1 false)
  %val = load i32, ptr %array, align 16
  ret i32 %val
}

; Used memmmove, buffer is reset to zero.
define i32 @test1() {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [26 x i32], align 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], i8 0, i64 104, i1 false)
; CHECK-NEXT:    [[ARRAY_IDX:%.*]] = getelementptr inbounds i8, ptr [[ARRAY]], i64 4
; CHECK-NEXT:    store i32 1, ptr [[ARRAY_IDX]], align 4
; CHECK-NEXT:    call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], ptr noundef nonnull align 4 [[ARRAY_IDX]], i64 100, i1 false)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[ARRAY_IDX]], align 4
; CHECK-NEXT:    ret i32 [[VAL]]
;
  %array = alloca [26 x i32], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 %array, i8 0, i64 104, i1 false)
  %array.idx = getelementptr inbounds i8, ptr %array, i64 4
  store i32 1, ptr %array.idx
  call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 %array, ptr noundef nonnull align 4 %array.idx, i64 100, i1 false)
  %val = load i32, ptr %array.idx, align 4
  ret i32 %val
}

; Used memmove, buffer clobbered by opaque.
define i32 @test2() {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [25 x i32], align 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(100) [[ARRAY]], i8 0, i64 100, i1 false)
; CHECK-NEXT:    call void @opaque(ptr noundef nonnull [[ARRAY]])
; CHECK-NEXT:    [[ARRAY_IDX:%.*]] = getelementptr inbounds i8, ptr [[ARRAY]], i64 4
; CHECK-NEXT:    call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(96) [[ARRAY]], ptr noundef nonnull align 4 dereferenceable(96) [[ARRAY_IDX]], i64 96, i1 false)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[ARRAY]], align 16
; CHECK-NEXT:    ret i32 [[VAL]]
;
  %array = alloca [25 x i32], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(100) %array, i8 0, i64 100, i1 false)
  call void @opaque(ptr noundef nonnull %array)
  %array.idx = getelementptr inbounds i8, ptr %array, i64 4
  call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(96) %array, ptr noundef nonnull align 4 dereferenceable(96) %array.idx, i64 96, i1 false)
  %val = load i32, ptr %array, align 16
  ret i32 %val
}

; Redundant memmove, but not within the same basic block.
define i32 @test3() {
; CHECK-LABEL: @test3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [26 x i32], align 16
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], i8 0, i64 104, i1 false)
; CHECK-NEXT:    [[ARRAY_IDX:%.*]] = getelementptr inbounds i8, ptr [[ARRAY]], i64 4
; CHECK-NEXT:    br label [[USE:%.*]]
; CHECK:       use:
; CHECK-NEXT:    call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 [[ARRAY]], ptr noundef nonnull align 4 [[ARRAY_IDX]], i64 100, i1 false)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[ARRAY]], align 16
; CHECK-NEXT:    ret i32 [[VAL]]
;
entry:
  %array = alloca [26 x i32], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 %array, i8 0, i64 104, i1 false)
  %array.idx = getelementptr inbounds i8, ptr %array, i64 4
  br label %use

use:                                              ; preds = %entry
  call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 16 %array, ptr noundef nonnull align 4 %array.idx, i64 100, i1 false)
  %val = load i32, ptr %array, align 16
  ret i32 %val
}

declare void @opaque(ptr)
declare void @llvm.memset.p0.i64(ptr nocapture, i8, i64, i1)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture, ptr nocapture, i64, i1) nounwind

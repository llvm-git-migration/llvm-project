; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define i1 @icmp_equality_test(i64 %X, i64 %Y, i64 %Z) {
; CHECK-LABEL: @icmp_equality_test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %XEq = icmp eq i64 %X, %Z
  %YEq = icmp eq i64 %Y, %Z
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_constant(i42 %X, i42 %Y) {
; CHECK-LABEL: @icmp_equality_test_constant(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i42 [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %XEq = icmp eq i42 %X, -42
  %YEq = icmp eq i42 %Y, -42
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i42 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define <2 x i1> @icmp_equality_test_vector(<2 x i64> %X, <2 x i64> %Y) {
; CHECK-LABEL: @icmp_equality_test_vector(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq <2 x i64> [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    ret <2 x i1> [[CMP]]
;
entry:
  %XEq = icmp eq <2 x i64> %X, <i64 123, i64 456>
  %YEq = icmp eq <2 x i64> %Y, <i64 123, i64 456>
  %either = select <2 x i1> %XEq, <2 x i1> <i1 true, i1 true>, <2 x i1> %YEq
  %both = select <2 x i1> %XEq, <2 x i1> %YEq, <2 x i1> <i1 false, i1 false>
  %cmp = icmp eq <2 x i64> %X, %Y
  %equal = select <2 x i1> %either, <2 x i1> %both, <2 x i1> %cmp
  ret <2 x i1> %equal
}

define i1 @icmp_equality_test_commute_icmp(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_commute_icmp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[Y:%.*]], [[X:%.*]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %XEq = icmp eq i64 0, %X
  %YEq = icmp eq i64 0, %Y
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %Y, %X
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_commute_select1(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_commute_select1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 0
  %either = select i1 %YEq, i1 true, i1 %XEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_commute_select2(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_commute_select2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 0
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %YEq, i1 %XEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

; Negative tests below

define i1 @icmp_equality_test_wrong_constant(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_wrong_constant(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[XEQ:%.*]] = icmp eq i64 [[X:%.*]], 0
; CHECK-NEXT:    [[YEQ:%.*]] = icmp eq i64 [[Y:%.*]], 999
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X]], [[Y]]
; CHECK-NEXT:    [[NOT_YEQ:%.*]] = xor i1 [[YEQ]], true
; CHECK-NEXT:    [[BOTH:%.*]] = select i1 [[NOT_YEQ]], i1 [[CMP]], i1 false
; CHECK-NEXT:    [[EQUAL:%.*]] = select i1 [[XEQ]], i1 [[YEQ]], i1 [[BOTH]]
; CHECK-NEXT:    ret i1 [[EQUAL]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 999
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_wrong_either(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_wrong_either(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[XEQ_NOT:%.*]] = icmp eq i64 [[X:%.*]], 0
; CHECK-NEXT:    [[YEQ:%.*]] = icmp eq i64 [[Y:%.*]], 999
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[Y]], 0
; CHECK-NEXT:    [[BOTH:%.*]] = or i1 [[YEQ]], [[CMP]]
; CHECK-NEXT:    [[EQUAL:%.*]] = select i1 [[XEQ_NOT]], i1 [[BOTH]], i1 false
; CHECK-NEXT:    ret i1 [[EQUAL]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 999
  %either = select i1 %XEq, i1 %YEq, i1 true
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_wrong_both(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_wrong_both(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[XEQ:%.*]] = icmp ne i64 [[X:%.*]], 0
; CHECK-NEXT:    [[YEQ:%.*]] = icmp eq i64 [[Y:%.*]], 0
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X]], [[Y]]
; CHECK-NEXT:    [[BOTH:%.*]] = select i1 [[YEQ]], i1 true, i1 [[CMP]]
; CHECK-NEXT:    [[EQUAL:%.*]] = select i1 [[XEQ]], i1 [[BOTH]], i1 false
; CHECK-NEXT:    ret i1 [[EQUAL]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 0
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 false, i1 %YEq
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_wrong_cmp(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_wrong_cmp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[XEQ:%.*]] = icmp eq i64 [[X:%.*]], 0
; CHECK-NEXT:    [[YEQ:%.*]] = icmp eq i64 [[Y:%.*]], 0
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X]], 999
; CHECK-NEXT:    [[NOT_YEQ:%.*]] = xor i1 [[YEQ]], true
; CHECK-NEXT:    [[BOTH:%.*]] = select i1 [[NOT_YEQ]], i1 [[CMP]], i1 false
; CHECK-NEXT:    [[EQUAL:%.*]] = select i1 [[XEQ]], i1 [[YEQ]], i1 [[BOTH]]
; CHECK-NEXT:    ret i1 [[EQUAL]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 0
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, 999
  %equal = select i1 %either, i1 %both, i1 %cmp
  ret i1 %equal
}

define i1 @icmp_equality_test_wrong_equal(i64 %X, i64 %Y) {
; CHECK-LABEL: @icmp_equality_test_wrong_equal(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[XEQ:%.*]] = icmp eq i64 [[X:%.*]], 0
; CHECK-NEXT:    [[YEQ:%.*]] = icmp eq i64 [[Y:%.*]], 0
; CHECK-NEXT:    [[EITHER:%.*]] = select i1 [[XEQ]], i1 true, i1 [[YEQ]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[X]], [[Y]]
; CHECK-NEXT:    [[EQUAL:%.*]] = select i1 [[EITHER]], i1 [[CMP]], i1 false
; CHECK-NEXT:    ret i1 [[EQUAL]]
;
entry:
  %XEq = icmp eq i64 %X, 0
  %YEq = icmp eq i64 %Y, 0
  %either = select i1 %XEq, i1 true, i1 %YEq
  %both = select i1 %XEq, i1 %YEq, i1 false
  %cmp = icmp eq i64 %X, %Y
  %equal = select i1 %either, i1 %cmp, i1 %both
  ret i1 %equal
}

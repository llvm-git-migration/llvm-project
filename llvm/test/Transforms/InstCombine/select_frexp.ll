; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

declare { float, i32 } @llvm.frexp.f32.i32(float)

; Basic case - constant in true position
define float @test_select_frexp(float %x, i1 %cond) {
; CHECK-LABEL: define float @test_select_frexp(
; CHECK-SAME: float [[X:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[COND]], float 1.000000e+00, float [[X]]
; CHECK-NEXT:    [[FREXP:%.*]] = call { float, i32 } @llvm.frexp.f32.i32(float [[SEL]])
; CHECK-NEXT:    [[FREXP_0:%.*]] = extractvalue { float, i32 } [[FREXP]], 0
; CHECK-NEXT:    ret float [[FREXP_0]]
;
  %sel = select i1 %cond, float 1.000000e+00, float %x
  %frexp = call { float, i32 } @llvm.frexp.f32.i32(float %sel)
  %frexp.0 = extractvalue { float, i32 } %frexp, 0
  ret float %frexp.0
}

; Test with negative constant
define float @test_select_frexp_negative(float %x, i1 %cond) {
; CHECK-LABEL: define float @test_select_frexp_negative(
; CHECK-SAME: float [[X:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[COND]], float -1.000000e+00, float [[X]]
; CHECK-NEXT:    [[FREXP:%.*]] = call { float, i32 } @llvm.frexp.f32.i32(float [[SEL]])
; CHECK-NEXT:    [[FREXP_0:%.*]] = extractvalue { float, i32 } [[FREXP]], 0
; CHECK-NEXT:    ret float [[FREXP_0]]
;
  %sel = select i1 %cond, float -1.000000e+00, float %x
  %frexp = call { float, i32 } @llvm.frexp.f32.i32(float %sel)
  %frexp.0 = extractvalue { float, i32 } %frexp, 0
  ret float %frexp.0
}

; Test with constant in false position
define float @test_select_frexp_false_const(float %x, i1 %cond) {
; CHECK-LABEL: define float @test_select_frexp_false_const(
; CHECK-SAME: float [[X:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[COND]], float [[X]], float 1.000000e+00
; CHECK-NEXT:    [[FREXP:%.*]] = call { float, i32 } @llvm.frexp.f32.i32(float [[SEL]])
; CHECK-NEXT:    [[FREXP_0:%.*]] = extractvalue { float, i32 } [[FREXP]], 0
; CHECK-NEXT:    ret float [[FREXP_0]]
;
  %sel = select i1 %cond, float %x, float 1.000000e+00
  %frexp = call { float, i32 } @llvm.frexp.f32.i32(float %sel)
  %frexp.0 = extractvalue { float, i32 } %frexp, 0
  ret float %frexp.0
}

; Multiple uses of extract - should not optimize
define float @test_select_frexp_multi_use(float %x, i1 %cond) {
; CHECK-LABEL: define float @test_select_frexp_multi_use(
; CHECK-SAME: float [[X:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[COND]], float 1.000000e+00, float [[X]]
; CHECK-NEXT:    [[FREXP:%.*]] = call { float, i32 } @llvm.frexp.f32.i32(float [[SEL]])
; CHECK-NEXT:    [[FREXP_0:%.*]] = extractvalue { float, i32 } [[FREXP]], 0
; CHECK-NEXT:    [[RES:%.*]] = fadd float [[FREXP_0]], 1.000000e+00
; CHECK-NEXT:    ret float [[RES]]
;
  %sel = select i1 %cond, float 1.000000e+00, float %x
  %frexp = call { float, i32 } @llvm.frexp.f32.i32(float %sel)
  %frexp.0 = extractvalue { float, i32 } %frexp, 0
  %frexp.1 = extractvalue { float, i32 } %frexp, 1
  %res = fadd float %frexp.0, 1.0
  ret float %res
}

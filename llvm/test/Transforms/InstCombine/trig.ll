; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=instcombine -ffast-math -S | FileCheck %s

define float @tanAtanInverse(float %x) {
; CHECK-LABEL: define float @tanAtanInverse(
; CHECK-SAME: float [[X:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call fast float @atanf(float [[X]])
; CHECK-NEXT:    ret float [[X]]
;
  %call = call fast float @atanf(float %x)
  %call1 = call fast float @tanf(float %call)
  ret float %call1
}

define float @atanhTanhInverse(float %x) {
; CHECK-LABEL: define float @atanhTanhInverse(
; CHECK-SAME: float [[X:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call fast float @tanhf(float [[X]])
; CHECK-NEXT:    ret float [[X]]
;
  %call = call fast float @tanhf(float %x)
  %call1 = call fast float @atanhf(float %call)
  ret float %call1
}

define float @sinhAsinhInverse(float %x) {
; CHECK-LABEL: define float @sinhAsinhInverse(
; CHECK-SAME: float [[X:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call fast float @asinhf(float [[X]])
; CHECK-NEXT:    ret float [[X]]
;
  %call = call fast float @asinhf(float %x)
  %call1 = call fast float @sinhf(float %call)
  ret float %call1
}

define float @coshAcoshInverse(float %x) {
; CHECK-LABEL: define float @coshAcoshInverse(
; CHECK-SAME: float [[X:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call fast float @acoshf(float [[X]])
; CHECK-NEXT:    ret float [[X]]
;
  %call = call fast float @acoshf(float %x)
  %call1 = call fast float @coshf(float %call)
  ret float %call1
}

define float @test2(ptr %fptr) {
; CHECK-LABEL: define float @test2(
; CHECK-SAME: ptr [[FPTR:%.*]]) {
; CHECK-NEXT:    [[CALL1:%.*]] = call fast float [[FPTR]]()
; CHECK-NEXT:    [[TAN:%.*]] = call fast float @tanf(float [[CALL1]])
; CHECK-NEXT:    ret float [[TAN]]
;
  %call1 = call fast float %fptr()
  %tan = call fast float @tanf(float %call1)
  ret float %tan
}

declare float @asinhf(float)
declare float @sinhf(float)
declare float @acoshf(float)
declare float @coshf(float)
declare float @tanhf(float)
declare float @atanhf(float)
declare float @tanf(float)
declare float @atanf(float)

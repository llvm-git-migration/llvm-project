; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=instcombine < %s | FileCheck %s

define double @fdiv_cosh_sinh(double %a) {
; CHECK-LABEL: @fdiv_cosh_sinh(
; CHECK-NEXT:    [[TMP1:%.*]] = call double @cosh(double [[A:%.*]])
; CHECK-NEXT:    [[TMP2:%.*]] = call double @sinh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv double [[TMP1]], [[TMP2]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call double @cosh(double %a)
  %2 = call double @sinh(double %a)
  %div = fdiv double %1, %2
  ret double %div
}

define double @fdiv_strict_cosh_strict_sinh_reassoc(double %a) {
; CHECK-LABEL: @fdiv_strict_cosh_strict_sinh_reassoc(
; CHECK-NEXT:    [[TMP1:%.*]] = call double @cosh(double [[A:%.*]])
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc double @sinh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv double [[TMP1]], [[TMP2]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call double @cosh(double %a)
  %2 = call reassoc double @sinh(double %a)
  %div = fdiv double %1, %2
  ret double %div
}

define double @fdiv_reassoc_cosh_strict_sinh_strict(double %a, ptr dereferenceable(2) %dummy) {
; CHECK-LABEL: @fdiv_reassoc_cosh_strict_sinh_strict(
; CHECK-NEXT:    [[TANH:%.*]] = call reassoc double @tanh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc double 1.000000e+00, [[TANH]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call double @cosh(double %a)
  %2 = call double @sinh(double %a)
  %div = fdiv reassoc double %1, %2
  ret double %div
}

define double @fdiv_reassoc_cosh_reassoc_sinh_strict(double %a) {
; CHECK-LABEL: @fdiv_reassoc_cosh_reassoc_sinh_strict(
; CHECK-NEXT:    [[TANH:%.*]] = call reassoc double @tanh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc double 1.000000e+00, [[TANH]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call reassoc double @cosh(double %a)
  %2 = call double @sinh(double %a)
  %div = fdiv reassoc double %1, %2
  ret double %div
}

define double @fdiv_cosh_sinh_reassoc_multiple_uses(double %a) {
; CHECK-LABEL: @fdiv_cosh_sinh_reassoc_multiple_uses(
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc double @cosh(double [[A:%.*]])
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc double @sinh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc double [[TMP1]], [[TMP2]]
; CHECK-NEXT:    call void @use(double [[TMP2]])
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call reassoc double @cosh(double %a)
  %2 = call reassoc double @sinh(double %a)
  %div = fdiv reassoc double %1, %2
  call void @use(double %2)
  ret double %div
}

define double @fdiv_cosh_sinh_reassoc(double %a){
; CHECK-LABEL: @fdiv_cosh_sinh_reassoc(
; CHECK-NEXT:    [[TANH:%.*]] = call reassoc double @tanh(double [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc double 1.000000e+00, [[TANH]]
; CHECK-NEXT:    ret double [[DIV]]
;
  %1 = call reassoc double @cosh(double %a)
  %2 = call reassoc double @sinh(double %a)
  %div = fdiv reassoc double %1, %2
  ret double %div
}

define fp128 @fdiv_coshl_sinhl_reassoc(fp128 %a){
; CHECK-LABEL: @fdiv_coshl_sinhl_reassoc(
; CHECK-NEXT:    [[TANH:%.*]] = call reassoc fp128 @tanhl(fp128 [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc fp128 0xL00000000000000003FFF000000000000, [[TANH]]
; CHECK-NEXT:    ret fp128 [[DIV]]
;
  %1 = call reassoc fp128 @coshl(fp128 %a)
  %2 = call reassoc fp128 @sinhl(fp128 %a)
  %div = fdiv reassoc fp128 %1, %2
  ret fp128 %div
}


define float @fdiv_coshf_sinhf_reassoc(float %a){
; CHECK-LABEL: @fdiv_coshf_sinhf_reassoc(
; CHECK-NEXT:    [[TANH:%.*]] = call reassoc float @tanhf(float [[A]])
; CHECK-NEXT:    [[DIV:%.*]] = fdiv reassoc float 1.000000e+00, [[TANH]]
; CHECK-NEXT:    ret float [[DIV]]
;
  %1 = call reassoc float @coshf(float %a)
  %2 = call reassoc float @sinhf(float %a)
  %div = fdiv reassoc float %1, %2
  ret float %div
}

declare double @cosh(double)
declare float @coshf(float)
declare fp128 @coshl(fp128)

declare double @sinh(double)
declare float @sinhf(float)
declare fp128 @sinhl(fp128)

declare void @use(double)

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=correlated-propagation %s | FileCheck %s

declare void @use(i1)

define void @ctpop(i8 %v) {
; CHECK-LABEL: define void @ctpop(
; CHECK-SAME: i8 [[V:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RES:%.*]] = call range(i8 0, 9) i8 @llvm.ctpop.i8(i8 [[V]])
; CHECK-NEXT:    [[C0_0:%.*]] = icmp samesign uge i8 [[RES]], 3
; CHECK-NEXT:    [[C0_1:%.*]] = icmp samesign ule i8 [[RES]], 7
; CHECK-NEXT:    [[C0:%.*]] = and i1 [[C0_0]], [[C0_1]]
; CHECK-NEXT:    br i1 [[C0]], label %[[RANGE_3_8:.*]], label %[[TEST2:.*]]
; CHECK:       [[RANGE_3_8]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST2]]:
; CHECK-NEXT:    [[C1:%.*]] = icmp samesign uge i8 [[RES]], 8
; CHECK-NEXT:    br i1 [[C1]], label %[[RANGE_8_9:.*]], label %[[TEST3:.*]]
; CHECK:       [[RANGE_8_9]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST3]]:
; CHECK-NEXT:    [[C2:%.*]] = icmp eq i8 [[RES]], 0
; CHECK-NEXT:    br i1 [[C2]], label %[[RANGE_0_1:.*]], label %[[TEST4:.*]]
; CHECK:       [[RANGE_0_1]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST4]]:
; CHECK-NEXT:    [[C3_1:%.*]] = icmp samesign ule i8 [[RES]], 4
; CHECK-NEXT:    [[C3:%.*]] = and i1 true, [[C3_1]]
; CHECK-NEXT:    br i1 [[C3]], label %[[RANGE_1_5:.*]], label %[[ED:.*]]
; CHECK:       [[RANGE_1_5]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[ED]]:
; CHECK-NEXT:    ret void
;
entry:
  %res = call range(i8 0, 9) i8 @llvm.ctpop.i8(i8 %v)
  %c0.0 = icmp uge i8 %res, 3
  %c0.1 = icmp ule i8 %res, 7
  %c0 = and i1 %c0.0, %c0.1
  br i1 %c0, label %range.3.8, label %test2

range.3.8:
  %cmp0 = icmp uge i8 %v, 7
  call void @use(i1 %cmp0) ; true
  %cmp1 = icmp ult i8 %v, 7
  call void @use(i1 %cmp1) ; false
  %cmp2 = icmp ule i8 %v, 254
  call void @use(i1 %cmp2) ; true
  %cmp3 = icmp ugt i8 %v, 254
  call void @use(i1 %cmp3) ; false
  ret void

test2:
  %c1 = icmp uge i8 %res, 8
  br i1 %c1, label %range.8.9, label %test3

range.8.9:
  %cmp4 = icmp eq i8 %v, -1
  call void @use(i1 %cmp4) ; true
  ret void

test3:
  %c2 = icmp eq i8 %res, 0
  br i1 %c2, label %range.0.1, label %test4

range.0.1:
  %cmp5 = icmp eq i8 %v, 0
  call void @use(i1 %cmp5) ; true
  ret void

test4:
  %c3.0 = icmp uge i8 %res, 1
  %c3.1 = icmp ule i8 %res, 4
  %c3 = and i1 %c3.0, %c3.1
  br i1 %c3, label %range.1.5, label %ed

range.1.5:
  %cmp8 = icmp uge i8 %v, 1
  call void @use(i1 %cmp8) ; true
  %cmp9 = icmp ult i8 %v, 1
  call void @use(i1 %cmp9) ; false
  %cmp10 = icmp ule i8 %v, 240
  call void @use(i1 %cmp10) ; true
  %cmp11 = icmp ugt i8 %v, 240
  call void @use(i1 %cmp11) ; false
  ret void

ed:
  ret void
}

define void @ctlz(i8 %v) {
; CHECK-LABEL: define void @ctlz(
; CHECK-SAME: i8 [[V:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RES:%.*]] = call range(i8 0, 9) i8 @llvm.ctlz.i8(i8 [[V]], i1 false)
; CHECK-NEXT:    [[C0_0:%.*]] = icmp samesign uge i8 [[RES]], 3
; CHECK-NEXT:    [[C0_1:%.*]] = icmp samesign ule i8 [[RES]], 7
; CHECK-NEXT:    [[C0:%.*]] = and i1 [[C0_0]], [[C0_1]]
; CHECK-NEXT:    br i1 [[C0]], label %[[RANGE_3_8:.*]], label %[[TEST2:.*]]
; CHECK:       [[RANGE_3_8]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST2]]:
; CHECK-NEXT:    [[C1:%.*]] = icmp samesign uge i8 [[RES]], 8
; CHECK-NEXT:    br i1 [[C1]], label %[[RANGE_8_9:.*]], label %[[TEST3:.*]]
; CHECK:       [[RANGE_8_9]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST3]]:
; CHECK-NEXT:    [[C2:%.*]] = icmp eq i8 [[RES]], 0
; CHECK-NEXT:    br i1 [[C2]], label %[[RANGE_0_1:.*]], label %[[TEST4:.*]]
; CHECK:       [[RANGE_0_1]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    [[CMP7:%.*]] = icmp samesign ult i8 [[V]], -1
; CHECK-NEXT:    call void @use(i1 [[CMP7]])
; CHECK-NEXT:    ret void
; CHECK:       [[TEST4]]:
; CHECK-NEXT:    [[C3_1:%.*]] = icmp samesign ule i8 [[RES]], 4
; CHECK-NEXT:    [[C3:%.*]] = and i1 true, [[C3_1]]
; CHECK-NEXT:    br i1 [[C3]], label %[[RANGE_1_5:.*]], label %[[ED:.*]]
; CHECK:       [[RANGE_1_5]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[ED]]:
; CHECK-NEXT:    ret void
;
entry:
  %res = call range(i8 0, 9) i8 @llvm.ctlz.i8(i8 %v, i1 false)
  %c0.0 = icmp uge i8 %res, 3
  %c0.1 = icmp ule i8 %res, 7
  %c0 = and i1 %c0.0, %c0.1
  br i1 %c0, label %range.3.8, label %test2

range.3.8:
  %cmp0 = icmp uge i8 %v, 1
  call void @use(i1 %cmp0) ; true
  %cmp1 = icmp ult i8 %v, 1
  call void @use(i1 %cmp1) ; false
  %cmp2 = icmp ule i8 %v, 31
  call void @use(i1 %cmp2) ; true
  %cmp3 = icmp ugt i8 %v, 31
  call void @use(i1 %cmp3) ; false
  ret void

test2:
  %c1 = icmp uge i8 %res, 8
  br i1 %c1, label %range.8.9, label %test3

range.8.9:
  %cmp4 = icmp eq i8 %v, 0
  call void @use(i1 %cmp4) ; true
  ret void

test3:
  %c2 = icmp eq i8 %res, 0
  br i1 %c2, label %range.0.1, label %test4

range.0.1:
  %cmp5 = icmp uge i8 %v, 128
  call void @use(i1 %cmp5) ; true
  %cmp6 = icmp ult i8 %v, 128
  call void @use(i1 %cmp6) ; false
  %cmp7 = icmp ult i8 %v, 255
  call void @use(i1 %cmp7) ; unknown
  ret void

test4:
  %c3.0 = icmp uge i8 %res, 1
  %c3.1 = icmp ule i8 %res, 4
  %c3 = and i1 %c3.0, %c3.1
  br i1 %c3, label %range.1.5, label %ed

range.1.5:
  %cmp8 = icmp uge i8 %v, 8
  call void @use(i1 %cmp8) ; true
  %cmp9 = icmp ult i8 %v, 8
  call void @use(i1 %cmp9) ; false
  %cmp10 = icmp ule i8 %v, 127
  call void @use(i1 %cmp10) ; true
  %cmp11 = icmp ugt i8 %v, 127
  call void @use(i1 %cmp11) ; false
  ret void

ed:
  ret void
}

define void @cttz(i8 %v) {
; CHECK-LABEL: define void @cttz(
; CHECK-SAME: i8 [[V:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RES:%.*]] = call range(i8 0, 9) i8 @llvm.cttz.i8(i8 [[V]], i1 false)
; CHECK-NEXT:    [[C0_0:%.*]] = icmp samesign uge i8 [[RES]], 3
; CHECK-NEXT:    [[C0_1:%.*]] = icmp samesign ule i8 [[RES]], 7
; CHECK-NEXT:    [[C0:%.*]] = and i1 [[C0_0]], [[C0_1]]
; CHECK-NEXT:    br i1 [[C0]], label %[[RANGE_3_8:.*]], label %[[TEST2:.*]]
; CHECK:       [[RANGE_3_8]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST2]]:
; CHECK-NEXT:    [[C1:%.*]] = icmp samesign uge i8 [[RES]], 8
; CHECK-NEXT:    br i1 [[C1]], label %[[RANGE_8_9:.*]], label %[[TEST3:.*]]
; CHECK:       [[RANGE_8_9]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    ret void
; CHECK:       [[TEST3]]:
; CHECK-NEXT:    [[C2:%.*]] = icmp eq i8 [[RES]], 0
; CHECK-NEXT:    br i1 [[C2]], label %[[RANGE_0_1:.*]], label %[[TEST4:.*]]
; CHECK:       [[RANGE_0_1]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    [[CMP7:%.*]] = icmp ult i8 [[V]], -1
; CHECK-NEXT:    call void @use(i1 [[CMP7]])
; CHECK-NEXT:    ret void
; CHECK:       [[TEST4]]:
; CHECK-NEXT:    [[C3_1:%.*]] = icmp samesign ule i8 [[RES]], 4
; CHECK-NEXT:    [[C3:%.*]] = and i1 true, [[C3_1]]
; CHECK-NEXT:    br i1 [[C3]], label %[[RANGE_1_5:.*]], label %[[ED:.*]]
; CHECK:       [[RANGE_1_5]]:
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    call void @use(i1 true)
; CHECK-NEXT:    call void @use(i1 false)
; CHECK-NEXT:    ret void
; CHECK:       [[ED]]:
; CHECK-NEXT:    ret void
;
entry:
  %res = call range(i8 0, 9) i8 @llvm.cttz.i8(i8 %v, i1 false)
  %c0.0 = icmp uge i8 %res, 3
  %c0.1 = icmp ule i8 %res, 7
  %c0 = and i1 %c0.0, %c0.1
  br i1 %c0, label %range.3.8, label %test2

range.3.8:
  %cmp0 = icmp uge i8 %v, 4
  call void @use(i1 %cmp0) ; true
  %cmp1 = icmp ult i8 %v, 4
  call void @use(i1 %cmp1) ; false
  %cmp2 = icmp ule i8 %v, 248
  call void @use(i1 %cmp2) ; true
  %cmp3 = icmp ugt i8 %v, 248
  call void @use(i1 %cmp3) ; false
  ret void

test2:
  %c1 = icmp uge i8 %res, 8
  br i1 %c1, label %range.8.9, label %test3

range.8.9:
  %cmp4 = icmp eq i8 %v, 0
  call void @use(i1 %cmp4) ; true
  ret void

test3:
  %c2 = icmp eq i8 %res, 0
  br i1 %c2, label %range.0.1, label %test4

range.0.1:
  %cmp5 = icmp uge i8 %v, 1
  call void @use(i1 %cmp5) ; true
  %cmp6 = icmp ult i8 %v, 1
  call void @use(i1 %cmp6) ; false
  %cmp7 = icmp ult i8 %v, 255
  call void @use(i1 %cmp7) ; unknown
  ret void

test4:
  %c3.0 = icmp uge i8 %res, 1
  %c3.1 = icmp ule i8 %res, 4
  %c3 = and i1 %c3.0, %c3.1
  br i1 %c3, label %range.1.5, label %ed

range.1.5:
  %cmp8 = icmp uge i8 %v, 2
  call void @use(i1 %cmp8) ; true
  %cmp9 = icmp ult i8 %v, 2
  call void @use(i1 %cmp9) ; false
  %cmp10 = icmp ule i8 %v, 254
  call void @use(i1 %cmp10) ; true
  %cmp11 = icmp ugt i8 %v, 254
  call void @use(i1 %cmp11) ; false
  ret void

ed:
  ret void
}

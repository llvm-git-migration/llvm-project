; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=loop-vectorize -force-vector-interleave=1 -force-target-instruction-cost=1 -S < %s | FileCheck %s --check-prefix=CHECK-NODOTPROD
; RUN: opt -mattr=+dotprod -passes=loop-vectorize -force-vector-interleave=1 -force-target-instruction-cost=1 -S < %s | FileCheck %s --check-prefix=CHECK-DOTPROD

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-none-unknown-elf"

define i32 @dotp(ptr %a, ptr %b) #0 {
; CHECK-NODOTPROD-LABEL: define i32 @dotp(
; CHECK-NODOTPROD-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NODOTPROD-NEXT:  iter.check:
; CHECK-NODOTPROD-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NODOTPROD-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-NODOTPROD-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP1]]
; CHECK-NODOTPROD-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
; CHECK-NODOTPROD:       vector.main.loop.iter.check:
; CHECK-NODOTPROD-NEXT:    br i1 true, label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-NODOTPROD:       vector.ph:
; CHECK-NODOTPROD-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-NODOTPROD:       vector.body:
; CHECK-NODOTPROD-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NODOTPROD-NEXT:    [[VEC_PHI:%.*]] = phi <16 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[TMP10:%.*]], [[VECTOR_BODY]] ]
; CHECK-NODOTPROD-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; CHECK-NODOTPROD-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i64 [[TMP2]]
; CHECK-NODOTPROD-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[TMP3]], i32 0
; CHECK-NODOTPROD-NEXT:    [[WIDE_LOAD:%.*]] = load <16 x i8>, ptr [[TMP4]], align 1
; CHECK-NODOTPROD-NEXT:    [[TMP5:%.*]] = zext <16 x i8> [[WIDE_LOAD]] to <16 x i32>
; CHECK-NODOTPROD-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i64 [[TMP2]]
; CHECK-NODOTPROD-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i32 0
; CHECK-NODOTPROD-NEXT:    [[WIDE_LOAD1:%.*]] = load <16 x i8>, ptr [[TMP7]], align 1
; CHECK-NODOTPROD-NEXT:    [[TMP8:%.*]] = zext <16 x i8> [[WIDE_LOAD1]] to <16 x i32>
; CHECK-NODOTPROD-NEXT:    [[TMP9:%.*]] = mul <16 x i32> [[TMP8]], [[TMP5]]
; CHECK-NODOTPROD-NEXT:    [[TMP10]] = add <16 x i32> [[TMP9]], [[VEC_PHI]]
; CHECK-NODOTPROD-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; CHECK-NODOTPROD-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; CHECK-NODOTPROD-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-NODOTPROD:       middle.block:
; CHECK-NODOTPROD-NEXT:    [[TMP12:%.*]] = call i32 @llvm.vector.reduce.add.v16i32(<16 x i32> [[TMP10]])
; CHECK-NODOTPROD-NEXT:    br i1 true, label [[FOR_EXIT:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
; CHECK-NODOTPROD:       vec.epilog.iter.check:
; CHECK-NODOTPROD-NEXT:    [[TMP13:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NODOTPROD-NEXT:    [[TMP14:%.*]] = mul i64 [[TMP13]], 4
; CHECK-NODOTPROD-NEXT:    [[MIN_EPILOG_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP14]]
; CHECK-NODOTPROD-NEXT:    br i1 [[MIN_EPILOG_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
; CHECK-NODOTPROD:       vec.epilog.ph:
; CHECK-NODOTPROD-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-NODOTPROD-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i32 [ [[TMP12]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-NODOTPROD-NEXT:    [[TMP15:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NODOTPROD-NEXT:    [[TMP16:%.*]] = mul i64 [[TMP15]], 4
; CHECK-NODOTPROD-NEXT:    [[N_MOD_VF:%.*]] = urem i64 0, [[TMP16]]
; CHECK-NODOTPROD-NEXT:    [[N_VEC:%.*]] = sub i64 0, [[N_MOD_VF]]
; CHECK-NODOTPROD-NEXT:    [[TMP17:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NODOTPROD-NEXT:    [[TMP18:%.*]] = mul i64 [[TMP17]], 4
; CHECK-NODOTPROD-NEXT:    [[TMP19:%.*]] = insertelement <vscale x 4 x i32> zeroinitializer, i32 [[BC_MERGE_RDX]], i32 0
; CHECK-NODOTPROD-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
; CHECK-NODOTPROD:       vec.epilog.vector.body:
; CHECK-NODOTPROD-NEXT:    [[INDEX2:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT6:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-NODOTPROD-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 4 x i32> [ [[TMP19]], [[VEC_EPILOG_PH]] ], [ [[TMP28:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-NODOTPROD-NEXT:    [[TMP20:%.*]] = add i64 [[INDEX2]], 0
; CHECK-NODOTPROD-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[A]], i64 [[TMP20]]
; CHECK-NODOTPROD-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[TMP21]], i32 0
; CHECK-NODOTPROD-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 4 x i8>, ptr [[TMP22]], align 1
; CHECK-NODOTPROD-NEXT:    [[TMP23:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD4]] to <vscale x 4 x i32>
; CHECK-NODOTPROD-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[B]], i64 [[TMP20]]
; CHECK-NODOTPROD-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[TMP24]], i32 0
; CHECK-NODOTPROD-NEXT:    [[WIDE_LOAD5:%.*]] = load <vscale x 4 x i8>, ptr [[TMP25]], align 1
; CHECK-NODOTPROD-NEXT:    [[TMP26:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD5]] to <vscale x 4 x i32>
; CHECK-NODOTPROD-NEXT:    [[TMP27:%.*]] = mul <vscale x 4 x i32> [[TMP26]], [[TMP23]]
; CHECK-NODOTPROD-NEXT:    [[TMP28]] = add <vscale x 4 x i32> [[TMP27]], [[VEC_PHI3]]
; CHECK-NODOTPROD-NEXT:    [[INDEX_NEXT6]] = add nuw i64 [[INDEX2]], [[TMP18]]
; CHECK-NODOTPROD-NEXT:    [[TMP29:%.*]] = icmp eq i64 [[INDEX_NEXT6]], [[N_VEC]]
; CHECK-NODOTPROD-NEXT:    br i1 [[TMP29]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECK-DOTPROD-LABEL: define i32 @dotp(
; CHECK-DOTPROD-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-DOTPROD-NEXT:  iter.check:
; CHECK-DOTPROD-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-DOTPROD-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-DOTPROD-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP1]]
; CHECK-DOTPROD-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
; CHECK-DOTPROD:       vector.main.loop.iter.check:
; CHECK-DOTPROD-NEXT:    br i1 true, label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-DOTPROD:       vector.ph:
; CHECK-DOTPROD-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-DOTPROD:       vector.body:
; CHECK-DOTPROD-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-DOTPROD-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i32> [ zeroinitializer, [[VECTOR_PH]] ], [ [[PARTIAL_REDUCE:%.*]], [[VECTOR_BODY]] ]
; CHECK-DOTPROD-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 0
; CHECK-DOTPROD-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i64 [[TMP2]]
; CHECK-DOTPROD-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[TMP3]], i32 0
; CHECK-DOTPROD-NEXT:    [[WIDE_LOAD:%.*]] = load <16 x i8>, ptr [[TMP4]], align 1
; CHECK-DOTPROD-NEXT:    [[TMP5:%.*]] = zext <16 x i8> [[WIDE_LOAD]] to <16 x i32>
; CHECK-DOTPROD-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i64 [[TMP2]]
; CHECK-DOTPROD-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP6]], i32 0
; CHECK-DOTPROD-NEXT:    [[WIDE_LOAD1:%.*]] = load <16 x i8>, ptr [[TMP7]], align 1
; CHECK-DOTPROD-NEXT:    [[TMP8:%.*]] = zext <16 x i8> [[WIDE_LOAD1]] to <16 x i32>
; CHECK-DOTPROD-NEXT:    [[TMP9:%.*]] = mul <16 x i32> [[TMP8]], [[TMP5]]
; CHECK-DOTPROD-NEXT:    [[PARTIAL_REDUCE]] = call <4 x i32> @llvm.experimental.vector.partial.reduce.add.v4i32.v16i32(<4 x i32> [[VEC_PHI]], <16 x i32> [[TMP9]])
; CHECK-DOTPROD-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; CHECK-DOTPROD-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[INDEX_NEXT]], 0
; CHECK-DOTPROD-NEXT:    br i1 [[TMP10]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-DOTPROD:       middle.block:
; CHECK-DOTPROD-NEXT:    [[TMP11:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> [[PARTIAL_REDUCE]])
; CHECK-DOTPROD-NEXT:    br i1 true, label [[FOR_EXIT:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
; CHECK-DOTPROD:       vec.epilog.iter.check:
; CHECK-DOTPROD-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-DOTPROD-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 4
; CHECK-DOTPROD-NEXT:    [[MIN_EPILOG_ITERS_CHECK:%.*]] = icmp ult i64 0, [[TMP13]]
; CHECK-DOTPROD-NEXT:    br i1 [[MIN_EPILOG_ITERS_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
; CHECK-DOTPROD:       vec.epilog.ph:
; CHECK-DOTPROD-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-DOTPROD-NEXT:    [[BC_MERGE_RDX:%.*]] = phi i32 [ [[TMP11]], [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-DOTPROD-NEXT:    [[TMP14:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-DOTPROD-NEXT:    [[TMP15:%.*]] = mul i64 [[TMP14]], 4
; CHECK-DOTPROD-NEXT:    [[N_MOD_VF:%.*]] = urem i64 0, [[TMP15]]
; CHECK-DOTPROD-NEXT:    [[N_VEC:%.*]] = sub i64 0, [[N_MOD_VF]]
; CHECK-DOTPROD-NEXT:    [[TMP16:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-DOTPROD-NEXT:    [[TMP17:%.*]] = mul i64 [[TMP16]], 4
; CHECK-DOTPROD-NEXT:    [[TMP18:%.*]] = insertelement <vscale x 4 x i32> zeroinitializer, i32 [[BC_MERGE_RDX]], i32 0
; CHECK-DOTPROD-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
; CHECK-DOTPROD:       vec.epilog.vector.body:
; CHECK-DOTPROD-NEXT:    [[INDEX2:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT6:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-DOTPROD-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 4 x i32> [ [[TMP18]], [[VEC_EPILOG_PH]] ], [ [[TMP27:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-DOTPROD-NEXT:    [[TMP19:%.*]] = add i64 [[INDEX2]], 0
; CHECK-DOTPROD-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i64 [[TMP19]]
; CHECK-DOTPROD-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[TMP20]], i32 0
; CHECK-DOTPROD-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 4 x i8>, ptr [[TMP21]], align 1
; CHECK-DOTPROD-NEXT:    [[TMP22:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD4]] to <vscale x 4 x i32>
; CHECK-DOTPROD-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[B]], i64 [[TMP19]]
; CHECK-DOTPROD-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[TMP23]], i32 0
; CHECK-DOTPROD-NEXT:    [[WIDE_LOAD5:%.*]] = load <vscale x 4 x i8>, ptr [[TMP24]], align 1
; CHECK-DOTPROD-NEXT:    [[TMP25:%.*]] = zext <vscale x 4 x i8> [[WIDE_LOAD5]] to <vscale x 4 x i32>
; CHECK-DOTPROD-NEXT:    [[TMP26:%.*]] = mul <vscale x 4 x i32> [[TMP25]], [[TMP22]]
; CHECK-DOTPROD-NEXT:    [[TMP27]] = add <vscale x 4 x i32> [[TMP26]], [[VEC_PHI3]]
; CHECK-DOTPROD-NEXT:    [[INDEX_NEXT6]] = add nuw i64 [[INDEX2]], [[TMP17]]
; CHECK-DOTPROD-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[INDEX_NEXT6]], [[N_VEC]]
; CHECK-DOTPROD-NEXT:    br i1 [[TMP28]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.body ]
  %accum = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %gep.a = getelementptr i8, ptr %a, i64 %iv
  %load.a = load i8, ptr %gep.a, align 1
  %ext.a = zext i8 %load.a to i32
  %gep.b = getelementptr i8, ptr %b, i64 %iv
  %load.b = load i8, ptr %gep.b, align 1
  %ext.b = zext i8 %load.b to i32
  %mul = mul i32 %ext.b, %ext.a
  %add = add i32 %mul, %accum
  %iv.next = add i64 %iv, 1
  %exitcond.not = icmp eq i64 %iv.next, 0
  br i1 %exitcond.not, label %for.exit, label %for.body

for.exit:                        ; preds = %for.body
  ret i32 %add
}

attributes #0 = { vscale_range(1,16) "target-features"="+sve" }

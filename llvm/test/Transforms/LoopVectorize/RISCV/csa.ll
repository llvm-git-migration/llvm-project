; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -mtriple riscv64 -mattr="+v" -riscv-v-vector-bits-min=256 \
; RUN:   -passes=loop-vectorize -force-tail-folding-style=data-with-evl \
; RUN:   | FileCheck %s -check-prefix=EVL
; RUN: opt < %s -S -mtriple riscv64 -mattr="+v" -riscv-v-vector-bits-min=256 \
; RUN:   -passes=loop-vectorize -force-tail-folding-style=none \
; RUN:   | FileCheck %s -check-prefix=NO-EVL
; RUN: opt < %s -S -mtriple riscv64 -mattr="+v" -riscv-v-vector-bits-min=256 \
; RUN:   -passes=loop-vectorize -force-tail-folding-style=data \
; RUN:   | FileCheck %s -check-prefix=DATA

; This function is generated from the following C/C++ program:
; int simple_csa_int_select(int N, int *data, int a) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (a < data[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define i32 @simple_csa_int_select(i32 %N, ptr %data, i64 %a) {
; EVL-LABEL: @simple_csa_int_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP1]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_int_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP1]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_int_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP1]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.010 = phi i32 [ -1, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %1 = sext i32 %0 to i64
  %cmp1 = icmp slt i64 %a, %1
  %spec.select = select i1 %cmp1, i32 %0, i32 %t.010
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int simple_csa_int_select(int N, int *data) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (i < data[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define i32 @simple_csa_int_select_induction_cmp(i32 %N, ptr %data) {
; EVL-LABEL: @simple_csa_int_select_induction_cmp(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_int_select_induction_cmp(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_int_select_induction_cmp(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_010]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.010 = phi i32 [ -1, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %1 = sext i32 %0 to i64
  %cmp1 = icmp slt i64 %indvars.iv, %1
  %spec.select = select i1 %cmp1, i32 %0, i32 %t.010
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; float simple_csa_float_select(int N, float *data) {
;   float t = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (0.0f < data[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define float @simple_csa_float_select(i32 %N, ptr %data) {
; EVL-LABEL: @simple_csa_float_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP8]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret float [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_09:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; EVL-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP0]], float [[T_09]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_float_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP8]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret float [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_09:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; NO-EVL-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP0]], float [[T_09]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_float_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP8]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret float [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_09:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; DATA-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP0]], float [[T_09]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp8 = icmp sgt i32 %N, 0
  br i1 %cmp8, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %t.0.lcssa = phi float [ 1.000000e+00, %entry ], [ %t.1, %for.body ]
  ret float %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.09 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %data, i64 %indvars.iv
  %0 = load float, ptr %arrayidx, align 4
  %cmp1 = fcmp ogt float %0, 0.000000e+00
  %t.1 = select i1 %cmp1, float %0, float %t.09
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; int simple_csa_int(int N, bool *cond, int *data) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define i32 @simple_csa_int(i32 %N, ptr %cond, ptr %data) {
; EVL-LABEL: @simple_csa_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_07:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_07:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_07:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp6 = icmp sgt i32 %N, 0
  br i1 %cmp6, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %t.1, %for.inc ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.07 = phi i32 [ -1, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds i32, ptr %data, i64 %indvars.iv
  %1 = load i32, ptr %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %t.1 = phi i32 [ %1, %if.then ], [ %t.07, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; float simple_csa_float(int N, bool *cond, float *data) {
;   float t = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define float @simple_csa_float(i32 %N, ptr %cond, ptr %data) {
; EVL-LABEL: @simple_csa_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret float [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_07:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret float [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_07:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret float [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_07:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_07]], [[FOR_BODY]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp6 = icmp sgt i32 %N, 0
  br i1 %cmp6, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi float [ 1.000000e+00, %entry ], [ %t.1, %for.inc ]
  ret float %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.07 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, ptr %data, i64 %indvars.iv
  %1 = load float, ptr %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %t.1 = phi float [ %1, %if.then ], [ %t.07, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_in_series_int_select(int N, int *data0, int *data1, int a) {
;   int t = -1;
;   int s = -1;
;   for (int i = 0; i < N; i++) {
;     if (a < data0[i])
;       t = data0[i];
;     if (a < data1[i])
;       s = data1[i];
;   }
;   return t | s; // use t and s
; }
define i32 @csa_in_series_int_select(i32 %N, ptr %data0, ptr %data1, i64 %a) {
; EVL-LABEL: @csa_in_series_int_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret i32 [[OR]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP2]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; EVL-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[A]], [[TMP4]]
; EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_int_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[OR]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP2]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; NO-EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; NO-EVL-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; NO-EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[A]], [[TMP4]]
; NO-EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_int_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret i32 [[OR]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[A:%.*]], [[TMP2]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; DATA-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; DATA-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; DATA-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[A]], [[TMP4]]
; DATA-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp21 = icmp sgt i32 %N, 0
  br i1 %cmp21, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %0 = or i32 %s.1, %spec.select
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %or = phi i32 [ %0, %for.cond.cleanup.loopexit ], [ -1, %entry ]
  ret i32 %or

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %s.023 = phi i32 [ -1, %for.body.preheader ], [ %s.1, %for.body ]
  %t.022 = phi i32 [ -1, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %1 = load i32, ptr %arrayidx, align 4
  %2 = sext i32 %1 to i64
  %cmp1 = icmp slt i64 %a, %2
  %spec.select = select i1 %cmp1, i32 %1, i32 %t.022
  %arrayidx5 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx5, align 4
  %4 = sext i32 %3 to i64
  %cmp6 = icmp slt i64 %a, %4
  %s.1 = select i1 %cmp6, i32 %3, i32 %s.023
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_in_series_int_select(int N, int *data0, int *data1) {
;   int t = -1;
;   int s = -1;
;   for (int i = 0; i < N; i++) {
;     if (a < data0[i])
;       t = data0[i];
;     if (a < data1[i])
;       s = data1[i];
;   }
;   return t | s; // use t and s
; }
define i32 @csa_in_series_int_select_induction_cmp(i32 %N, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_int_select_induction_cmp(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret i32 [[OR]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; EVL-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP4]]
; EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_int_select_induction_cmp(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[OR]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; NO-EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; NO-EVL-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; NO-EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP4]]
; NO-EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_int_select_induction_cmp(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[SPEC_SELECT_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret i32 [[OR]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_023:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], i32 [[TMP1]], i32 [[T_022]]
; DATA-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; DATA-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP3]] to i64
; DATA-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP4]]
; DATA-NEXT:    [[S_1]] = select i1 [[CMP6]], i32 [[TMP3]], i32 [[S_023]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp21 = icmp sgt i32 %N, 0
  br i1 %cmp21, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %0 = or i32 %s.1, %spec.select
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %or = phi i32 [ %0, %for.cond.cleanup.loopexit ], [ -1, %entry ]
  ret i32 %or

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %s.023 = phi i32 [ -1, %for.body.preheader ], [ %s.1, %for.body ]
  %t.022 = phi i32 [ -1, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %1 = load i32, ptr %arrayidx, align 4
  %2 = sext i32 %1 to i64
  %cmp1 = icmp slt i64 %indvars.iv, %2
  %spec.select = select i1 %cmp1, i32 %1, i32 %t.022
  %arrayidx5 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx5, align 4
  %4 = sext i32 %3 to i64
  %cmp6 = icmp slt i64 %indvars.iv, %4
  %s.1 = select i1 %cmp6, i32 %3, i32 %s.023
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_in_series_float_select(int N, float *data0,
;                           float *data1) {
;   float t = 1.0f;
;   float s = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (0.0f < data0[i])
;       t = data0[i];
;     if (0.0f <data1[i])
;       s = data1[i];
;   }
;   return t + s; // use t and s
; }
define float @csa_in_series_float_select(i32 %N, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_float_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret float [[ADD]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_021:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; EVL-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP1]], float [[T_020]]
; EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; EVL-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP2]], 0.000000e+00
; EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], float [[TMP2]], float [[S_021]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_float_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret float [[ADD]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_021:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; NO-EVL-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP1]], float [[T_020]]
; NO-EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; NO-EVL-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP2]], 0.000000e+00
; NO-EVL-NEXT:    [[S_1]] = select i1 [[CMP6]], float [[TMP2]], float [[S_021]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_float_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret float [[ADD]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_021:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; DATA-NEXT:    [[T_1]] = select i1 [[CMP1]], float [[TMP1]], float [[T_020]]
; DATA-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; DATA-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP2]], 0.000000e+00
; DATA-NEXT:    [[S_1]] = select i1 [[CMP6]], float [[TMP2]], float [[S_021]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp19 = icmp sgt i32 %N, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %0 = fadd float %t.1, %s.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %add = phi float [ %0, %for.cond.cleanup.loopexit ], [ 2.000000e+00, %entry ]
  ret float %add

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %s.021 = phi float [ 1.000000e+00, %for.body.preheader ], [ %s.1, %for.body ]
  %t.020 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %1 = load float, ptr %arrayidx, align 4
  %cmp1 = fcmp ogt float %1, 0.000000e+00
  %t.1 = select i1 %cmp1, float %1, float %t.020
  %arrayidx5 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %2 = load float, ptr %arrayidx5, align 4
  %cmp6 = fcmp ogt float %2, 0.000000e+00
  %s.1 = select i1 %cmp6, float %2, float %s.021
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_in_series_int(int N, bool *cond0, bool *cond1, int *data0, int *data1) {
;   int t = -1;
;   int s = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     if (cond1[i])
;       s = data1[i];
;   }
;   return t | s; // use t and s
; }
define i32 @csa_in_series_int(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret i32 [[OR]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[IF_END]]
; EVL:       if.end:
; EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[S_1]] = phi i32 [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[OR]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[IF_END]]
; NO-EVL:       if.end:
; NO-EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[S_1]] = phi i32 [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret i32 [[OR]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[IF_END]]
; DATA:       if.end:
; DATA-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[S_1]] = phi i32 [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = or i32 %s.1, %t.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %or = phi i32 [ %0, %for.cond.cleanup.loopexit ], [ -1, %entry ]
  ret i32 %or

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.017 = phi i32 [ -1, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.016 = phi i32 [ -1, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %t.1 = phi i32 [ %2, %if.then ], [ %t.016, %for.body ]
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %3 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %3, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %4 = load i32, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then6
  %s.1 = phi i32 [ %4, %if.then6 ], [ %s.017, %if.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_in_series_float(int N, bool *cond0, bool *cond1, float *data0,
;                           float *data1) {
;   float t = 1.0f;
;   float s = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     if (cond1[i])
;       s = data1[i];
;   }
;   return t + s; // use t and s
; }
define float @csa_in_series_float(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret float [[ADD]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[IF_END]]
; EVL:       if.end:
; EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[S_1]] = phi float [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret float [[ADD]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[IF_END]]
; NO-EVL:       if.end:
; NO-EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[S_1]] = phi float [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret float [[ADD]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[IF_END]]
; DATA:       if.end:
; DATA-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[S_1]] = phi float [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_END]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = fadd float %t.1, %s.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %add = phi float [ %0, %for.cond.cleanup.loopexit ], [ 2.000000e+00, %entry ]
  ret float %add

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.017 = phi float [ 1.000000e+00, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.016 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %2 = load float, ptr %arrayidx2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %t.1 = phi float [ %2, %if.then ], [ %t.016, %for.body ]
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %3 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %3, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %4 = load float, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then6
  %s.1 = phi float [ %4, %if.then6 ], [ %s.017, %if.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_in_series_same_scalar_int_select(int N, int *data0,
;                                   int *data1) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (i < data0[i])
;       t = data0[i];
;     if (i < data1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define i32 @csa_in_series_same_scalar_int_select(i32 %N, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_same_scalar_int_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; EVL-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_022]]
; EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; EVL-NEXT:    [[TMP3:%.*]] = sext i32 [[TMP2]] to i64
; EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP3]]
; EVL-NEXT:    [[T_2]] = select i1 [[CMP6]], i32 [[TMP2]], i32 [[SPEC_SELECT]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_same_scalar_int_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; NO-EVL-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_022]]
; NO-EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; NO-EVL-NEXT:    [[TMP3:%.*]] = sext i32 [[TMP2]] to i64
; NO-EVL-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP3]]
; NO-EVL-NEXT:    [[T_2]] = select i1 [[CMP6]], i32 [[TMP2]], i32 [[SPEC_SELECT]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_same_scalar_int_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP21]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_022:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP1:%.*]] = sext i32 [[TMP0]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP1]]
; DATA-NEXT:    [[SPEC_SELECT:%.*]] = select i1 [[CMP1]], i32 [[TMP0]], i32 [[T_022]]
; DATA-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4
; DATA-NEXT:    [[TMP3:%.*]] = sext i32 [[TMP2]] to i64
; DATA-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP3]]
; DATA-NEXT:    [[T_2]] = select i1 [[CMP6]], i32 [[TMP2]], i32 [[SPEC_SELECT]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp21 = icmp sgt i32 %N, 0
  br i1 %cmp21, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %t.2, %for.body ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.022 = phi i32 [ -1, %for.body.preheader ], [ %t.2, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %1 = sext i32 %0 to i64
  %cmp1 = icmp slt i64 %indvars.iv, %1
  %spec.select = select i1 %cmp1, i32 %0, i32 %t.022
  %arrayidx5 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx5, align 4
  %3 = sext i32 %2 to i64
  %cmp6 = icmp slt i64 %indvars.iv, %3
  %t.2 = select i1 %cmp6, i32 %2, i32 %spec.select
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_in_series_same_scalar_float_select(int N,
;                                       float *data0, float *data1) {
;   float t = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (0.0f < data0[i])
;       t = data0[i];
;     if (0.0f < data1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define float @csa_in_series_same_scalar_float_select(i32 %N, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_same_scalar_float_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret float [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; EVL-NEXT:    [[T_1:%.*]] = select i1 [[CMP1]], float [[TMP0]], float [[T_020]]
; EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; EVL-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; EVL-NEXT:    [[T_2]] = select i1 [[CMP6]], float [[TMP1]], float [[T_1]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_same_scalar_float_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret float [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; NO-EVL-NEXT:    [[T_1:%.*]] = select i1 [[CMP1]], float [[TMP0]], float [[T_020]]
; NO-EVL-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; NO-EVL-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; NO-EVL-NEXT:    [[T_2]] = select i1 [[CMP6]], float [[TMP1]], float [[T_1]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_same_scalar_float_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP19:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP19]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret float [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_020:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[CMP1:%.*]] = fcmp ogt float [[TMP0]], 0.000000e+00
; DATA-NEXT:    [[T_1:%.*]] = select i1 [[CMP1]], float [[TMP0]], float [[T_020]]
; DATA-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; DATA-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP1]], 0.000000e+00
; DATA-NEXT:    [[T_2]] = select i1 [[CMP6]], float [[TMP1]], float [[T_1]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp19 = icmp sgt i32 %N, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %t.0.lcssa = phi float [ 1.000000e+00, %entry ], [ %t.2, %for.body ]
  ret float %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.020 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.2, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %0 = load float, ptr %arrayidx, align 4
  %cmp1 = fcmp ogt float %0, 0.000000e+00
  %t.1 = select i1 %cmp1, float %0, float %t.020
  %arrayidx5 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %1 = load float, ptr %arrayidx5, align 4
  %cmp6 = fcmp ogt float %1, 0.000000e+00
  %t.2 = select i1 %cmp6, float %1, float %t.1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_in_series_same_scalar_int(int N, bool *cond0, bool *cond1, int *data0,
;                                   int *data1) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     if (cond1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define i32 @csa_in_series_same_scalar_int(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_same_scalar_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[IF_END]]
; EVL:       if.end:
; EVL-NEXT:    [[T_1:%.*]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_2]] = phi i32 [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_same_scalar_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[IF_END]]
; NO-EVL:       if.end:
; NO-EVL-NEXT:    [[T_1:%.*]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_2]] = phi i32 [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_same_scalar_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_2_LCSSA:%.*]] = phi i32 [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[IF_END]]
; DATA:       if.end:
; DATA-NEXT:    [[T_1:%.*]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_2]] = phi i32 [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %t.2, %for.inc ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.016 = phi i32 [ -1, %for.body.preheader ], [ %t.2, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %1 = load i32, ptr %arrayidx2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %t.1 = phi i32 [ %1, %if.then ], [ %t.016, %for.body ]
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %2 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %2, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then6
  %t.2 = phi i32 [ %3, %if.then6 ], [ %t.1, %if.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_in_series_same_scalar_float(int N, bool *cond0, bool *cond1,
;                                       float *data0, float *data1) {
;   float t = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     if (cond1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define float @csa_in_series_same_scalar_float(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_in_series_same_scalar_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret float [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[IF_END]]
; EVL:       if.end:
; EVL-NEXT:    [[T_1:%.*]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_2]] = phi float [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_in_series_same_scalar_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret float [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[IF_END]]
; NO-EVL:       if.end:
; NO-EVL-NEXT:    [[T_1:%.*]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_2]] = phi float [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_in_series_same_scalar_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_2_LCSSA:%.*]] = phi float [ [[T_2:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_2_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret float [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_2]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[IF_END]]
; DATA:       if.end:
; DATA-NEXT:    [[T_1:%.*]] = phi float [ [[TMP1]], [[IF_THEN]] ], [ [[T_016]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP2]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_2]] = phi float [ [[TMP3]], [[IF_THEN6]] ], [ [[T_1]], [[IF_END]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi float [ 1.000000e+00, %entry ], [ %t.2, %for.inc ]
  ret float %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.016 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.2, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %1 = load float, ptr %arrayidx2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %t.1 = phi float [ %1, %if.then ], [ %t.016, %for.body ]
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %2 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %2, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %3 = load float, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then6
  %t.2 = phi float [ %3, %if.then6 ], [ %t.1, %if.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_same_cond_int(int N, bool *cond, int *data0, int *data1) {
;   int t = -1;
;   int s = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond[i]) {
;       t = data0[i];
;       s = data1[i];
;     }
;   }
;   return t | s; // use t and s
; }
define i32 @csa_same_cond_int(i32 %N, ptr %cond, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_same_cond_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret i32 [[OR]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_011:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX4]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_1]] = phi i32 [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_same_cond_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[OR]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_011:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX4]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_1]] = phi i32 [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_same_cond_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret i32 [[OR]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_011:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX4]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_1]] = phi i32 [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = or i32 %s.1, %t.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %or = phi i32 [ %0, %for.cond.cleanup.loopexit ], [ -1, %entry ]
  ret i32 %or

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.011 = phi i32 [ -1, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.010 = phi i32 [ -1, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %t.1 = phi i32 [ %2, %if.then ], [ %t.010, %for.body ]
  %s.1 = phi i32 [ %3, %if.then ], [ %s.011, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_same_cond_float(int N, bool *cond, float *data0, float *data1) {
;   float t = 1.0f;
;   float s = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond[i]) {
;       t = data0[i];
;       s = data1[i];
;     }
;   }
;   return t + s; // use t and s
; }
define float @csa_same_cond_float(i32 %N, ptr %cond, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_same_cond_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret float [[ADD]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_011:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX4]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; EVL-NEXT:    [[S_1]] = phi float [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_same_cond_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret float [[ADD]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_011:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX4]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[S_1]] = phi float [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_same_cond_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret float [[ADD]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_011:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[FOR_INC]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX4]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_010]], [[FOR_BODY]] ]
; DATA-NEXT:    [[S_1]] = phi float [ [[TMP3]], [[IF_THEN]] ], [ [[S_011]], [[FOR_BODY]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = fadd float %t.1, %s.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %add = phi float [ %0, %for.cond.cleanup.loopexit ], [ 2.000000e+00, %entry ]
  ret float %add

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.011 = phi float [ 1.000000e+00, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.010 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %2 = load float, ptr %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %3 = load float, ptr %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %t.1 = phi float [ %2, %if.then ], [ %t.010, %for.body ]
  %s.1 = phi float [ %3, %if.then ], [ %s.011, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_else_if_same_scalar_int(int N, bool *cond0, bool *cond1, int *data0,
;                                 int *data1) {
;   int t = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     else if (cond1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define i32 @csa_else_if_same_scalar_int(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_else_if_same_scalar_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; EVL:       if.else:
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; EVL:       for.inc.sink.split:
; EVL-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi i32 [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_else_if_same_scalar_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; NO-EVL:       if.else:
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; NO-EVL:       for.inc.sink.split:
; NO-EVL-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi i32 [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_else_if_same_scalar_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ -1, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; DATA:       if.else:
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; DATA:       for.inc.sink.split:
; DATA-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi i32 [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi i32 [ -1, %entry ], [ %t.1, %for.inc ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.016 = phi i32 [ -1, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.else, label %for.inc.sink.split

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %1, 0
  br i1 %tobool5.not, label %for.inc, label %for.inc.sink.split

for.inc.sink.split:                               ; preds = %if.else, %for.body
  %data0.sink = phi ptr [ %data0, %for.body ], [ %data1, %if.else ]
  %arrayidx2 = getelementptr inbounds i32, ptr %data0.sink, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.inc.sink.split, %if.else
  %t.1 = phi i32 [ %t.016, %if.else ], [ %2, %for.inc.sink.split ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_else_if_same_scalar_float(int N, bool *cond0, bool *cond1,
;                                     float *data0, float *data1) {
;   float t = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     else if (cond1[i])
;       t = data1[i];
;   }
;   return t; // use t
; }
define float @csa_else_if_same_scalar_float(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_else_if_same_scalar_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret float [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; EVL:       if.else:
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; EVL:       for.inc.sink.split:
; EVL-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi float [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_else_if_same_scalar_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret float [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; NO-EVL:       if.else:
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; NO-EVL:       for.inc.sink.split:
; NO-EVL-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi float [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_else_if_same_scalar_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi float [ 1.000000e+00, [[ENTRY:%.*]] ], [ [[T_1_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret float [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[FOR_INC_SINK_SPLIT:%.*]]
; DATA:       if.else:
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[FOR_INC_SINK_SPLIT]]
; DATA:       for.inc.sink.split:
; DATA-NEXT:    [[DATA0_SINK:%.*]] = phi ptr [ [[DATA0:%.*]], [[FOR_BODY]] ], [ [[DATA1:%.*]], [[IF_ELSE]] ]
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0_SINK]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi float [ [[T_016]], [[IF_ELSE]] ], [ [[TMP2]], [[FOR_INC_SINK_SPLIT]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %t.0.lcssa = phi float [ 1.000000e+00, %entry ], [ %t.1, %for.inc ]
  ret float %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %t.016 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %0 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.else, label %for.inc.sink.split

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %1, 0
  br i1 %tobool5.not, label %for.inc, label %for.inc.sink.split

for.inc.sink.split:                               ; preds = %if.else, %for.body
  %data0.sink = phi ptr [ %data0, %for.body ], [ %data1, %if.else ]
  %arrayidx2 = getelementptr inbounds float, ptr %data0.sink, i64 %indvars.iv
  %2 = load float, ptr %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.inc.sink.split, %if.else
  %t.1 = phi float [ %t.016, %if.else ], [ %2, %for.inc.sink.split ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; This function is generated from the following C/C++ program:
; int csa_else_if_int(int N, bool *cond0, bool *cond1, int *data0, int *data1) {
;   int t = -1;
;   int s = -1;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     else if (cond1[i])
;       s = data1[i];
;   }
;   return t | s; // use t and s
; }
define i32 @csa_else_if_int(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_else_if_int(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret i32 [[OR]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       if.else:
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; EVL-NEXT:    [[S_1]] = phi i32 [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_else_if_int(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[OR]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       if.else:
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[S_1]] = phi i32 [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_else_if_int(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi i32 [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi i32 [ [[S_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = or i32 [[S_1_LCSSA]], [[T_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[OR:%.*]] = phi i32 [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ -1, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret i32 [[OR]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_017:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi i32 [ -1, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       if.else:
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i32, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi i32 [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; DATA-NEXT:    [[S_1]] = phi i32 [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = or i32 %s.1, %t.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %or = phi i32 [ %0, %for.cond.cleanup.loopexit ], [ -1, %entry ]
  ret i32 %or

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.017 = phi i32 [ -1, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.016 = phi i32 [ -1, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds i32, ptr %data0, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx2, align 4
  br label %for.inc

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %3 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %3, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.else
  %arrayidx8 = getelementptr inbounds i32, ptr %data1, i64 %indvars.iv
  %4 = load i32, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.then6, %if.else
  %t.1 = phi i32 [ %2, %if.then ], [ %t.016, %if.then6 ], [ %t.016, %if.else ]
  %s.1 = phi i32 [ %s.017, %if.then ], [ %4, %if.then6 ], [ %s.017, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; float csa_else_if_float(int N, bool *cond0, bool *cond1, float *data0,
;                         float *data1) {
;   float t = 1.0f;
;   float s = 1.0f;
;   for (int i = 0; i < N; i++) {
;     if (cond0[i])
;       t = data0[i];
;     else if (cond1[i])
;       s = data1[i];
;   }
;   return t + s; // use t and s
; }
define float @csa_else_if_float(i32 %N, ptr %cond0, ptr %cond1, ptr %data0, ptr %data1) {
; EVL-LABEL: @csa_else_if_float(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; EVL-NEXT:    ret float [[ADD]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; EVL-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; EVL:       if.then:
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       if.else:
; EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; EVL:       if.then6:
; EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; EVL-NEXT:    br label [[FOR_INC]]
; EVL:       for.inc:
; EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; EVL-NEXT:    [[S_1]] = phi float [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @csa_else_if_float(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; NO-EVL-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; NO-EVL-NEXT:    ret float [[ADD]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; NO-EVL-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; NO-EVL:       if.then:
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       if.else:
; NO-EVL-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; NO-EVL-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; NO-EVL-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; NO-EVL:       if.then6:
; NO-EVL-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; NO-EVL-NEXT:    br label [[FOR_INC]]
; NO-EVL:       for.inc:
; NO-EVL-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[S_1]] = phi float [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @csa_else_if_float(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP15:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP15]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[T_1_LCSSA:%.*]] = phi float [ [[T_1:%.*]], [[FOR_INC:%.*]] ]
; DATA-NEXT:    [[S_1_LCSSA:%.*]] = phi float [ [[S_1:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[TMP0:%.*]] = fadd float [[T_1_LCSSA]], [[S_1_LCSSA]]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[ADD:%.*]] = phi float [ [[TMP0]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ], [ 2.000000e+00, [[ENTRY:%.*]] ]
; DATA-NEXT:    ret float [[ADD]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC]] ]
; DATA-NEXT:    [[S_017:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[S_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[T_016:%.*]] = phi float [ 1.000000e+00, [[FOR_BODY_PREHEADER]] ], [ [[T_1]], [[FOR_INC]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[COND0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; DATA-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP1]], 0
; DATA-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; DATA:       if.then:
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[DATA0:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       if.else:
; DATA-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i8, ptr [[COND1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1
; DATA-NEXT:    [[TOBOOL5_NOT:%.*]] = icmp eq i8 [[TMP3]], 0
; DATA-NEXT:    br i1 [[TOBOOL5_NOT]], label [[FOR_INC]], label [[IF_THEN6:%.*]]
; DATA:       if.then6:
; DATA-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[DATA1:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; DATA-NEXT:    br label [[FOR_INC]]
; DATA:       for.inc:
; DATA-NEXT:    [[T_1]] = phi float [ [[TMP2]], [[IF_THEN]] ], [ [[T_016]], [[IF_THEN6]] ], [ [[T_016]], [[IF_ELSE]] ]
; DATA-NEXT:    [[S_1]] = phi float [ [[S_017]], [[IF_THEN]] ], [ [[TMP4]], [[IF_THEN6]] ], [ [[S_017]], [[IF_ELSE]] ]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp15 = icmp sgt i32 %N, 0
  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %0 = fadd float %t.1, %s.1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %add = phi float [ %0, %for.cond.cleanup.loopexit ], [ 2.000000e+00, %entry ]
  ret float %add

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %s.017 = phi float [ 1.000000e+00, %for.body.preheader ], [ %s.1, %for.inc ]
  %t.016 = phi float [ 1.000000e+00, %for.body.preheader ], [ %t.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %cond0, i64 %indvars.iv
  %1 = load i8, ptr %arrayidx, align 1
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, ptr %data0, i64 %indvars.iv
  %2 = load float, ptr %arrayidx2, align 4
  br label %for.inc

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds i8, ptr %cond1, i64 %indvars.iv
  %3 = load i8, ptr %arrayidx4, align 1
  %tobool5.not = icmp eq i8 %3, 0
  br i1 %tobool5.not, label %for.inc, label %if.then6

if.then6:                                         ; preds = %if.else
  %arrayidx8 = getelementptr inbounds float, ptr %data1, i64 %indvars.iv
  %4 = load float, ptr %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.then6, %if.else
  %t.1 = phi float [ %2, %if.then ], [ %t.016, %if.then6 ], [ %t.016, %if.else ]
  %s.1 = phi float [ %s.017, %if.then ], [ %4, %if.then6 ], [ %s.017, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; uint64_t idx_scalar(int64_t *a, int64_t *b, uint64_t ii, uint64_t n) {
;   uint64_t idx = ii;
;   for (uint64_t i = 0; i < n; ++i)
;     idx = (a[i] > b[i]) ? i : idx;
;   return idx;
; }
define i64 @idx_scalar(ptr %a, ptr %b, i64 %ii, i64 %n) {
; EVL-LABEL: @idx_scalar(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP8_NOT:%.*]] = icmp eq i64 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP8_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i64 [[IDX_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[I_010:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; EVL-NEXT:    [[IDX_09:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[I_010]]
; EVL-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; EVL-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[I_010]]
; EVL-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX1]], align 8
; EVL-NEXT:    [[CMP2:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; EVL-NEXT:    [[COND]] = select i1 [[CMP2]], i64 [[I_010]], i64 [[IDX_09]]
; EVL-NEXT:    [[INC]] = add nuw i64 [[I_010]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @idx_scalar(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP8_NOT:%.*]] = icmp eq i64 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP8_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i64 [[IDX_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[I_010:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; NO-EVL-NEXT:    [[IDX_09:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[I_010]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; NO-EVL-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[I_010]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX1]], align 8
; NO-EVL-NEXT:    [[CMP2:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; NO-EVL-NEXT:    [[COND]] = select i1 [[CMP2]], i64 [[I_010]], i64 [[IDX_09]]
; NO-EVL-NEXT:    [[INC]] = add nuw i64 [[I_010]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @idx_scalar(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP8_NOT:%.*]] = icmp eq i64 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP8_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i64 [[IDX_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[I_010:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; DATA-NEXT:    [[IDX_09:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[I_010]]
; DATA-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; DATA-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[I_010]]
; DATA-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX1]], align 8
; DATA-NEXT:    [[CMP2:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; DATA-NEXT:    [[COND]] = select i1 [[CMP2]], i64 [[I_010]], i64 [[IDX_09]]
; DATA-NEXT:    [[INC]] = add nuw i64 [[I_010]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp8.not = icmp eq i64 %n, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %cond.lcssa = phi i64 [ %cond, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %idx.0.lcssa = phi i64 [ %ii, %entry ], [ %cond.lcssa, %for.cond.cleanup.loopexit ]
  ret i64 %idx.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.010 = phi i64 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idx.09 = phi i64 [ %cond, %for.body ], [ %ii, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i64, ptr %a, i64 %i.010
  %0 = load i64, ptr %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %b, i64 %i.010
  %1 = load i64, ptr %arrayidx1, align 8
  %cmp2 = icmp sgt i64 %0, %1
  %cond = select i1 %cmp2, i64 %i.010, i64 %idx.09
  %inc = add nuw i64 %i.010, 1
  %exitcond.not = icmp eq i64 %inc, %n
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; uint64_t idx_scalar_dec(int64_t *a, int64_t *b, uint64_t ii, uint64_t n) {
;   uint64_t idx = ii;
;   for (uint64_t i = n; i > 0; --i) // decreasing
;      idx = (a[i - 1] > b[i - 1]) ? i : idx;
;   return idx;
; }
define dso_local i64 @idx_scalar_dec(ptr %a, ptr %b, i64 %ii, i64 %n) {
; EVL-LABEL: @idx_scalar_dec(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP_NOT9:%.*]] = icmp eq i64 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP_NOT9]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i64 [[IDX_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[I_011:%.*]] = phi i64 [ [[SUB:%.*]], [[FOR_BODY]] ], [ [[N]], [[FOR_BODY_PREHEADER]] ]
; EVL-NEXT:    [[IDX_010:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; EVL-NEXT:    [[SUB]] = add i64 [[I_011]], -1
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[SUB]]
; EVL-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[SUB]]
; EVL-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX2]], align 8
; EVL-NEXT:    [[CMP3:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; EVL-NEXT:    [[COND]] = select i1 [[CMP3]], i64 [[I_011]], i64 [[IDX_010]]
; EVL-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SUB]], 0
; EVL-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @idx_scalar_dec(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP_NOT9:%.*]] = icmp eq i64 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP_NOT9]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i64 [[IDX_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[I_011:%.*]] = phi i64 [ [[SUB:%.*]], [[FOR_BODY]] ], [ [[N]], [[FOR_BODY_PREHEADER]] ]
; NO-EVL-NEXT:    [[IDX_010:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; NO-EVL-NEXT:    [[SUB]] = add i64 [[I_011]], -1
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[SUB]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; NO-EVL-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[SUB]]
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX2]], align 8
; NO-EVL-NEXT:    [[CMP3:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; NO-EVL-NEXT:    [[COND]] = select i1 [[CMP3]], i64 [[I_011]], i64 [[IDX_010]]
; NO-EVL-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SUB]], 0
; NO-EVL-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @idx_scalar_dec(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP_NOT9:%.*]] = icmp eq i64 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP_NOT9]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[COND_LCSSA:%.*]] = phi i64 [ [[COND:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[IDX_0_LCSSA:%.*]] = phi i64 [ [[II:%.*]], [[ENTRY:%.*]] ], [ [[COND_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i64 [[IDX_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[I_011:%.*]] = phi i64 [ [[SUB:%.*]], [[FOR_BODY]] ], [ [[N]], [[FOR_BODY_PREHEADER]] ]
; DATA-NEXT:    [[IDX_010:%.*]] = phi i64 [ [[COND]], [[FOR_BODY]] ], [ [[II]], [[FOR_BODY_PREHEADER]] ]
; DATA-NEXT:    [[SUB]] = add i64 [[I_011]], -1
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[A:%.*]], i64 [[SUB]]
; DATA-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ARRAYIDX]], align 8
; DATA-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i64, ptr [[B:%.*]], i64 [[SUB]]
; DATA-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ARRAYIDX2]], align 8
; DATA-NEXT:    [[CMP3:%.*]] = icmp sgt i64 [[TMP0]], [[TMP1]]
; DATA-NEXT:    [[COND]] = select i1 [[CMP3]], i64 [[I_011]], i64 [[IDX_010]]
; DATA-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[SUB]], 0
; DATA-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp.not9 = icmp eq i64 %n, 0
  br i1 %cmp.not9, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %cond.lcssa = phi i64 [ %cond, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %idx.0.lcssa = phi i64 [ %ii, %entry ], [ %cond.lcssa, %for.cond.cleanup.loopexit ]
  ret i64 %idx.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.011 = phi i64 [ %sub, %for.body ], [ %n, %for.body.preheader ]
  %idx.010 = phi i64 [ %cond, %for.body ], [ %ii, %for.body.preheader ]
  %sub = add i64 %i.011, -1
  %arrayidx = getelementptr inbounds i64, ptr %a, i64 %sub
  %0 = load i64, ptr %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds i64, ptr %b, i64 %sub
  %1 = load i64, ptr %arrayidx2, align 8
  %cmp3 = icmp sgt i64 %0, %1
  %cond = select i1 %cmp3, i64 %i.011, i64 %idx.010
  %cmp.not = icmp eq i64 %sub, 0
  br i1 %cmp.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; The key part of this function is that the true arm of the select corresponds
; to selecting the initial value, instead of selecting the new value.
; int simple_csa_int_select_neg_cond(int N, int *data) {
;   int t = 0;
;   for (int i = 0; i < N; i++) {
;     if (i != data[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define i32 @simple_csa_int_select_neg_cond(i32 %N, ptr %data) {
; EVL-LABEL: @simple_csa_int_select_neg_cond(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi i32 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; EVL-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; EVL-NEXT:    [[CMP1_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[TMP1]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1_NOT]], i32 [[T_010]], i32 [[TMP0]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_int_select_neg_cond(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret i32 [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi i32 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; NO-EVL-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; NO-EVL-NEXT:    [[CMP1_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[TMP1]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1_NOT]], i32 [[T_010]], i32 [[TMP0]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_int_select_neg_cond(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret i32 [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi i32 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; DATA-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; DATA-NEXT:    [[CMP1_NOT:%.*]] = icmp eq i64 [[INDVARS_IV]], [[TMP1]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1_NOT]], i32 [[T_010]], i32 [[TMP0]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %t.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  ret i32 %t.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.010 = phi i32 [ 0, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %data, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %1 = zext i32 %0 to i64
  %cmp1.not = icmp eq i64 %indvars.iv, %1
  %spec.select = select i1 %cmp1.not, i32 %t.010, i32 %0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; This function is generated from the following C/C++ program:
; int *simple_csa_ptr_select(int N, int **data) {
;   int *t = nullptr;
;   for (int i = 0; i < N; i++) {
;     if (i < *data[i])
;       t = data[i];
;   }
;   return t; // use t
; }
define ptr @simple_csa_ptr_select(i32 %N, ptr %data) {
; EVL-LABEL: @simple_csa_ptr_select(
; EVL-NEXT:  entry:
; EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; EVL:       for.body.preheader:
; EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; EVL-NEXT:    br label [[FOR_BODY:%.*]]
; EVL:       for.cond.cleanup.loopexit:
; EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi ptr [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; EVL:       for.cond.cleanup:
; EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi ptr [ null, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; EVL-NEXT:    ret ptr [[T_0_LCSSA]]
; EVL:       for.body:
; EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; EVL-NEXT:    [[T_010:%.*]] = phi ptr [ null, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds ptr, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; EVL-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARRAYIDX]], align 8
; EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], ptr [[TMP0]], ptr [[T_010]]
; EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; NO-EVL-LABEL: @simple_csa_ptr_select(
; NO-EVL-NEXT:  entry:
; NO-EVL-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; NO-EVL-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-EVL:       for.body.preheader:
; NO-EVL-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; NO-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; NO-EVL:       for.cond.cleanup.loopexit:
; NO-EVL-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi ptr [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    br label [[FOR_COND_CLEANUP]]
; NO-EVL:       for.cond.cleanup:
; NO-EVL-NEXT:    [[T_0_LCSSA:%.*]] = phi ptr [ null, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; NO-EVL-NEXT:    ret ptr [[T_0_LCSSA]]
; NO-EVL:       for.body:
; NO-EVL-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[T_010:%.*]] = phi ptr [ null, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; NO-EVL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds ptr, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; NO-EVL-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARRAYIDX]], align 8
; NO-EVL-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; NO-EVL-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; NO-EVL-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; NO-EVL-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], ptr [[TMP0]], ptr [[T_010]]
; NO-EVL-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-EVL-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-EVL-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
; DATA-LABEL: @simple_csa_ptr_select(
; DATA-NEXT:  entry:
; DATA-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[N:%.*]], 0
; DATA-NEXT:    br i1 [[CMP9]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; DATA:       for.body.preheader:
; DATA-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; DATA-NEXT:    br label [[FOR_BODY:%.*]]
; DATA:       for.cond.cleanup.loopexit:
; DATA-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi ptr [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    br label [[FOR_COND_CLEANUP]]
; DATA:       for.cond.cleanup:
; DATA-NEXT:    [[T_0_LCSSA:%.*]] = phi ptr [ null, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_COND_CLEANUP_LOOPEXIT:%.*]] ]
; DATA-NEXT:    ret ptr [[T_0_LCSSA]]
; DATA:       for.body:
; DATA-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; DATA-NEXT:    [[T_010:%.*]] = phi ptr [ null, [[FOR_BODY_PREHEADER]] ], [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; DATA-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds ptr, ptr [[DATA:%.*]], i64 [[INDVARS_IV]]
; DATA-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARRAYIDX]], align 8
; DATA-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; DATA-NEXT:    [[TMP2:%.*]] = sext i32 [[TMP1]] to i64
; DATA-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[INDVARS_IV]], [[TMP2]]
; DATA-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP1]], ptr [[TMP0]], ptr [[T_010]]
; DATA-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DATA-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; DATA-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]]
;
entry:
  %cmp9 = icmp sgt i32 %N, 0
  br i1 %cmp9, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:
  %spec.select.lcssa = phi ptr [ %spec.select, %for.body ]
  br label %for.cond.cleanup

for.cond.cleanup:
  %t.0.lcssa = phi ptr [ null, %entry ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  ret ptr %t.0.lcssa

for.body:
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %t.010 = phi ptr [ null, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds ptr, ptr %data, i64 %indvars.iv
  %0 = load ptr, ptr %arrayidx, align 8
  %1 = load i32, ptr %0, align 4
  %2 = sext i32 %1 to i64
  %cmp1 = icmp slt i64 %indvars.iv, %2
  %spec.select = select i1 %cmp1, ptr %0, ptr %t.010
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=loop-vectorize -force-vector-interleave=1 -force-vector-width=4 -S %s | FileCheck --check-prefix=VF4 %s
; RUN: opt -passes=loop-vectorize -force-vector-interleave=2 -force-vector-width=1 -S %s | FileCheck --check-prefix=IC2 %s

; rdar://problem/12848162

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"

@a = common global [2048 x i32] zeroinitializer, align 16

define void @example12() {
; VF4-LABEL: define void @example12() {
; VF4-NEXT:  entry:
; VF4-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; VF4:       vector.ph:
; VF4-NEXT:    br label [[VECTOR_BODY:%.*]]
; VF4:       vector.body:
; VF4-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[TMP3:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; VF4-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP0]]
; VF4-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; VF4-NEXT:    store <4 x i32> [[VEC_IND]], ptr [[TMP2]], align 4
; VF4-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
; VF4-NEXT:    [[TMP3]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; VF4-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; VF4-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; VF4:       middle.block:
; VF4-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; VF4:       scalar.ph:
; VF4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1024, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; VF4-NEXT:    br label [[LOOP:%.*]]
; VF4:       loop:
; VF4-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; VF4-NEXT:    [[GEP:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[IV]]
; VF4-NEXT:    [[IV_TRUNC:%.*]] = trunc i64 [[IV]] to i32
; VF4-NEXT:    store i32 [[IV_TRUNC]], ptr [[GEP]], align 4
; VF4-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; VF4-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc i64 [[IV_NEXT]] to i32
; VF4-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[IV_NEXT_TRUNC]], 1024
; VF4-NEXT:    br i1 [[EXITCOND]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP3:![0-9]+]]
; VF4:       exit:
; VF4-NEXT:    ret void
;
; IC2-LABEL: define void @example12() {
; IC2-NEXT:  entry:
; IC2-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; IC2:       vector.ph:
; IC2-NEXT:    br label [[VECTOR_BODY:%.*]]
; IC2:       vector.body:
; IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; IC2-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; IC2-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 1
; IC2-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP0]]
; IC2-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP1]]
; IC2-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP0]] to i32
; IC2-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP1]] to i32
; IC2-NEXT:    store i32 [[TMP4]], ptr [[TMP2]], align 4
; IC2-NEXT:    store i32 [[TMP5]], ptr [[TMP3]], align 4
; IC2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; IC2-NEXT:    [[TMP6:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; IC2-NEXT:    br i1 [[TMP6]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; IC2:       middle.block:
; IC2-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; IC2:       scalar.ph:
; IC2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1024, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; IC2-NEXT:    br label [[LOOP:%.*]]
; IC2:       loop:
; IC2-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; IC2-NEXT:    [[GEP:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[IV]]
; IC2-NEXT:    [[IV_TRUNC:%.*]] = trunc i64 [[IV]] to i32
; IC2-NEXT:    store i32 [[IV_TRUNC]], ptr [[GEP]], align 4
; IC2-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; IC2-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc i64 [[IV_NEXT]] to i32
; IC2-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[IV_NEXT_TRUNC]], 1024
; IC2-NEXT:    br i1 [[EXITCOND]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP3:![0-9]+]]
; IC2:       exit:
; IC2-NEXT:    ret void
;
entry:
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %gep = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 %iv
  %iv.trunc = trunc i64 %iv to i32
  store i32 %iv.trunc, ptr %gep, align 4
  %iv.next = add i64 %iv, 1
  %iv.next.trunc = trunc i64 %iv.next to i32
  %exitcond = icmp eq i32 %iv.next.trunc, 1024
  br i1 %exitcond, label %exit, label %loop

exit:
  ret void
}

define void @redundant_iv_cast(ptr %dst) {
; VF4-LABEL: define void @redundant_iv_cast(
; VF4-SAME: ptr [[DST:%.*]]) {
; VF4-NEXT:  entry:
; VF4-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; VF4:       vector.ph:
; VF4-NEXT:    br label [[VECTOR_BODY:%.*]]
; VF4:       vector.body:
; VF4-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[VEC_IND:%.*]] = phi <4 x i16> [ <i16 0, i16 1, i16 2, i16 3>, [[VECTOR_PH]] ], [ [[TMP3:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[OFFSET_IDX:%.*]] = trunc i32 [[INDEX]] to i16
; VF4-NEXT:    [[TMP0:%.*]] = add i16 [[OFFSET_IDX]], 0
; VF4-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i16, ptr [[DST]], i16 [[TMP0]]
; VF4-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i16, ptr [[TMP1]], i32 0
; VF4-NEXT:    store <4 x i16> [[VEC_IND]], ptr [[TMP2]], align 2
; VF4-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4
; VF4-NEXT:    [[TMP3]] = add <4 x i16> [[VEC_IND]], <i16 4, i16 4, i16 4, i16 4>
; VF4-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[INDEX_NEXT]], 10000
; VF4-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; VF4:       middle.block:
; VF4-NEXT:    br i1 false, label [[EXIT:%.*]], label [[SCALAR_PH]]
; VF4:       scalar.ph:
; VF4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i16 [ 10000, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; VF4-NEXT:    br label [[LOOP:%.*]]
; VF4:       loop:
; VF4-NEXT:    [[J_0:%.*]] = phi i16 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INC:%.*]], [[LOOP]] ]
; VF4-NEXT:    [[EXT:%.*]] = zext i16 [[J_0]] to i32
; VF4-NEXT:    [[TRUNC:%.*]] = trunc i32 [[EXT]] to i16
; VF4-NEXT:    [[GEP:%.*]] = getelementptr inbounds i16, ptr [[DST]], i16 [[J_0]]
; VF4-NEXT:    store i16 [[TRUNC]], ptr [[GEP]], align 2
; VF4-NEXT:    [[TMP5:%.*]] = icmp eq i16 10000, [[J_0]]
; VF4-NEXT:    [[INC]] = add i16 [[J_0]], 1
; VF4-NEXT:    br i1 [[TMP5]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]
; VF4:       exit:
; VF4-NEXT:    ret void
;
; IC2-LABEL: define void @redundant_iv_cast(
; IC2-SAME: ptr [[DST:%.*]]) {
; IC2-NEXT:  entry:
; IC2-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; IC2:       vector.ph:
; IC2-NEXT:    br label [[VECTOR_BODY:%.*]]
; IC2:       vector.body:
; IC2-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; IC2-NEXT:    [[OFFSET_IDX:%.*]] = trunc i32 [[INDEX]] to i16
; IC2-NEXT:    [[TMP0:%.*]] = add i16 [[OFFSET_IDX]], 0
; IC2-NEXT:    [[TMP1:%.*]] = add i16 [[OFFSET_IDX]], 1
; IC2-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i16, ptr [[DST]], i16 [[TMP0]]
; IC2-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i16, ptr [[DST]], i16 [[TMP1]]
; IC2-NEXT:    store i16 [[TMP0]], ptr [[TMP2]], align 2
; IC2-NEXT:    store i16 [[TMP1]], ptr [[TMP3]], align 2
; IC2-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 2
; IC2-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[INDEX_NEXT]], 10000
; IC2-NEXT:    br i1 [[TMP4]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; IC2:       middle.block:
; IC2-NEXT:    br i1 false, label [[EXIT:%.*]], label [[SCALAR_PH]]
; IC2:       scalar.ph:
; IC2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i16 [ 10000, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; IC2-NEXT:    br label [[LOOP:%.*]]
; IC2:       loop:
; IC2-NEXT:    [[J_0:%.*]] = phi i16 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INC:%.*]], [[LOOP]] ]
; IC2-NEXT:    [[EXT:%.*]] = zext i16 [[J_0]] to i32
; IC2-NEXT:    [[TRUNC:%.*]] = trunc i32 [[EXT]] to i16
; IC2-NEXT:    [[GEP:%.*]] = getelementptr inbounds i16, ptr [[DST]], i16 [[J_0]]
; IC2-NEXT:    store i16 [[TRUNC]], ptr [[GEP]], align 2
; IC2-NEXT:    [[TMP5:%.*]] = icmp eq i16 10000, [[J_0]]
; IC2-NEXT:    [[INC]] = add i16 [[J_0]], 1
; IC2-NEXT:    br i1 [[TMP5]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP5:![0-9]+]]
; IC2:       exit:
; IC2-NEXT:    ret void
;
entry:
  br label %loop

loop:
  %j.0 = phi i16 [ 0, %entry ], [ %inc, %loop ]
  %ext = zext i16 %j.0 to i32
  %trunc = trunc i32 %ext to i16
  %gep = getelementptr inbounds i16, ptr %dst, i16 %j.0
  store i16 %trunc, ptr %gep
  %0 = icmp eq i16 10000, %j.0
  %inc = add i16 %j.0, 1
  br i1 %0, label %exit, label %loop


exit:
  ret void
}


define void @cast_variable_step(i64 %step) {
; VF4-LABEL: define void @cast_variable_step(
; VF4-SAME: i64 [[STEP:%.*]]) {
; VF4-NEXT:  entry:
; VF4-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; VF4:       vector.ph:
; VF4-NEXT:    [[TMP0:%.*]] = mul i64 1024, [[STEP]]
; VF4-NEXT:    [[IND_END:%.*]] = add i64 10, [[TMP0]]
; VF4-NEXT:    [[TMP1:%.*]] = trunc i64 [[STEP]] to i32
; VF4-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[TMP1]], i64 0
; VF4-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <4 x i32> [[DOTSPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; VF4-NEXT:    [[TMP2:%.*]] = mul <4 x i32> <i32 0, i32 1, i32 2, i32 3>, [[DOTSPLAT]]
; VF4-NEXT:    [[INDUCTION:%.*]] = add <4 x i32> <i32 10, i32 10, i32 10, i32 10>, [[TMP2]]
; VF4-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[STEP]], i64 0
; VF4-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; VF4-NEXT:    br label [[VECTOR_BODY:%.*]]
; VF4:       vector.body:
; VF4-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ [[INDUCTION]], [[VECTOR_PH]] ], [ [[TMP8:%.*]], [[VECTOR_BODY]] ]
; VF4-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 0
; VF4-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP3]]
; VF4-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 0
; VF4-NEXT:    store <4 x i32> [[VEC_IND]], ptr [[TMP5]], align 4
; VF4-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
; VF4-NEXT:    [[TMP6:%.*]] = mul <4 x i64> <i64 4, i64 4, i64 4, i64 4>, [[BROADCAST_SPLAT]]
; VF4-NEXT:    [[TMP7:%.*]] = trunc <4 x i64> [[TMP6]] to <4 x i32>
; VF4-NEXT:    [[TMP8]] = add <4 x i32> [[VEC_IND]], [[TMP7]]
; VF4-NEXT:    [[TMP9:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; VF4-NEXT:    br i1 [[TMP9]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; VF4:       middle.block:
; VF4-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; VF4:       scalar.ph:
; VF4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1024, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; VF4-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 10, [[ENTRY]] ]
; VF4-NEXT:    br label [[LOOP:%.*]]
; VF4:       loop:
; VF4-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; VF4-NEXT:    [[IV_2:%.*]] = phi i64 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[IV_2_NEXT:%.*]], [[LOOP]] ]
; VF4-NEXT:    [[GEP:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[IV]]
; VF4-NEXT:    [[IV_2_TRUNC:%.*]] = trunc i64 [[IV_2]] to i32
; VF4-NEXT:    store i32 [[IV_2_TRUNC]], ptr [[GEP]], align 4
; VF4-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; VF4-NEXT:    [[IV_2_NEXT]] = add i64 [[IV_2]], [[STEP]]
; VF4-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[IV_NEXT]], 1024
; VF4-NEXT:    br i1 [[EXITCOND]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP7:![0-9]+]]
; VF4:       exit:
; VF4-NEXT:    ret void
;
; IC2-LABEL: define void @cast_variable_step(
; IC2-SAME: i64 [[STEP:%.*]]) {
; IC2-NEXT:  entry:
; IC2-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; IC2:       vector.ph:
; IC2-NEXT:    [[TMP0:%.*]] = mul i64 1024, [[STEP]]
; IC2-NEXT:    [[IND_END:%.*]] = add i64 10, [[TMP0]]
; IC2-NEXT:    br label [[VECTOR_BODY:%.*]]
; IC2:       vector.body:
; IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; IC2-NEXT:    [[TMP1:%.*]] = add i64 [[INDEX]], 0
; IC2-NEXT:    [[TMP2:%.*]] = add i64 [[INDEX]], 1
; IC2-NEXT:    [[TMP3:%.*]] = mul i64 [[INDEX]], [[STEP]]
; IC2-NEXT:    [[OFFSET_IDX:%.*]] = add i64 10, [[TMP3]]
; IC2-NEXT:    [[TMP4:%.*]] = mul i64 0, [[STEP]]
; IC2-NEXT:    [[TMP5:%.*]] = add i64 [[OFFSET_IDX]], [[TMP4]]
; IC2-NEXT:    [[TMP6:%.*]] = mul i64 1, [[STEP]]
; IC2-NEXT:    [[TMP7:%.*]] = add i64 [[OFFSET_IDX]], [[TMP6]]
; IC2-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP1]]
; IC2-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[TMP2]]
; IC2-NEXT:    [[TMP10:%.*]] = trunc i64 [[TMP5]] to i32
; IC2-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP7]] to i32
; IC2-NEXT:    store i32 [[TMP10]], ptr [[TMP8]], align 4
; IC2-NEXT:    store i32 [[TMP11]], ptr [[TMP9]], align 4
; IC2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 2
; IC2-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; IC2-NEXT:    br i1 [[TMP12]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; IC2:       middle.block:
; IC2-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; IC2:       scalar.ph:
; IC2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 1024, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; IC2-NEXT:    [[BC_RESUME_VAL1:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 10, [[ENTRY]] ]
; IC2-NEXT:    br label [[LOOP:%.*]]
; IC2:       loop:
; IC2-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; IC2-NEXT:    [[IV_2:%.*]] = phi i64 [ [[BC_RESUME_VAL1]], [[SCALAR_PH]] ], [ [[IV_2_NEXT:%.*]], [[LOOP]] ]
; IC2-NEXT:    [[GEP:%.*]] = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 [[IV]]
; IC2-NEXT:    [[IV_2_TRUNC:%.*]] = trunc i64 [[IV_2]] to i32
; IC2-NEXT:    store i32 [[IV_2_TRUNC]], ptr [[GEP]], align 4
; IC2-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; IC2-NEXT:    [[IV_2_NEXT]] = add i64 [[IV_2]], [[STEP]]
; IC2-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[IV_NEXT]], 1024
; IC2-NEXT:    br i1 [[EXITCOND]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP7:![0-9]+]]
; IC2:       exit:
; IC2-NEXT:    ret void
;

entry:
  br label %loop

loop:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
  %iv.2 = phi i64 [ 10, %entry ], [ %iv.2.next, %loop ]
  %gep = getelementptr inbounds [2048 x i32], ptr @a, i64 0, i64 %iv
  %iv.2.trunc = trunc i64 %iv.2 to i32
  store i32 %iv.2.trunc, ptr %gep, align 4
  %iv.next = add i64 %iv, 1
  %iv.2.next = add i64 %iv.2, %step
  %exitcond = icmp eq i64 %iv.next, 1024
  br i1 %exitcond, label %exit, label %loop

exit:
  ret void
}

define void @cast_induction_tail_folding(ptr %A) {
; VF4-LABEL: define void @cast_induction_tail_folding(
; VF4-SAME: ptr [[A:%.*]]) {
; VF4-NEXT:  entry:
; VF4-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; VF4:       vector.ph:
; VF4-NEXT:    br label [[VECTOR_BODY:%.*]]
; VF4:       vector.body:
; VF4-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE6:%.*]] ]
; VF4-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[TMP18:%.*]], [[PRED_STORE_CONTINUE6]] ]
; VF4-NEXT:    [[TMP0:%.*]] = icmp ule <4 x i32> [[VEC_IND]], <i32 2, i32 2, i32 2, i32 2>
; VF4-NEXT:    [[TMP1:%.*]] = sext <4 x i32> [[VEC_IND]] to <4 x i64>
; VF4-NEXT:    [[TMP2:%.*]] = extractelement <4 x i1> [[TMP0]], i32 0
; VF4-NEXT:    br i1 [[TMP2]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; VF4:       pred.store.if:
; VF4-NEXT:    [[TMP3:%.*]] = extractelement <4 x i64> [[TMP1]], i32 0
; VF4-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP3]]
; VF4-NEXT:    [[TMP5:%.*]] = add i32 [[INDEX]], 0
; VF4-NEXT:    store i32 [[TMP5]], ptr [[TMP4]], align 4
; VF4-NEXT:    br label [[PRED_STORE_CONTINUE]]
; VF4:       pred.store.continue:
; VF4-NEXT:    [[TMP6:%.*]] = extractelement <4 x i1> [[TMP0]], i32 1
; VF4-NEXT:    br i1 [[TMP6]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2:%.*]]
; VF4:       pred.store.if1:
; VF4-NEXT:    [[TMP7:%.*]] = extractelement <4 x i64> [[TMP1]], i32 1
; VF4-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP7]]
; VF4-NEXT:    [[TMP9:%.*]] = add i32 [[INDEX]], 1
; VF4-NEXT:    store i32 [[TMP9]], ptr [[TMP8]], align 4
; VF4-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; VF4:       pred.store.continue2:
; VF4-NEXT:    [[TMP10:%.*]] = extractelement <4 x i1> [[TMP0]], i32 2
; VF4-NEXT:    br i1 [[TMP10]], label [[PRED_STORE_IF3:%.*]], label [[PRED_STORE_CONTINUE4:%.*]]
; VF4:       pred.store.if3:
; VF4-NEXT:    [[TMP11:%.*]] = extractelement <4 x i64> [[TMP1]], i32 2
; VF4-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP11]]
; VF4-NEXT:    [[TMP13:%.*]] = add i32 [[INDEX]], 2
; VF4-NEXT:    store i32 [[TMP13]], ptr [[TMP12]], align 4
; VF4-NEXT:    br label [[PRED_STORE_CONTINUE4]]
; VF4:       pred.store.continue4:
; VF4-NEXT:    [[TMP14:%.*]] = extractelement <4 x i1> [[TMP0]], i32 3
; VF4-NEXT:    br i1 [[TMP14]], label [[PRED_STORE_IF5:%.*]], label [[PRED_STORE_CONTINUE6]]
; VF4:       pred.store.if5:
; VF4-NEXT:    [[TMP15:%.*]] = extractelement <4 x i64> [[TMP1]], i32 3
; VF4-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP15]]
; VF4-NEXT:    [[TMP17:%.*]] = add i32 [[INDEX]], 3
; VF4-NEXT:    store i32 [[TMP17]], ptr [[TMP16]], align 4
; VF4-NEXT:    br label [[PRED_STORE_CONTINUE6]]
; VF4:       pred.store.continue6:
; VF4-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 4
; VF4-NEXT:    [[TMP18]] = add <4 x i32> [[VEC_IND]], <i32 4, i32 4, i32 4, i32 4>
; VF4-NEXT:    br i1 true, label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; VF4:       middle.block:
; VF4-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; VF4:       scalar.ph:
; VF4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ 4, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; VF4-NEXT:    br label [[LOOP:%.*]]
; VF4:       loop:
; VF4-NEXT:    [[IV:%.*]] = phi i32 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; VF4-NEXT:    [[IV_EXT:%.*]] = sext i32 [[IV]] to i64
; VF4-NEXT:    [[IV_TRUNC:%.*]] = trunc i64 [[IV_EXT]] to i32
; VF4-NEXT:    [[GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV_EXT]]
; VF4-NEXT:    store i32 [[IV_TRUNC]], ptr [[GEP]], align 4
; VF4-NEXT:    [[IV_NEXT]] = add i32 [[IV]], 1
; VF4-NEXT:    [[C:%.*]] = icmp slt i32 [[IV_NEXT]], 3
; VF4-NEXT:    br i1 [[C]], label [[LOOP]], label [[EXIT]], !llvm.loop [[LOOP9:![0-9]+]]
; VF4:       exit:
; VF4-NEXT:    ret void
;
; IC2-LABEL: define void @cast_induction_tail_folding(
; IC2-SAME: ptr [[A:%.*]]) {
; IC2-NEXT:  entry:
; IC2-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; IC2:       vector.ph:
; IC2-NEXT:    br label [[VECTOR_BODY:%.*]]
; IC2:       vector.body:
; IC2-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[PRED_STORE_CONTINUE2:%.*]] ]
; IC2-NEXT:    [[TMP0:%.*]] = add i32 [[INDEX]], 0
; IC2-NEXT:    [[TMP1:%.*]] = add i32 [[INDEX]], 1
; IC2-NEXT:    [[TMP2:%.*]] = icmp ule i32 [[TMP0]], 2
; IC2-NEXT:    [[TMP3:%.*]] = icmp ule i32 [[TMP1]], 2
; IC2-NEXT:    br i1 [[TMP2]], label [[PRED_STORE_IF:%.*]], label [[PRED_STORE_CONTINUE:%.*]]
; IC2:       pred.store.if:
; IC2-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP0]] to i64
; IC2-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP4]]
; IC2-NEXT:    store i32 [[TMP0]], ptr [[TMP5]], align 4
; IC2-NEXT:    br label [[PRED_STORE_CONTINUE]]
; IC2:       pred.store.continue:
; IC2-NEXT:    br i1 [[TMP3]], label [[PRED_STORE_IF1:%.*]], label [[PRED_STORE_CONTINUE2]]
; IC2:       pred.store.if1:
; IC2-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP1]] to i64
; IC2-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP6]]
; IC2-NEXT:    store i32 [[TMP1]], ptr [[TMP7]], align 4
; IC2-NEXT:    br label [[PRED_STORE_CONTINUE2]]
; IC2:       pred.store.continue2:
; IC2-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 2
; IC2-NEXT:    [[TMP8:%.*]] = icmp eq i32 [[INDEX_NEXT]], 4
; IC2-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
; IC2:       middle.block:
; IC2-NEXT:    br i1 true, label [[EXIT:%.*]], label [[SCALAR_PH]]
; IC2:       scalar.ph:
; IC2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ 4, [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; IC2-NEXT:    br label [[LOOP:%.*]]
; IC2:       loop:
; IC2-NEXT:    [[IV:%.*]] = phi i32 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
; IC2-NEXT:    [[IV_EXT:%.*]] = sext i32 [[IV]] to i64
; IC2-NEXT:    [[IV_TRUNC:%.*]] = trunc i64 [[IV_EXT]] to i32
; IC2-NEXT:    [[GEP:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[IV_EXT]]
; IC2-NEXT:    store i32 [[IV_TRUNC]], ptr [[GEP]], align 4
; IC2-NEXT:    [[IV_NEXT]] = add i32 [[IV]], 1
; IC2-NEXT:    [[C:%.*]] = icmp slt i32 [[IV_NEXT]], 3
; IC2-NEXT:    br i1 [[C]], label [[LOOP]], label [[EXIT]], !llvm.loop [[LOOP9:![0-9]+]]
; IC2:       exit:
; IC2-NEXT:    ret void
;

entry:
  br label %loop

loop:
  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]
  %iv.ext = sext i32 %iv to i64
  %iv.trunc  = trunc i64 %iv.ext to i32
  %gep = getelementptr inbounds i32, ptr %A, i64 %iv.ext
  store i32 %iv.trunc, ptr %gep
  %iv.next = add i32 %iv, 1
  %c = icmp slt i32 %iv.next, 3
  br i1 %c, label %loop, label %exit

exit:
  ret void
}
;.
; VF4: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; VF4: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; VF4: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; VF4: [[LOOP3]] = distinct !{[[LOOP3]], [[META2]], [[META1]]}
; VF4: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; VF4: [[LOOP5]] = distinct !{[[LOOP5]], [[META2]], [[META1]]}
; VF4: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]], [[META2]]}
; VF4: [[LOOP7]] = distinct !{[[LOOP7]], [[META2]], [[META1]]}
; VF4: [[LOOP8]] = distinct !{[[LOOP8]], [[META1]], [[META2]]}
; VF4: [[LOOP9]] = distinct !{[[LOOP9]], [[META2]], [[META1]]}
;.
; IC2: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; IC2: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; IC2: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; IC2: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]]}
; IC2: [[LOOP4]] = distinct !{[[LOOP4]], [[META1]], [[META2]]}
; IC2: [[LOOP5]] = distinct !{[[LOOP5]], [[META1]]}
; IC2: [[LOOP6]] = distinct !{[[LOOP6]], [[META1]], [[META2]]}
; IC2: [[LOOP7]] = distinct !{[[LOOP7]], [[META1]]}
; IC2: [[LOOP8]] = distinct !{[[LOOP8]], [[META1]], [[META2]]}
; IC2: [[LOOP9]] = distinct !{[[LOOP9]], [[META1]]}
;.

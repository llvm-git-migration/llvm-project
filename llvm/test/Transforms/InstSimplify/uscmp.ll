; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instsimplify -S | FileCheck %s
define i8 @scmp_lt() {
; CHECK-LABEL: define i8 @scmp_lt() {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.scmp.i8.i32(i32 -7, i32 3)
; CHECK-NEXT:    ret i8 [[TMP1]]
;
  %1 = call i8 @llvm.scmp(i32 -7, i32 3)
  ret i8 %1
}

define i2 @ucmp_eq() {
; CHECK-LABEL: define i2 @ucmp_eq() {
; CHECK-NEXT:    [[TMP1:%.*]] = call i2 @llvm.ucmp.i2.i32(i32 12, i32 12)
; CHECK-NEXT:    ret i2 [[TMP1]]
;
  %1 = call i2 @llvm.ucmp(i32 12, i32 12)
  ret i2 %1
}

define i100 @ucmp_gt() {
; CHECK-LABEL: define i100 @ucmp_gt() {
; CHECK-NEXT:    [[TMP1:%.*]] = call i100 @llvm.ucmp.i100.i32(i32 7, i32 3)
; CHECK-NEXT:    ret i100 [[TMP1]]
;
  %1 = call i100 @llvm.ucmp(i32 7, i32 3)
  ret i100 %1
}

define <4 x i8> @ucmp_lt_splat() {
; CHECK-LABEL: define <4 x i8> @ucmp_lt_splat() {
; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i8> @llvm.ucmp.v4i8.v4i32(<4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32> <i32 3, i32 3, i32 3, i32 3>)
; CHECK-NEXT:    ret <4 x i8> [[TMP1]]
;
  %1 = call <4 x i8> @llvm.ucmp(<4 x i32> splat(i32 1), <4 x i32> splat(i32 3))
  ret <4 x i8> %1
}

define <4 x i8> @scmp_nonsplat() {
; CHECK-LABEL: define <4 x i8> @scmp_nonsplat() {
; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i8> @llvm.scmp.v4i8.v4i32(<4 x i32> <i32 0, i32 1, i32 2, i32 3>, <4 x i32> <i32 -1, i32 1, i32 -2, i32 4>)
; CHECK-NEXT:    ret <4 x i8> [[TMP1]]
;
  %1 = call <4 x i8> @llvm.scmp(<4 x i32> <i32 0, i32 1, i32 2, i32 3>, <4 x i32> <i32 -1, i32 1, i32 -2, i32 4>)
  ret <4 x i8> %1
}

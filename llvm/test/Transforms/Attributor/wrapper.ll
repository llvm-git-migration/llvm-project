; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=attributor-cgscc -debug-only=attributor -attributor-annotate-decl-cs -attributor-allow-shallow-wrappers -S < %s | FileCheck %s --check-prefix=CHECK

; TEST 1: simple test, without argument
; A wrapper will be generated for this function, Check the wrapper first
; CHECK-NOT: Function Attrs:
;
; Check the original function, which is wrapped and becomes anonymous
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define linkonce i32 @inner1() {
; CHECK-LABEL: define linkonce i32 @inner1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @[[GLOB0:[0-9]+]]() #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    ret i32 [[TMP0]]
;
entry:
  %a = alloca i32
  store i32 1, ptr %a
  %b = load i32, ptr %a
  ret i32 %b
}

; Check for call
define i32 @outer1() {
; CHECK-LABEL: define i32 @outer1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RET:%.*]] = call i32 @inner1()
; CHECK-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner1()
  ret i32 %ret
}

; TEST 2: with argument
; CHECK-NOT: Function Attrs
;
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define linkonce i32 @inner2(i32 %a, i32 %b) {
; CHECK-LABEL: define linkonce i32 @inner2(
; CHECK-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i32 @[[GLOB1:[0-9]+]](i32 [[A]], i32 [[B]]) #[[ATTR1]]
; CHECK-NEXT:    ret i32 [[TMP0]]
;
entry:
  %c = add i32 %a, %b
  ret i32 %c
}

define i32 @outer2() {
; CHECK-LABEL: define i32 @outer2() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RET:%.*]] = call i32 @inner2(i32 noundef 1, i32 noundef 2)
; CHECK-NEXT:    ret i32 [[RET]]
;
entry:
  %ret = call i32 @inner2(i32 1, i32 2)
  ret i32 %ret
}

; TEST 3: check nocurse
; This function calls itself, there will be no attribute
; CHECK-NOT: Function Attrs
;
; CHECK-NOT: Function Attrs:
define linkonce i32 @inner3(i32) {
; CHECK-LABEL: define linkonce i32 @inner3(
; CHECK-SAME: i32 [[TMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i32 @[[GLOB2:[0-9]+]](i32 [[TMP0]]) #[[ATTR1]]
; CHECK-NEXT:    ret i32 [[TMP1]]
;
entry:
  %1 = alloca i32
  store i32 %0, ptr %1
  br label %2
2:
  %3 = load i32, ptr %1
  %4 = icmp slt i32 %3, 4
  br i1 %4, label %5, label %9
5:
  %6 = load i32, ptr %1
  %7 = add nsw i32 %6, 1
  %8 = call i32 @inner3(i32 %7)
  store i32 %8, ptr %1
  br label %2
9:
  %10 = load i32, ptr %1
  ret i32 %10
}


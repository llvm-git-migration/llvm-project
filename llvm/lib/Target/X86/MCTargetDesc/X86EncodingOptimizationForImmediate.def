//===- X86EncodingOptimizationForImmediate.def.def ---------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
// \file
// This file defines all the entries of X86 instruction relaxation for immediate
//===----------------------------------------------------------------------===//

#ifndef ENTRY
#define ENTRY(LONG, SHORT)
#endif
ENTRY(ADC16mi, ADC16mi8)
ENTRY(ADC16ri, ADC16ri8)
ENTRY(ADC32mi, ADC32mi8)
ENTRY(ADC32ri, ADC32ri8)
ENTRY(ADC64mi32, ADC64mi8)
ENTRY(ADC64ri32, ADC64ri8)
ENTRY(SBB16mi, SBB16mi8)
ENTRY(SBB16ri, SBB16ri8)
ENTRY(SBB32mi, SBB32mi8)
ENTRY(SBB32ri, SBB32ri8)
ENTRY(SBB64mi32, SBB64mi8)
ENTRY(SBB64ri32, SBB64ri8)
ENTRY(ADD16mi, ADD16mi8)
ENTRY(ADD16ri, ADD16ri8)
ENTRY(ADD32mi, ADD32mi8)
ENTRY(ADD32ri, ADD32ri8)
ENTRY(ADD64mi32, ADD64mi8)
ENTRY(ADD64ri32, ADD64ri8)
ENTRY(AND16mi, AND16mi8)
ENTRY(AND16ri, AND16ri8)
ENTRY(AND32mi, AND32mi8)
ENTRY(AND32ri, AND32ri8)
ENTRY(AND64mi32, AND64mi8)
ENTRY(AND64ri32, AND64ri8)
ENTRY(OR16mi, OR16mi8)
ENTRY(OR16ri, OR16ri8)
ENTRY(OR32mi, OR32mi8)
ENTRY(OR32ri, OR32ri8)
ENTRY(OR64mi32, OR64mi8)
ENTRY(OR64ri32, OR64ri8)
ENTRY(SUB16mi, SUB16mi8)
ENTRY(SUB16ri, SUB16ri8)
ENTRY(SUB32mi, SUB32mi8)
ENTRY(SUB32ri, SUB32ri8)
ENTRY(SUB64mi32, SUB64mi8)
ENTRY(SUB64ri32, SUB64ri8)
ENTRY(XOR16mi, XOR16mi8)
ENTRY(XOR16ri, XOR16ri8)
ENTRY(XOR32mi, XOR32mi8)
ENTRY(XOR32ri, XOR32ri8)
ENTRY(XOR64mi32, XOR64mi8)
ENTRY(XOR64ri32, XOR64ri8)
ENTRY(CMP16mi, CMP16mi8)
ENTRY(CMP16ri, CMP16ri8)
ENTRY(CMP32mi, CMP32mi8)
ENTRY(CMP32ri, CMP32ri8)
ENTRY(CMP64mi32, CMP64mi8)
ENTRY(CMP64ri32, CMP64ri8)
ENTRY(IMUL16rmi, IMUL16rmi8)
ENTRY(IMUL16rri, IMUL16rri8)
ENTRY(IMUL32rmi, IMUL32rmi8)
ENTRY(IMUL32rri, IMUL32rri8)
ENTRY(IMUL64rmi32, IMUL64rmi8)
ENTRY(IMUL64rri32, IMUL64rri8)
ENTRY(PUSH16i, PUSH16i8)
ENTRY(PUSH32i, PUSH32i8)
ENTRY(PUSH64i32, PUSH64i8)
ENTRY(ADC16mi_ND, ADC16mi8_ND)
ENTRY(ADC16ri_ND, ADC16ri8_ND)
ENTRY(ADC32mi_ND, ADC32mi8_ND)
ENTRY(ADC32ri_ND, ADC32ri8_ND)
ENTRY(ADC64mi32_ND, ADC64mi8_ND)
ENTRY(ADC64ri32_ND, ADC64ri8_ND)
ENTRY(SBB16mi_ND, SBB16mi8_ND)
ENTRY(SBB16ri_ND, SBB16ri8_ND)
ENTRY(SBB32mi_ND, SBB32mi8_ND)
ENTRY(SBB32ri_ND, SBB32ri8_ND)
ENTRY(SBB64mi32_ND, SBB64mi8_ND)
ENTRY(SBB64ri32_ND, SBB64ri8_ND)
ENTRY(ADD16mi_ND, ADD16mi8_ND)
ENTRY(ADD16ri_ND, ADD16ri8_ND)
ENTRY(ADD32mi_ND, ADD32mi8_ND)
ENTRY(ADD32ri_ND, ADD32ri8_ND)
ENTRY(ADD64mi32_ND, ADD64mi8_ND)
ENTRY(ADD64ri32_ND, ADD64ri8_ND)
ENTRY(AND16mi_ND, AND16mi8_ND)
ENTRY(AND16ri_ND, AND16ri8_ND)
ENTRY(AND32mi_ND, AND32mi8_ND)
ENTRY(AND32ri_ND, AND32ri8_ND)
ENTRY(AND64mi32_ND, AND64mi8_ND)
ENTRY(AND64ri32_ND, AND64ri8_ND)
ENTRY(OR16mi_ND, OR16mi8_ND)
ENTRY(OR16ri_ND, OR16ri8_ND)
ENTRY(OR32mi_ND, OR32mi8_ND)
ENTRY(OR32ri_ND, OR32ri8_ND)
ENTRY(OR64mi32_ND, OR64mi8_ND)
ENTRY(OR64ri32_ND, OR64ri8_ND)
ENTRY(SUB16mi_ND, SUB16mi8_ND)
ENTRY(SUB16ri_ND, SUB16ri8_ND)
ENTRY(SUB32mi_ND, SUB32mi8_ND)
ENTRY(SUB32ri_ND, SUB32ri8_ND)
ENTRY(SUB64mi32_ND, SUB64mi8_ND)
ENTRY(SUB64ri32_ND, SUB64ri8_ND)
ENTRY(XOR16mi_ND, XOR16mi8_ND)
ENTRY(XOR16ri_ND, XOR16ri8_ND)
ENTRY(XOR32mi_ND, XOR32mi8_ND)
ENTRY(XOR32ri_ND, XOR32ri8_ND)
ENTRY(XOR64mi32_ND, XOR64mi8_ND)
ENTRY(XOR64ri32_ND, XOR64ri8_ND)
ENTRY(ADD16mi_NF_ND, ADD16mi8_NF_ND)
ENTRY(ADD16ri_NF_ND, ADD16ri8_NF_ND)
ENTRY(ADD32mi_NF_ND, ADD32mi8_NF_ND)
ENTRY(ADD32ri_NF_ND, ADD32ri8_NF_ND)
ENTRY(ADD64mi32_NF_ND, ADD64mi8_NF_ND)
ENTRY(ADD64ri32_NF_ND, ADD64ri8_NF_ND)
ENTRY(AND16mi_NF_ND, AND16mi8_NF_ND)
ENTRY(AND16ri_NF_ND, AND16ri8_NF_ND)
ENTRY(AND32mi_NF_ND, AND32mi8_NF_ND)
ENTRY(AND32ri_NF_ND, AND32ri8_NF_ND)
ENTRY(AND64mi32_NF_ND, AND64mi8_NF_ND)
ENTRY(AND64ri32_NF_ND, AND64ri8_NF_ND)
ENTRY(OR16mi_NF_ND, OR16mi8_NF_ND)
ENTRY(OR16ri_NF_ND, OR16ri8_NF_ND)
ENTRY(OR32mi_NF_ND, OR32mi8_NF_ND)
ENTRY(OR32ri_NF_ND, OR32ri8_NF_ND)
ENTRY(OR64mi32_NF_ND, OR64mi8_NF_ND)
ENTRY(OR64ri32_NF_ND, OR64ri8_NF_ND)
ENTRY(SUB16mi_NF_ND, SUB16mi8_NF_ND)
ENTRY(SUB16ri_NF_ND, SUB16ri8_NF_ND)
ENTRY(SUB32mi_NF_ND, SUB32mi8_NF_ND)
ENTRY(SUB32ri_NF_ND, SUB32ri8_NF_ND)
ENTRY(SUB64mi32_NF_ND, SUB64mi8_NF_ND)
ENTRY(SUB64ri32_NF_ND, SUB64ri8_NF_ND)
ENTRY(XOR16mi_NF_ND, XOR16mi8_NF_ND)
ENTRY(XOR16ri_NF_ND, XOR16ri8_NF_ND)
ENTRY(XOR32mi_NF_ND, XOR32mi8_NF_ND)
ENTRY(XOR32ri_NF_ND, XOR32ri8_NF_ND)
ENTRY(XOR64mi32_NF_ND, XOR64mi8_NF_ND)
ENTRY(XOR64ri32_NF_ND, XOR64ri8_NF_ND)
#undef ENTRY
